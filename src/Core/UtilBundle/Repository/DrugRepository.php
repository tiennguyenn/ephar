<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Entity\ActiveIngredient;
use UtilBundle\Entity\DoctorMedicalFavourite;
use UtilBundle\Entity\DrugActiveIngredient;
use UtilBundle\Utility\Constant;

/**
 * DrugRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DrugRepository extends EntityRepository
{   
    public function listProducts($params)
    {
    	$qb = $this->createQueryBuilder('d');
        
        $qb->innerJoin('UtilBundle:GstCode', 'gst', 'WITH', 'd.gstCode = gst.id');
        
        if (isset($params['pharmacy_id']) && $params['pharmacy_id']) {
            $qb->where($qb->expr()->eq('d.pharmacy', ':pharmacyId'))
                ->setParameter('pharmacyId', $params['pharmacy_id']);
        }
        
        if (isset($params['name']) && !empty($params['name'])) {
            $qb->andWhere($qb->expr()->like('d.name', ':name'))
                ->setParameter('name', "%" . trim($params['name'], ".") . "%");
        }
        
		// Get drugs which is waiting to approve cost price change
        if (isset($params['status']) && $params['status'] == 'pending') {
            $qb->innerJoin('UtilBundle:DrugAudit', 'da', 'WITH', 'd.id = da.drug');
            $qb->andWhere($qb->expr()->eq("da.status", ':status'))
                ->andWhere($qb->expr()->eq("da.priceType", ':type'))
                ->setParameter('status', Constant::DRUG_AUDIT_PENDING)
                ->setParameter('type', 'cost_price');
        } else {
            $qb->leftJoin('UtilBundle:DrugAudit', 'da', 'WITH', "d.id = da.drug AND da.priceType = 'cost_price' AND da.status = " . Constant::DRUG_AUDIT_PENDING);
        }
		
		$qb->andWhere("d.deletedOn IS NULL")
			->andWhere("d.discontinuedOn IS NULL");
        
        if (!empty($params['sort']) && !empty($params['dir'])) {
            $qb->addOrderBy("d.".$params['sort'], $params['dir']);
        } else {
            $qb->addOrderBy("d.createdOn", "desc");
        }

        $total = $qb->select('count(distinct d)')
            ->getQuery()
            ->getSingleScalarResult();

        $qb->select('distinct d.id, d.name, d.costPrice, d.listPriceDomestic, d.listPriceInternational, gst.code as gstCode,
                            da.oldCostPrice, da.newCostPrice, da.takeEffectOn, da.priceType, da.status');
        
        if (isset($params['page'])) {
            $qb->setFirstResult(($params['page'] - 1) * $params['limit'])
                ->setMaxResults($params['limit']);
        }
        
        $list = $qb->getQuery()->execute();
		
		$page = isset($params['page']) ? $params['page'] : 1;
		$pages = isset($params['limit']) ? ceil($total/$params['limit']) : 1;
		$limit = isset($params['limit']) ? $params['limit'] : 0;
		$start = $page - 2 < 1 ? 1 : $page - 2;
		$end = $page + 2 > $pages ? $pages : $page + 2;
		if ($end - $start < 4) {
			$end = $start + 4 > $pages ? $pages : $start + 4;
		}
		if ($end - $start < 4) {
			$start = $end - 4 < 1 ? 1 : $end - 4;
		}
		
        return array(
            'total' => $total,
            'page' => $page,
            'pages' => $pages,
            'limit' => $limit,
			'start' => $start,
			'end' => $end,
            'list' => $list
        );
    }
    
    public function listProductWithAudit($pharmacyId)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->innerJoin("UtilBundle:DrugAudit", "da", "WITH", "da.drug = d.id");
        $qb->where($qb->expr()->eq("d.pharmacy", ":pharmacyId"))
            ->andWhere($qb->expr()->eq("da.status", ":status"))
            ->setParameter("pharmacyId", $pharmacyId)
            ->setParameter("status", Constant::DRUG_AUDIT_APPROVED);
            
        $list = $qb->select("d.id, da.priceType, da.oldCostPrice, da.newCostPrice, da.takeEffectOn")
                    ->getQuery()
                    ->getResult();
                    
        $result = array();     
        foreach ($list as $item) {
            if (!isset($result[$item['id']])) {
                $result[$item['id']] = array();
            }
            $result[$item['id']][$item['priceType']] = array(
                "old_value" => $item['oldCostPrice'],
                "new_value" => $item['newCostPrice'],
                "take_effect_on" => $item['takeEffectOn'],
            );
        }
        
        return $result;
    }

    public function listNames($params)
    {
    	$qb = $this->createQueryBuilder('d');
        
        $qb->where($qb->expr()->eq('d.pharmacy', ':pharmacyId'))
            ->setParameter('pharmacyId', $params['pharmacy_id']);
                
        $qb->andWhere($qb->expr()->like('d.name', ':name'))
            ->setParameter('name', "%" . $params['name'] . "%");

        if(isset($params['group']) && !empty($params['group'])) {
            $qb->andWhere('d.group = :group')
            ->setParameter('group', $params['group']);
        }
		
		$qb->andWhere("d.discontinuedOn IS NULL")
			->andWhere("d.deletedOn IS NULL");

        $qb->select('distinct d.name');
        
        $qb->addOrderBy("d.name", 'asc');
        
        $qb->setFirstResult(0)
            ->setMaxResults(5);
            
        $list = $qb->getQuery()->execute();
        
        return $list;
    }
    
    public function totalPendingProducts($pharmacyId, $groupId = null)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->select('DISTINCT d.id, d.name, d.costPrice, d.listPriceDomestic, d.listPriceInternational, gst.code as gstCode,
            da.oldCostPrice, da.newCostPrice, da.takeEffectOn, da.priceType, da.status')
            ->innerJoin('UtilBundle:GstCode', 'gst', 'WITH', 'd.gstCode = gst.id')
            ->innerJoin('UtilBundle:DrugAudit', 'da', 'WITH', 'd.id = da.drug')
            ->where($qb->expr()->eq('d.pharmacy', ':pharmacyId'))
            ->andWhere($qb->expr()->eq('da.status', ':status'))
            ->andWhere($qb->expr()->eq('da.priceType', ':priceType'))
            ->andWhere("d.deletedOn IS NULL")
            ->andWhere("d.discontinuedOn IS NULL")
            ->setParameter('pharmacyId', $pharmacyId)
            ->setParameter('status', Constant::DRUG_AUDIT_PENDING)
            ->setParameter('priceType', 'cost_price');

        if ($groupId != null) {
            $qb->andWhere($qb->expr()->eq('d.group', ':groupId'))
                ->setParameter('groupId', $groupId);
        }

        $result = $qb->getQuery()->getArrayResult();

        return count($result);
    }

    /**
    * get selection drug
    */
    public function getSelectionDrug($group=null)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->select('d.id, d.name, g.id as groupId')
            ->leftJoin('d.group', 'g')
           ->where('d.deletedOn is null');

         if($group != null) {
            $qb->andWhere('d.group is null OR d.group = 1 OR d.group = :group')
            ->setParameter('group', $group);
        } else {
            $qb->andWhere('d.group is null OR d.group = 1');
        }

        $list = $qb->getQuery()->getArrayResult();
        return $list;
    }

    public function getListBy($params)
    {
        $qb = $this->createQueryBuilder('d');
        
        $qb->innerJoin('UtilBundle:GstCode', 'gst', 'WITH', 'd.gstCode = gst.id');
        
        if (isset($params['group_id']) && $params['group_id']) {
            $qb->where($qb->expr()->eq('d.group', ':groupId'))
                ->setParameter('groupId', $params['group_id']);
        }
        
        if (isset($params['name']) && !empty($params['name'])) {
            $qb->andWhere($qb->expr()->like('d.name', ':name'))
                ->setParameter('name', "%" . trim($params['name'], ".") . "%");
        }
        
        // Get drugs which is waiting to approve cost price change
        if (isset($params['status']) && $params['status'] == 'pending') {
            $qb->innerJoin('UtilBundle:DrugAudit', 'da', 'WITH', 'd.id = da.drug');
            $qb->andWhere($qb->expr()->eq("da.status", ':status'))
                ->andWhere($qb->expr()->eq("da.priceType", ':type'))
                ->setParameter('status', Constant::DRUG_AUDIT_PENDING)
                ->setParameter('type', 'cost_price');
        } else {
            $qb->leftJoin('UtilBundle:DrugAudit', 'da', 'WITH', "d.id = da.drug AND da.priceType = 'cost_price' AND da.status = " . Constant::DRUG_AUDIT_PENDING);
        }
        
        $qb->andWhere("d.deletedOn IS NULL")
            ->andWhere("d.discontinuedOn IS NULL");
        
        if (!empty($params['sort']) && !empty($params['dir'])) {
            $qb->addOrderBy("d.".$params['sort'], $params['dir']);
        } else {
            $qb->addOrderBy("d.createdOn", "desc");
        }

        $total = $qb->select('count(distinct d)')
            ->getQuery()
            ->getSingleScalarResult();

        $qb->select('distinct d.id, d.name, d.costPrice, d.listPriceDomestic, d.listPriceInternational, d.isColdChain,
            gst.code as gstCode, da.oldCostPrice, da.newCostPrice, da.takeEffectOn, da.priceType, da.status');
        
        if (isset($params['page'])) {
            $qb->setFirstResult(($params['page'] - 1) * $params['limit'])
                ->setMaxResults($params['limit']);
        }
        
        $list = $qb->getQuery()->execute();
        
        $page = isset($params['page']) ? $params['page'] : 1;
        $pages = isset($params['limit']) ? ceil($total/$params['limit']) : 1;
        $limit = isset($params['limit']) ? $params['limit'] : 0;
        $start = $page - 2 < 1 ? 1 : $page - 2;
        $end = $page + 2 > $pages ? $pages : $page + 2;
        if ($end - $start < 4) {
            $end = $start + 4 > $pages ? $pages : $start + 4;
        }
        if ($end - $start < 4) {
            $start = $end - 4 < 1 ? 1 : $end - 4;
        }
        
        return array(
            'total' => $total,
            'page' => $page,
            'pages' => $pages,
            'limit' => $limit,
            'start' => $start,
            'end' => $end,
            'list' => $list
        );
    }

    public function getDrugBy($drugIds)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->andWhere("d.id IN (:ids)")
           ->setParameter('ids', $drugIds);

        return $qb->getQuery()->execute();
    }

    /**
     * get list Medicine Costs
     * @author  vinh.nguyen
     */
    public function getMedicineCosts($params)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->select('d.id, d.name, d.costPrice, gst.code, d.listPriceDomestic, d.listPriceInternational')
            ->innerJoin('UtilBundle:GstCode', 'gst', 'WITH', 'd.gstCode = gst.id');
        
        if (isset($params['group']) && $params['group']) {
            $qb->where($qb->expr()->eq('d.group', ':group'))
                ->setParameter('group', $params['group']);
        }        
        if (isset($params['name']) && !empty($params['name'])) {
            $term = trim($params['name']);
            $qb->andWhere($qb->expr()->like('d.name', ':name'))
                ->setParameter('name', "%" . trim($term, ".") . "%");
        }
        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                if($arrSort[0] == 'code') {
                    $qb->orderBy('gst.'.$arrSort[0], strtoupper($arrSort[1]));
                } else {
                    $qb->orderBy('d.'.$arrSort[0], strtoupper($arrSort[1]));
                }
            }
        }

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }

    public function getDrugIngredients($drugId, $getName = false)
    {
        $criteria = array(
            'drug' => $drugId
        );

        $ingredients = $this->getEntityManager()
            ->getRepository('UtilBundle:DrugActiveIngredient')
            ->findBy($criteria);

        $result = array();
        foreach ($ingredients as $value) {
            if ($getName) {
                $result[] = $value->getActiveIngredient()->getName();
            } else {
                $result[] = $value->getActiveIngredient();
            }
        }

        return $result;
    }

    public function getDrugAZList($doctorId, $keyword = "")
    {
        $result = array();
        $drugs = $this->createQueryBuilder('d')
            ->select('d', 'fav.id', 'GROUP_CONCAT(ai.name) as activeIngredient')
            ->leftJoin(DrugActiveIngredient::class, 'dai', 'WITH', 'dai.drug = d.id')
            ->leftJoin(ActiveIngredient::class, 'ai', 'WITH', 'dai.activeIngredient = ai.id')
            ->leftJoin(DoctorMedicalFavourite::class, 'fav', 'WITH', 'fav.drug=d AND fav.doctor=:doctorId')
            ->where('d.name LIKE :name')
            ->orWhere('ai.name LIKE :ai_name')
            ->andWhere('d.deletedOn IS NULL')
            ->orderBy('d.name')
            ->groupBy('d.name')
            ->setParameter('name', "%$keyword%")
            ->setParameter('ai_name', "%$keyword%")
            ->setParameter('doctorId', $doctorId)
            ->getQuery()
            ->getResult();

        foreach ($drugs as $drug) {
			$activeIngredients = $drug['activeIngredient'];
            $favId = $drug['id'];
            $drug = $drug[0];
            $temp = array(
                'id' => $drug->getId(),
                'name' => $drug->getName(),
                'activeIngredients' => $activeIngredients,
                'internationalPrince' => $drug->getListPriceInternational(),
                'localPrice' => $drug->getListPriceDomestic(),
                'stockStatus' => $drug->getStockStatus()->getName(),
                'favId' => $favId
            );

            $firstLetter = strtoupper(substr($drug->getName(), 0, 1));
            if (is_numeric($firstLetter)) {
                $result['#'][] = $temp;
            } else {
                $result[$firstLetter][] = $temp;
            }
        }

        return $result;
    }

    public function getDoctorDrugDomestic($drug, $doctorId)
    {
        $em = $this->getEntityManager();

        $list = $em->getRepository('UtilBundle:DoctorDrug')
            ->findBy([
                'doctor' => $doctorId,
                'drug' => $drug
            ], ['effectiveDate' => 'asc']);

        $result = 0;
        foreach ($list as $value) {
            if (empty($value->getListPriceDomestic())) {
                continue;
            }

            $result = $value->getListPriceDomestic();

            $effectiveDate = $value->getEffectiveDate();
            if ($effectiveDate <= new \DateTime()) {
                $result = $value->getListPriceDomesticNew();
            }
        }

        if ($result) {
            return $result;
        }

        return $drug->getListPriceDomestic();
    }

    public function getDoctorDrugInternational($drug, $doctorId)
    {
        $em = $this->getEntityManager();

        $list = $em->getRepository('UtilBundle:DoctorDrug')
            ->findBy([
                'doctor' => $doctorId,
                'drug' => $drug
            ], ['effectiveDate' => 'asc']);

        $result = 0;
        foreach ($list as $value) {
            if (empty($value->getListPriceInternational())) {
                continue;
            }

            $result = $value->getListPriceInternational();

            $effectiveDate = $value->getEffectiveDate();
            if ($effectiveDate <= new \DateTime()) {
                $result = $value->getListPriceInternationalNew();
            }
        }

        if ($result) {
            return $result;
        }

        return $drug->getListPriceInternational();
    }
}
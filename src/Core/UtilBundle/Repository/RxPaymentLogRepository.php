<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Constant;

/**
 * RxPaymentLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RxPaymentLogRepository extends EntityRepository {

    /**
     * Get city by Id
     * @param type $orderRef
     * author luyen nguyen
     */
    public function findByOrderRef($orderRef) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->where('f.orderRef = (:orderRef)')
                ->setParameter('orderRef', $orderRef)
                ->setMaxResults(1);
        $result = $queryBuilder->getQuery()->getOneOrNullResult();        
        return $result;
    }

    /**
     * Get payement log by
     * @param type $orderRef
     * @author vinh.nguyen
     * edit bien
     * add condition get payment log
     */
    public function findPaymentLogBy($orderRef) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->where('f.orderRef = (:orderRef) AND f.transactionId is null')
                ->andWhere($queryBuilder->expr()->neq('f.paymentType', "'".Constant::PAYMENT_TYPE_REFUND ."'"))
                ->setParameter('orderRef', $orderRef)
                ->setMaxResults(1);
        $result = $queryBuilder->getQuery()->getOneOrNullResult();
        return $result;
    }

    /**
     *
     * @param type $order
     * author bien
     */
    public function checkRefundOrder($order){
        $queryBuilder = $this->createQueryBuilder('f')
                ->where('f.orderRef = (:orderRef)')
                ->andWhere('f.paymentType = :type')
                ->andWhere('f.paymentResult = 1')
                ->setParameter('type', Constant::PAYMENT_TYPE_PAID)
                ->setParameter('orderRef', $order)
                ->setMaxResults(1);
        $result = $queryBuilder->getQuery()->getOneOrNullResult();
        return $result;
    }
    /**
     *
     * @param type $order
     * author bien
     */
    public function getRefundOrderData($order){
        $queryBuilder = $this->createQueryBuilder('f')
            ->where('f.orderRef = (:orderRef)')
            ->andWhere('f.paymentType = :type')
            ->andWhere('f.paymentResult = 1')
            ->setParameter('type', Constant::PAYMENT_TYPE_PAID)
            ->setParameter('orderRef', $order)
            ->setMaxResults(1);

        $result = $queryBuilder->getQuery()->getOneOrNullResult();
        return $result;
    }
    /**
     *
     * @param
     * author bien
     */
    public function getvalidatedRefund($data){

        $queryBuilder = $this->createQueryBuilder('f')
            ->where('f.orderRef = :orderRef')
            ->andWhere('f.paymentType = :paymentType')
            ->andWhere('f.merchantId = :merchantId')
            ->andWhere('f.amount = :amount')
            //->andWhere('f.payType = :paytype')
            ->andWhere('f.transactionId = :transactionId')
            //->andWhere('f.refundId = :refundId')
            //->andWhere('f.status = :status')
            ->setParameter('paymentType', Constant::PAYMENT_TYPE_REFUND)
            ->setParameter('orderRef', $data['RefID'])
            ->setParameter('merchantId', $data['MerchantID'])
            ->setParameter('amount', $data['Amount'])
            //->setParameter('paytype', $data['RefundType'])
            ->setParameter('transactionId', $data['TxnID'])

            //->setParameter('refundId', $data['RefundID'])
            //->setParameter('status', Constant::REFUND_STATUS_PENDING)
            ->setMaxResults(1);

        $result = $queryBuilder->getQuery()->getOneOrNullResult();
        return $result;
    }

    /**
     * get list of rx successfully refunded by specific month
     * @param  string $month 
     * @param  string $year
     * @author thu.tranq
     * @return array
     */
    public function getRxRefundedByMonth($month, $year, $doctorIds) {
        //$doctorIds .= ',22';
        $queryBuilder = $this->createQueryBuilder('rpl')
            ->select(" rpl.paymentType, rpl.paymentResult, rpl.status, rpl.orderRef, r.id as rxId")
            ->innerJoin('UtilBundle:Rx', 'r', 'WITH', "r.orderNumber = rpl.orderRef and r.doctor in ({$doctorIds})")
            ->where('rpl.paymentResult = :paymentResult')
            ->andWhere('rpl.paymentType = :paymentType')
            ->andWhere('rpl.status = :status')
            ->andWhere('MONTH(rpl.createdOn) = :month')
            ->andWhere('YEAR(rpl.createdOn) = :year')
            ->setParameter('paymentResult', 1)
            ->setParameter('paymentType', Constant::PAYMENT_TYPE_REFUND)
            ->setParameter('status', Constant::REFUND_STATUS_SUCCESS)
            ->setParameter('month', $month)
            ->setParameter('year', $year);

        $result = $queryBuilder->getQuery()->getArrayResult();

        return $result;
    }

    public function getRxRefunds($params)
    {
        // get platform setting repository
        $psRepository = $this
            ->getEntityManager()
            ->getRepository('UtilBundle:PlatformSettings');
        $psObj = $psRepository->getPlatFormSetting();

        $selectStr = " r.orderNumber as orderNumber,
                       r.paidOn as paidOn,
                       r.id as rxId,
                       ifelse(pi.firstName is null, pi.lastName, CONCAT(pi.firstName, ' ', pi.lastName)) AS doctorName,
                       ifelse(pi2.firstName is null, pi2.lastName, CONCAT(pi2.firstName, ' ', pi2.lastName)) AS patientName,
                       r.orderValue as orderValue,
                       d.doctorCode as doctorCode,
                       p.patientCode as patientCode,
                       rpl.payMethod,
                       rpl.paymentResult,
                       r.igPermitFee,
                       r.paymentGate,
                       r.taxIncome,
                       r.taxIncomeWithoutTax,
                       r.taxVat,
                       r.taxImportDuty,
                       r.gstRate
                       ";

        $queryBuilder = $this->createQueryBuilder('rpl')
            ->select($selectStr)
            ->innerJoin('rpl.rx', 'r')
            ->innerJoin('r.doctor', 'd')
            ->innerJoin('d.personalInformation', 'pi')
            ->innerJoin('r.patient', 'p')
            ->innerJoin('p.personalInformation', 'pi2')
            ->innerJoin('r.shippingAddress', 'a')
            ->innerJoin('a.city', 'ci')
            ->innerJoin('ci.country', 'c')
            ->where('rpl.paymentType = :paymentType')
            ->andWhere('rpl.status = :status')
            ->setParameter('paymentType', Constant::PAYMENT_TYPE_REFUND)
            ->setParameter('status', Constant::REFUND_STATUS_SUCCESS);

        // filter by patient type: local or oversea
        if ( isset($params['patientType']) and !empty($params['patientType'])) {
            if ((int)$params['patientType'] == Constant::AREA_TYPE_LOCAL) {
                $queryBuilder->andWhere("p.primaryResidenceCountry = :operationsCountryId")
                        ->setParameter('operationsCountryId', $psObj['operationsCountryId']);
            } else if ((int)$params['patientType'] == Constant::AREA_TYPE_OVERSEA) {
                $queryBuilder->andWhere("p.primaryResidenceCountry != :operationsCountryId")
                         ->setParameter('operationsCountryId', $psObj['operationsCountryId']);
            }
        }
        // filter by country
        if ( isset($params['countryCode']) and !empty($params['countryCode'])) {
            $queryBuilder->andWhere("c.code = :countryCode")
                    ->setParameter('countryCode', $params['countryCode']);
        }

        //filter by date
        if(isset($params['fromDate']) && !empty($params['fromDate'])){
            $startDate = new \DateTime($params['fromDate']);
            $endDate = new \DateTime($params['toDate']);
            $endDate->modify('tomorrow');
            $endDate->modify('1 second ago');
            $queryBuilder
                ->andWhere('r.paidOn <= :end AND r.paidOn >= :start')
                ->setParameter('start', $startDate->format("Y-m-d H:i:s"))
                ->setParameter('end', $endDate->format("Y-m-d H:i:s"));
        }

        // filter by doctor fee
        $orderValueGte = isset($params['orderValueGte']) ? $params['orderValueGte'] : '';
        $orderValueLte = isset($params['orderValueLte']) ? $params['orderValueLte'] : '';

        $fee = 'r.orderValue';
        if (!empty($orderValueGte) && !empty($orderValueLte)) {
            $queryBuilder->andWhere($fee . ' >= :orderValueGte')
                        ->setParameter('orderValueGte', $orderValueGte)
                        ->andWhere($fee . ' <= :orderValueLte')
                        ->setParameter('orderValueLte', $orderValueLte);
        } elseif (!empty($orderValueGte) && empty($orderValueLte)) {

            $queryBuilder->andWhere($fee . ' >= :orderValueGte')
                        ->setParameter('orderValueGte', $orderValueGte);

        } elseif (empty($orderValueGte) && !empty($orderValueLte)) {
            $queryBuilder->andWhere($fee . ' <= :orderValueLte')
                        ->setParameter('orderValueLte', $orderValueLte);
        }

        //search on patient: code, name
        if(isset($params['patientTerm']) && !empty($params['patientTerm'])) {
            $term = trim(strtolower($params['patientTerm']));

            $searchIn = $queryBuilder->expr()->like(
                            $queryBuilder->expr()->concat('pi2.firstName', $queryBuilder->expr()->concat($queryBuilder->expr()->literal(' '), 'pi2.lastName')),
                            $queryBuilder->expr()->literal( '%' . $term . '%')
                        );

            $queryBuilder
                ->andWhere($searchIn ." OR LOWER(p.patientCode) LIKE :patientTerm")
                ->setParameter('patientTerm', '%' . $term . '%');
        }

        //search on doctor: code, name
        if(isset($params['doctorTerm']) && !empty($params['doctorTerm'])) {
            $term = trim(strtolower($params['doctorTerm']));

            $searchIn = $queryBuilder->expr()->like(
                            $queryBuilder->expr()->concat('pi.firstName', $queryBuilder->expr()->concat($queryBuilder->expr()->literal(' '), 'pi.lastName')),
                            $queryBuilder->expr()->literal( '%' . $term . '%')
                        );

            $queryBuilder
                ->andWhere($searchIn ." OR LOWER(d.doctorCode) LIKE :doctorTerm")
                ->setParameter('doctorTerm', '%' . $term . '%');
        }

        //search on doctor: code, name
        if(isset($params['orderTerm']) && !empty($params['orderTerm'])) {
            $term = trim(strtolower($params['orderTerm']));

            $queryBuilder->andWhere("r.orderNumber LIKE :orderTerm")
                        ->setParameter('orderTerm', '%' . $term . '%');
        }

        // header fields sorting
        if (isset($params['sortInfo']) and !empty($params['sortInfo'])) {
            $queryBuilder->orderBy($params['sortInfo']['column'], $params['sortInfo']['direction']);
        }

        if (isset($params['isCsv'])) {
            return array(
                'data' => $queryBuilder->getQuery()->getArrayResult()
            );
        }


        $perPage     = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page        = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
        $startRecord = $perPage * $page;

        $totalResult = count($queryBuilder->getQuery()->getArrayResult());

        $queryBuilder
            ->setFirstResult($startRecord)
            ->setMaxResults($perPage);

        $result = $queryBuilder->getQuery()->getArrayResult();

        return array(
            'totalResult' => $totalResult,
            'totalPages' => ceil($totalResult/$perPage),
            'data' => $result
        );
    }
}

<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Entity\FileDocument;
use UtilBundle\Entity\Site;
use UtilBundle\Utility\Constant;

/**
 * FileDocumentLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileDocumentLogRepository extends EntityRepository {

    /*
     * Get before content agreement
     * */
    public function getContentBefore($fileDocument)
    {
        $qb = $this->createQueryBuilder('fdl')
            ->where('fdl.fileDocument = :fileDocument')
            ->orderBy('fdl.createdAt', 'DESC')
            ->setMaxResults(1)
            ->setParameter('fileDocument', $fileDocument);

        $resultQuery = $qb->getQuery()->getResult();

        if ($resultQuery) {
            return $resultQuery[0];
        } else {
            return null;
        }
    }

    /*
     * Get content for admin
     * */
    public function getContentBeforeForAdmin($documentName, $siteName = null, $returnArray = false)
    {
        $qb = $this->createQueryBuilder('fdl')
            ->innerJoin(FileDocument::class, 'fd', 'WITH', 'fd.id = fdl.fileDocument')
            ->innerJoin(Site::class, 's', 'WITH', 's.id = fd.site')
            ->where('fd.name = :fileDocument')
            ->andWhere('s.name = :site')
            ->orderBy('fdl.createdAt', 'DESC')
            ->setMaxResults(1)
            ->setParameter('fileDocument', $documentName)
            ->setParameter('site', strtolower($siteName));

        if ($returnArray) {
            $resultQuery = $qb->getQuery()->getArrayResult();
        } else {
            $resultQuery = $qb->getQuery()->getResult();
        }

        if ($resultQuery) {
            return $resultQuery[0];
        } else {
            return array();
        }
    }

    public function getDoctorGuides($country)
    {
        $qb = $this->createQueryBuilder('fdl')
            ->innerJoin(FileDocument::class, 'fd', 'WITH', 'fd.id = fdl.fileDocument')
            ->innerJoin(Site::class, 's', 'WITH', 's.id = fd.site')
            ->where('fd.name = :fileDocument')
            ->andWhere('s.name = :site')
            ->orderBy('fdl.createdAt', 'DESC')
            ->setParameter('fileDocument', Constant::DOCUMENT_NAME_DOCTOR_USER_GUIDE)
            ->setParameter('site', strtolower($country));

        $resultQuery = $qb->getQuery()->getResult();

        return $resultQuery;
    }
}

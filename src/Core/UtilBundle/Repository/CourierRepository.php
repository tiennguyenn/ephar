<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Common;

/**
 * AgentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourierRepository extends EntityRepository {
   
    /*
     * select agent to display auto commplete
     * author :biá»ƒn
     */
    
    public function selectCouriersAutoComplete($data)
    {
        $search = strtolower($data['text']);
        $query = $this->createQueryBuilder('a')
                ->andWhere('LOWER(a.name)  lIKE :name')
                ->setParameter('name', '%' . $search . '%')
                ->setMaxResults(5);
        $couriers = $query->getQuery()->getResult();
        $result = array();
        foreach ($couriers as $obj) {
                array_push($result, array( 'name' => $obj->getName()));
            
        }
     
        return $result;
    }
    /*
     * get List doctor for admin
     * @param :request
     */

    public function getCouriersAdmin($request) {
        $search = strtolower($request->get('search', ''));
        $limit = $request->get('length', '');
        $sort = $request->get('sort', array());        
        if ($limit == -1) {
            $limit = null;
        }
        $ofset = $request->get('page', 1);

        $query = $this->createQueryBuilder('a')
                ->join('a.personalInformation', 'pi')
                ->join('a.phone', 'ph')
                ->where('a.deletedOn is null')
                ->andWhere('LOWER(a.name)  lIKE :name ')
                ->setParameter('name', '%' . $search . '%')
                ->setMaxResults($limit)
                ->setFirstResult(($ofset - 1) * $limit);

        $this->generateSort($query, $sort);
        $deliveries = $query->getQuery()->getResult();
        $data = array();
        foreach ($deliveries as $obj) {
            $per = $obj->getPersonalInformation();
            $add = $obj->getAddresses()->first();
            $city = $add->getCity();
            
            $courier =  array(
                'id' => $obj->getId(),
                'hashId' => Common::encodeHex($obj->getId()),
                'name' => $obj->getName(),
                'registerDate' => $obj->getCreatedOn()->format('d M y'),
                'email' => $per->getEmailAddress(),
                'phone' => $obj->getPhone()->getPhoneNumber(),
                'country' => $city->getCountry()->getName(),
                'state' => ($city->getState())? $city->getState()->getName(): '',
                'margin' => round($obj->getMargin(),2),
                'newMargin' => round($obj->getNewMargin(),2),
                'effectDate' => ''
            );
            if($obj->getMarginEffectDate() !== NULL) {
                $courier['effectDate'] = $obj->getMarginEffectDate()->format('d M y');
            }
            $rates = $obj->getCourierRates();          
            $courier['rate_data'] = array();
            $courier['cold_chain_rate_data'] = array();
            foreach($rates as $rate){
                $objRate = array();
                $objRate['id'] = $rate->getId();
                $objRate['rate'] = round($rate->getCost(),2);
                $objRate['shippingRate'] = round($rate->getList(),2);
                $objRate['name'] = $rate->getFriendlyName();
                $objRate['igFee'] = round($rate->getIgPermitFee(),2);
                $objRate['newRate'] = round($rate->getNewCost(),2);
                $objRate['newShippingRate'] = round($rate->getNewList(),2);
                $objRate['newIgFee'] = round( $rate->getNewIgPermitFee(),2)  ;
                $objRate['CDRate'] = round($rate->getCollectionRate(),2);
                $objRate['newCDRate'] = round($rate->getNewCollectionRate(),2);
                $objRate['CDRateEffectDate'] = '';
                $objRate['rateEffectDate'] = '';
                $objRate['shippingRateEffectDate'] = '' ;
                $objRate['igFeeEffectDate'] = '';
                $objRate['sg'] = false;
                $code = $rate->getDestinationCountry();             
                if(is_object($code) && $code->getCode() == \UtilBundle\Utility\Constant::SINGAPORE_CODE) {
                    $objRate['sg'] = true;
                }
                if($rate->getCostEffectDate() !== NULL) {
                    $objRate['rateEffectDate'] = $rate->getCostEffectDate()->format('d M y');
                }
                
                if($rate->getListEffectDate() !== NULL) {
                    $objRate['shippingRateEffectDate'] = $rate->getListEffectDate()->format('d M y');
                }
                
                if($rate->getigPermitListEffectDate() !== NULL) {
                    $objRate['igFeeEffectDate'] = $rate->getigPermitListEffectDate()->format('d M y');
                }
                if( $rate->getCollectionRateEffectDate() !== NULL ) {
                    $objRate['CDRateEffectDate'] = $rate->getCollectionRateEffectDate()->format('d M y');
                }
                $estDelivery = $rate->getEstimatedDeliveryTimeline();
                $objRate['estDelivery'] = $estDelivery ? $estDelivery : '';

                $type = $rate->getType();
                if ($type) {
                    array_push($courier['cold_chain_rate_data'], $objRate);
                } else {
                    array_push($courier['rate_data'], $objRate);
                }
            }
     
            array_push($data,$courier);
        }

        $total = $this->createQueryBuilder('a')
                ->select('count(a.id)')
                ->where('a.deletedOn is null')
                ->andWhere('LOWER(a.name)  lIKE :name ')
                ->setParameter('name', '%' . $search . '%')
                ->getQuery()
                ->getSingleScalarResult();
        
        return array('data' => $data, 'total' => $total);
    }

    private function generateSort($em, $data) {
        foreach ($data as $key => $value) {
            switch ($key) {
                case 'name':                   
                    $em->orderBy("a.name", $value);
                    break;
                case 'registerDate':
                    $em->orderBy("a.createdOn", $value);
                    break;
                case 'email':
                    $em->orderBy("pi.emailAddress", $value);
                    break;
                case 'phone': 
                   // $em->orderBy("ph.emailAddress", $value);
                    break;
                case 'country':
                    break;
                case 'state': 
                    break;
            }
        }
    }
    
    public function updateCourier(){
        $query = $this->createQueryBuilder('a')             
                ->where('a.marginEffectDate  lIKE :name ')
                ->setParameter('name', '%' . date("Y-m-d") . '%');
        $deliveries = $query->getQuery()->getResult();
        return $deliveries;
    }
    
    /**
    * get courier information
    * @author vinh.nguyen
    */
    public function getCourier($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select("c.id,
                c.name,                
                pi.title,
                ifelse(pi.firstName is null, pi.lastName, CONCAT(pi.firstName, ' ', pi.lastName)) AS fullName,
                pi.emailAddress,                
                a.line1,
                a.line2,
                a.line3,
                a.postalCode,
                ci.name as city,
                st.name as state,
                co.name as country
           ")
            ->from('UtilBundle:Courier', 'c')
            ->leftJoin('c.personalInformation', 'pi')
            ->leftJoin('UtilBundle:CourierAddress', 'ca', 'WITH', 'ca.courier=c.id')
            ->innerJoin('ca.address', 'a')
            ->leftJoin('a.city', 'ci')
            ->leftJoin('ci.state', 'st')
            ->leftJoin('ci.country', 'co')
            ->andWhere('c.id=:id')
            ->setParameter('id', $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getUsedCourer(){

        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.courierCode=:code')
            ->setMaxResults(1)
            ->setParameter('code', 'WMD');

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getUsedAddress($courier)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('a')
           ->from('UtilBundle:Address', 'a')
           ->innerJoin('UtilBundle:CourierAddress', 'a2', 'WITH', 'a2.address = a.id')
           ->where('a2.courier = :courier')
           ->setParameter('courier', $courier)
           ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

}

<?php

namespace UtilBundle\Repository;

use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use DoctrineExtensions\Query;
use UtilBundle\Entity\PharmacyPoWeekly;
use UtilBundle\Entity\InvoiceUpload;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;

/**
 * PharmacyPoWeeklyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PharmacyPoWeeklyRepository extends EntityRepository
{
    /**
     * create new
     * @author vinh.nguyen
     */
    public function create($params)
    {

        $powObj = $this->findOneBy(array('cycle' => $params['cycle']));
        if($powObj == null)
            $powObj = new PharmacyPoWeekly();
        
        $powObj->setCycle($params['cycle']);
        $powObj->setPoNumber($params['poNumber']);
        $powObj->setCycleFromDate($params['cycleFromDate']);
        $powObj->setCycleToDate($params['cycleToDate']);
        $powObj->setWeeklyPoDate($params['weeklyPoDate']);
        $powObj->setAmount($params['amount']);
        $powObj->setStatus(0);
        $powObj->setProjectedPaymentDate($params['projectedPaymentDate']);
        $powObj->setCustomerReference($params['customerReference']);
        $powObj->setCreatedOn(new \DateTime());
        $powObj->setUpdatedOn(new \DateTime());

        $amountPaid = $outStandingAmount = $totalExceptionPO = 0.00;
        $powObj->setAmountPaid($amountPaid);

        $em = $this->getEntityManager();        
        $em->persist($powObj);
        $em->flush();

        return $powObj;
    }

    /**
     * pharmacy PO weekly update
     * @author vinh.nguyen
     */
    public function update($params)
    {
        $powObj = $this->findOneBy(array('id' => $params['id']));
        if( null == $powObj )
            return null;

        $powObj->setAmountPaid(str_replace(",","",$params['amountPaid']));
        $powObj->setRemark($params['remark']);
        $powObj->setStatus(1); //on update, the status will be always true
        $powObj->setUpdatedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($powObj);
        $em->flush();

        return $this->getDetailBy($params);
    }

    /**
     * update InvoiceUpload & Weekly
     * @author vinh.nguyen
     */
    public function updateWeekyUI($params)
    {
        try {
            $wObj = $this->find($params['id']);
            if( null == $wObj )
                return false;

            // Invoice Upload
            $em = $this->getEntityManager();
            if($wObj->getInvoiceUpload() != null) {            
				$params['documentUrl'] = empty($params['documentUrl']) ? $wObj->getInvoiceUpload()->getDocumentUrl() : $params['documentUrl'];
                $invoiceUpload = $em->getRepository('UtilBundle:InvoiceUpload')->find($wObj->getInvoiceUpload()->getId());
            } else {
                $invoiceUpload = new InvoiceUpload();
            }
            $invoiceUpload->setInvoiceNumber($params['invoiceNumber']);
            $invoiceUpload->setReceiveDate($params['invoiceReceiveDate']);
            $invoiceUpload->setInvoiceAmount($params['invoiceAmount']);
            $invoiceUpload->setGst($params['gst']);
            $invoiceUpload->setInvoiceTotalAmount($params['invoiceTotalAmount']);
            $invoiceUpload->setDocumentUrl($params['documentUrl']);
            $invoiceUpload->setUpdatedBy($params['updatedBy']);            
            if($wObj->getInvoiceUpload() == null) {
                $invoiceUpload->setCreatedOn(new \DateTime());
            }
            $wObj->setInvoiceUpload($invoiceUpload);

            $em->persist($invoiceUpload);
            $em->persist($wObj);
            $em->flush();

            return $this->getDetailBy($params);
        } catch (Exception $e) {
            return false;
        }
    }

    /**
     * get pharmacy PO weekly detail
     * @author  vinh.nguyen
     */
    public function getDetailBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("pow.id, 
                pow.poNumber,
                pow.cycle,
                pow.cycleFromDate,
                pow.cycleToDate,
                pow.weeklyPoDate,
                pow.amount, 
                pow.amountPaid, 
                pow.afterExcludementAmount,
                pow.projectedPaymentDate,
                pow.remark, 
                pow.status, 
                pow.filename,
                pow.createdOn,
                pow.updatedOn,
                pow.outStandingAmount,
                pow.exceptionPoWeekly,
                p.name, 
                p.isGst,
                ".Constant::USER_TYPE_PHARMACY." as userType,
                iu.id as iuId,
                iu.invoiceNumber,
                iu.invoiceAmount,
                iu.gst,
                iu.invoiceTotalAmount,
                iu.documentUrl,
                iu.createdOn as iuCreatedOn,
                iu.receiveDate
            ")
            ->from('UtilBundle:PharmacyPoWeekly', 'pow')
            ->leftJoin('pow.invoiceUpload', 'iu')
            ->leftJoin('UtilBundle:PharmacyPoDaily', 'pod', 'WITH', 'pod.poWeekly = pow.id')
            ->leftJoin('UtilBundle:Pharmacy', 'p', 'WITH', 'p.id = pod.pharmacy')
            ->groupBy('pod.poWeekly')
            ->andWhere("pow.id=:weeklyId")
            ->setParameter("weeklyId", $params['id'])
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * get list pharmacy PO weekly
     * @author  vinh.nguyen
     */
    public function getListBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("w.id, 
                w.poNumber,
                w.cycle,
                w.cycleFromDate,
                w.cycleToDate,
                w.weeklyPoDate,
                w.amount, 
                w.amountPaid, 
                w.afterExcludementAmount,
                w.projectedPaymentDate,
                w.exceptionPoWeekly,
                w.outStandingAmount,
                w.remark, 
                w.status, 
                w.filename,
                w.createdOn,
                w.updatedOn,
                w.postDate,
                p.name,
                iu.id as iuId,
                iu.invoiceNumber,
                iu.invoiceAmount,
                iu.gst,
                iu.invoiceTotalAmount,
                iu.documentUrl,
                iu.createdOn as iuCreatedOn,
                iu.updatedBy as iuUpdatedBy,
                iu.receiveDate
            ")
            ->from('UtilBundle:PharmacyPoWeekly', 'w')
            ->leftJoin('w.invoiceUpload', 'iu')
            ->leftJoin('UtilBundle:PharmacyPoDaily', 'd', 'WITH', 'd.poWeekly = w.id')
            ->leftJoin('UtilBundle:Pharmacy', 'p', 'WITH', 'p.id = d.pharmacy')
            ->andWhere('w.amount > 0')
            ->groupBy('d.poWeekly')
            ->orderBy('w.id', 'DESC')
            ;
        //filter on: term
        if(isset($params['term']) && !empty($params['term'])) {
            $qb->andWhere('LOWER(w.poNumber) LIKE :term')
                ->setParameter('term', '%'. trim(strtolower($params['term'])) .'%');
        }
        
        //filter on: cycle
        if(isset($params['cycle']) && !empty($params['cycle'])) {
            $qb->andWhere('w.cycle = :cycle')
            ->setParameter('cycle', $params['cycle']);
        }
		
        //filter on: min amount
        if(isset($params['minAmount']) && is_numeric($params['minAmount'])) {
			$qb->andWhere("w.amount >= :minAmount");
            $qb->setParameter('minAmount', $params['minAmount']);
        }
        
        //filter on: max amount
        if(isset($params['maxAmount']) && is_numeric($params['maxAmount'])) {
			$qb->andWhere("w.amount <= :maxAmount");
            $qb->setParameter('maxAmount', $params['maxAmount']);
        }

        //filter on: status
        if(isset($params['status']) && is_numeric($params['status'])) {
            $qb->andWhere('w.status = :status')
            ->setParameter('status', $params['status']);
        }

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                $qb->orderBy('w.'.$arrSort[0], strtoupper($arrSort[1]));
            }
        }

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }
    
    /**
     * get list pharmacy PO daily
     * @author  vinh.nguyen
     */
    public function getListDailyBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $wObj = $this->find($params['wid']);
        if( null == $wObj )
            return null;
        
        $qb->select("d.id,
                d.poDate,
                d.status,
                d.cycle,
                d.poNumber,
                d.totalAmount,
                d.amountPaid,
                d.excludeGstAmount,
                d.includeGstAmount,
                d.gstAmount,
                d.isExcludePayment,
                d.excludePaymentNote,
                d.filename,
                d.createdOn,
                d.outStandingAmount,
                p.name as pharmacyName,
                p.pharmacyCode,
                d.postDate,
                w.poNumber as poWeeklyNumber
            ")
            ->from('UtilBundle:PharmacyPoDaily', 'd')
            ->leftJoin('UtilBundle:Pharmacy', 'p', 'WITH', 'p.id = d.pharmacy')
            ->leftJoin('UtilBundle:PharmacyPoWeekly', 'w', 'WITH', 'w.id = d.poWeekly')
            ->where("d.poWeekly=:poWeekly AND d.isExcludePayment is null")
            ->andWhere('d.includeGstAmount > 0')
            ->setParameter("poWeekly", $wObj)
            ;

        //filter on: term
        if(isset($params['term']) && !empty($params['term'])) {
            $qb->andWhere('LOWER(d.poNumber) LIKE :term')
                ->setParameter('term', '%'. trim(strtolower($params['term'])) .'%');
        }
        
        //filter on: cycle
        if(isset($params['cycle']) && !empty($params['cycle'])) {
            $qb->andWhere('d.cycle = :cycle')
            ->setParameter('cycle', $params['cycle']);
        }
        
        //filter on: min amount
        if(isset($params['minAmount']) && $params['minAmount'] != '') {
            $qb->andWhere('d.includeGstAmount >= :minAmount')
            ->setParameter('minAmount', $params['minAmount']);
        }
        
        //filter on: max amount
        if(isset($params['maxAmount']) && $params['maxAmount'] != '') {
            $qb->andWhere('d.includeGstAmount <= :maxAmount')
            ->setParameter('maxAmount', $params['maxAmount']);
        }

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                $qb->orderBy('d.'.$arrSort[0], strtoupper($arrSort[1]));
            }
        }

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }

    /**
     * get list exception PO
     * @author  vinh.nguyen
     */
    public function getListExceptionBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("d.id,
                d.poDate,
                d.cycle,
                d.poNumber,
                d.totalAmount,
                d.amountPaid,
                d.excludeGstAmount,
                d.includeGstAmount,
				d.outStandingAmount,
                d.gstAmount,
                d.isExcludePayment,
                d.excludePaymentNote,
                d.issueStatus,
				d.status,
                d.filename,
                d.createdOn,
				d.timesSent,
                d.sentOn,
                d.postDate,
                p.name,
                iu.id as iuId,
                iu.invoiceNumber,
                iu.invoiceAmount,
                iu.gst,
                iu.invoiceTotalAmount,
                iu.documentUrl,
                iu.createdOn as iuCreatedOn,
                iu.updatedBy as iuUpdatedBy,
                w.poNumber as poWeeklyNumber
            ")
            ->from('UtilBundle:PharmacyPoDaily', 'd')
			->leftJoin('d.invoiceUpload', 'iu')
			->leftJoin('UtilBundle:Pharmacy', 'p', 'WITH', 'p.id = d.pharmacy')
            ->leftJoin('UtilBundle:PharmacyPoWeekly', 'w', 'WITH', 'w.id = d.poWeekly')
            ->where("d.isExcludePayment is not null")
            ->andWhere('d.includeGstAmount > 0')
            ;

        //filter on: term
        if(isset($params['term']) && !empty($params['term'])) {
            $qb->andWhere('LOWER(d.poNumber) LIKE :term')
                ->setParameter('term', '%'. trim(strtolower($params['term'])) .'%');
        }
        
        //filter on: cycle
        if(isset($params['cycle']) && !empty($params['cycle'])) {
            $qb->andWhere('d.cycle = :cycle')
            ->setParameter('cycle', $params['cycle']);
        }
        
        //filter on: min amount
        if(isset($params['minAmount']) && $params['minAmount'] != '') {
            $qb->andWhere('d.includeGstAmount >= :minAmount')
            ->setParameter('minAmount', $params['minAmount']);
        }
        
        //filter on: max amount
        if(isset($params['maxAmount']) && $params['maxAmount'] != '') {
            $qb->andWhere('d.includeGstAmount <= :maxAmount')
            ->setParameter('maxAmount', $params['maxAmount']);
        }

        //filter on: status
        if(isset($params['status']) && is_numeric($params['status'])) {
			$qb->andWhere($qb->expr()->eq('d.status', $params['status']));
        }
		
		if (isset($params['ids']) && !empty($params['ids'])) {
			$qb->andWhere($qb->expr()->in('d.id', ':ids'))
						->setParameter('ids', $params['ids']);
		}
		
        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                $qb->orderBy('d.'.$arrSort[0], strtoupper($arrSort[1]));
            }
        }

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }

    /**
     * get exception report
     * @author  vinh.nguyen
     */
    public function getExceptionReport($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("d.id,
                d.poDate,
                d.cycle,
                d.poNumber,
                d.totalAmount,
                d.excludeGstAmount,
                d.includeGstAmount,
                d.gstAmount,
                d.isExcludePayment,
                d.excludePaymentNote,
                d.excludedBy,
                d.excludedOn,
                d.createdOn,
                d.filename,
                p.name as pharmacyName,
                p.pharmacyCode
            ")
            ->from('UtilBundle:PharmacyPoDaily', 'd')
            ->leftJoin('UtilBundle:Pharmacy', 'p', 'WITH', 'p.id = d.pharmacy')
            ->where("d.id=:id")
            ->setParameter("id", $id)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * get daily for exclude
     * @author  vinh.nguyen
     */
    public function getDailyForExclude($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("d.id,
                d.poDate,
                d.cycle,
                d.poNumber,
                d.totalAmount,
                d.excludeGstAmount,
                d.includeGstAmount,
                d.gstAmount,
                d.isExcludePayment,
                d.excludePaymentNote,
                d.excludedBy,
                d.excludedOn,
                d.filename,
                w.poNumber as weeklyPoNumber,
                w.weeklyPoDate,
                (case when w.afterExcludementAmount is not null then w.afterExcludementAmount else w.amount end) as weeklyAmount 
            ")
            ->from('UtilBundle:PharmacyPoDaily', 'd')
            ->leftJoin('d.poWeekly', 'w')
            ->where("d.id=:id")
            ->setParameter("id", $id)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * update daily exclude
     * @author  vinh.nguyen
     */
    public function updateDailyExclude($params)
    {
        try {
            $em = $this->getEntityManager();
            $dObj = $em->getRepository('UtilBundle:PharmacyPoDaily')->find($params['id']);
            if( null == $dObj )
                return false;

            $dObj->setIsExcludePayment(true);
            $dObj->setExcludePaymentNote($params['excludePaymentNote']);
            $dObj->setExcludedBy($params['excludedBy']);
            $dObj->setExcludedOn(new \DateTime());
            $dObj->setUpdatedOn(new \DateTime());

            //STRIKE-734: Status changes to Pending
            $dObj->setStatus(0);

            $cusRef = str_replace('/', '', $dObj->getPoNumber());
            $dObj->setCustomerReference($cusRef);

            //update po weekly
            $wObj = $dObj->getPoWeekly();
            if($wObj->getAfterExcludementAmount() != null) {
                $afterAmount = $wObj->getAfterExcludementAmount() - $dObj->getIncludeGstAmount();
            } else {
                $afterAmount = $wObj->getAmount()- $dObj->getIncludeGstAmount();
            }            
            $dObj->getPoWeekly()->setAfterExcludementAmount($afterAmount);
            
            $em->persist($dObj);
            $em->flush();

            return $this->getDailyForExclude($dObj->getId());
        } catch (Exception $e) {
            return false;
        }
    }

    /**
    * resolved issue status
    * @author vinh.nguyen
    */
    public function resolveIssue($id)
    {
        try {
            $em = $this->getEntityManager();
            $dObj = $em->getRepository('UtilBundle:PharmacyPoDaily')->find($id);
            if( null == $dObj )
                return false;

            $dObj->setIssueStatus(true);
            $dObj->setUpdatedOn(new \DateTime());           
            $em->persist($dObj);
            $em->flush();

            return $this->getDailyForExclude($dObj->getId());
        } catch (Exception $e) {
            return false;
        }
    }

    /**
     * get supplier info
     * @author  vinh.nguyen
     */
    public function getSupplier($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("d.id,
                d.poDate,
                d.poNumber,
                d.sentOn,
                p.name as pharmacyName,
                p.pharmacyCode,
                p.emailAddress
            ")
            ->from('UtilBundle:PharmacyPoDaily', 'd')
            ->leftJoin('UtilBundle:Pharmacy', 'p', 'WITH', 'p.id = d.pharmacy')
            ->where("d.id=:id")
            ->setParameter("id", $id)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }
	
    public function getMatchedLines($line) 
	{
		$qb = $this->createQueryBuilder("p");
		$qb->where($qb->expr()->eq("p.customerReference", ":customerReference"))
			//->andWhere($qb->expr()->eq("p.amount", $line->getTransactionAmount()))
			->setParameter("customerReference", $line->getCustomerReference())
            ->addOrderBy('p.createdOn', "DESC");
			
		$list = $qb->select("p")->getQuery()->setMaxResults(1)->getOneOrNullResult();
		
		return $list;
	}

    public function listPharmacyPOByCriteria($criteria)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        if (isset($criteria['poWeeklyId'])) {
            $qb->select('w')
                ->from('UtilBundle:PharmacyPoWeekly', 'w')
                ->where('w.id=:id')
				->andWhere('w.status IN (0,3)')
                ->setParameter('id', $criteria['poWeeklyId']);
        } else {
            $poDailyId = isset($criteria['poDailyId']) ? $criteria['poDailyId'] : array();
            $qb->select('d')
                ->from('UtilBundle:PharmacyPoDaily', 'd')
                ->where('d.id IN (:poDailyId)')
                ->andWhere('d.isExcludePayment IS NOT NULL')
				->andWhere('d.status IN (0,3)')
                ->setParameter('poDailyId', $poDailyId, Connection::PARAM_STR_ARRAY);
				
			if (isset($criteria['hasInvoice']) && $criteria['hasInvoice']) {
				$qb->andWhere('d.invoiceUpload IS NOT NULL');
			}
			
			if (isset($criteria['issueStatus'])) {
				$qb->andWhere('d.issueStatus = ' . $criteria['issueStatus']);
			}
        }

        return $qb->getQuery()->getResult();
    }


    public function getListDoctorStatementLineForInstruction($id)
    {
        $queryBuilder = $this->createQueryBuilder('pw');
        $queryBuilder ->select('sum(d.includeGstAmount) as amount, iv.invoiceNumber as invoiceNumber, iv.receiveDate as receiveDate, pw.customerReference as customerReference')
            ->innerJoin('pw.dailies', 'd')
            ->innerJoin('pw.invoiceUpload', 'iv')
            ->where($queryBuilder->expr()->eq('pw.id',$id))
            ->andWhere($queryBuilder->expr()->isNull('d.isExcludePayment'))
            ->andWhere($queryBuilder->expr()->in('pw.status',[0,3]) )
            ->groupBy('pw.id');


        $result = $queryBuilder->getQuery()->getOneOrNullResult();

        return $result;
    }
    /*
    * author Bien
    * get list line exception for export UOB
    */
    public function getListDoctorStatementLineForInstructionException($ids)
    {
        if(empty($ids))
        {
            return [];
        }
        $queryBuilder = $this->createQueryBuilder('pw');
        $queryBuilder ->select('d.includeGstAmount as amount, iv.invoiceNumber as invoiceNumber, iv.receiveDate as receiveDate, d.customerReference as customerReference')
            ->innerJoin('pw.dailies', 'd')
            ->innerJoin('d.invoiceUpload', 'iv')
            ->where($queryBuilder->expr()->in('d.id',$ids))
            ->andWhere($queryBuilder->expr()->isNotNull('d.isExcludePayment'))
            ->andWhere($queryBuilder->expr()->in('d.status',[0,3]) )
            ->andWhere($queryBuilder->expr()->eq('d.issueStatus',1))
            ->andWhere($queryBuilder->expr()->gt('d.includeGstAmount',0))
            ->groupBy('d.id');


        $result = $queryBuilder->getQuery()->getResult();

        return $result;
    }




    /*
     * author bien
     * get po last week
     */
    public function getXeroWeeklyStatmentCheck($cycle){

        $queryBuilder = $this->createQueryBuilder('phw');
        $queryBuilder
            ->innerJoin('phw.invoiceUpload','iv')
            ->andWhere($queryBuilder->expr()->eq("phw.cycle", "'".$cycle."'"))
            ->getQuery();
        return $queryBuilder->getQuery()->getOneOrNullResult();

    }

    /**
     * @param PharmacyPoWeekly $wObj
     * @param $value
     * @return mixed
     */
    public function updateWeekExclude(PharmacyPoWeekly $wObj, $value)
    {
        if(empty($wObj))
            return;

        $wObj->setExceptionPoWeekly($value);
        $this->getEntityManager()->persist($wObj);
    }

    public function updateWeeklyPoList()
    {
        $em = $this->getEntityManager();

        $queryBuilder = $this->createQueryBuilder('cw')
            ->orderBy('cw.cycleToDate', 'asc');

        $list = $queryBuilder->getQuery()->getResult();
        foreach ($list as $value) {
            $daily = $value->getPoDaily();
            if (0 == count($daily)) {
                continue;
            }

            $totalAmount = $totalAmountPaid = $totalOutStandingAmount = $exceptionPoWeekly = 0;
            $isPaid = true;
            foreach ($daily as $item) {
                $amount = $item->getIncludeGstAmount();
                $totalAmount += $amount;

                $amountPaid = $item->getAmountPaid();
                $totalAmountPaid += $amountPaid;

                $outStandingAmount = $amount - $amountPaid;
                $item->setOutStandingAmount($outStandingAmount);

                if ($item->getIsExcludePayment()) {
                    $exceptionPoWeekly += $outStandingAmount;
                }

                $em->persist($item);

                if (1 != $item->getStatus()) {
                    $isPaid = false;
                }
            }

            $totalOutStandingAmount = $totalAmount - $totalAmountPaid;

            $value->setAmount($totalAmount);
            $value->setAmountPaid($totalAmountPaid);
            $value->setExceptionPoWeekly($exceptionPoWeekly);
            $value->setOutStandingAmount($totalOutStandingAmount);

            if ($isPaid) {
                $value->setStatus(1);
            }

            $em->persist($value);
        }

        $em->flush();
    }

    public function getAvailablePharmacyPoWeekly()
    {
        $lastWeek = new \DateTime();
        $lastWeek->modify("last week");

        $week  = $lastWeek->format("Y-m-d");
        $dates = Common::getWeek($week);

        //get daily items
        $dailyItems = $this->getEntityManager()->getRepository('UtilBundle:PharmacyPoDaily')->getPODailyBy($dates);

        return $dailyItems;
    }

}

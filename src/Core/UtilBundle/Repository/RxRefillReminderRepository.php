<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use \DateTime;
use UtilBundle\Utility\Constant;

/**
 * RxRefillReminderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RxRefillReminderRepository extends EntityRepository {

    /**
     * Update
     * @param type $params
     */
    public function update($params) {
        try {
            $rxRefillObj = null;
            if (isset($params['id'])) {
                $rxRefillObj = $this->findOneBy(array('id' => $params['id']));
            }
            if (isset($params['rxId'])) {
                $rxRefillObj = $this->findOneBy(array('rx' => $params['rxId']));
            }
            if (isset($params['hasBeenReminded'])) {
                $rxRefillObj->setHasBeenReminded($params['hasBeenReminded']);
            }
            if (isset($params['startOn'])) {
                $rxRefillObj->setStartOn($params['startOn']);
                $startOn = $params['startOn']->format('Y-m-d');
                $remindOn = $this->calRemindOn($startOn, $rxRefillObj->getRefillSupplyDuration());
                $rxRefillObj->setRemindOn($remindOn);
            }
            $em = $this->getEntityManager();
            $em->persist($rxRefillObj);
            $em->flush();
            return true;
        } catch (Exception $e) {
            return false;
        }
    }

    /**
     * Cal Remind On
     * @param type $startOn
     * @param type $refillSupplyDuration
     */
    public function calRemindOn($startOn, $refillSupplyDuration) {
        $platFormSetting = $this->getPlatFormSettings();
        $rxRefillDays = Constant::ZERO_NUMBER;
        if ($refillSupplyDuration <= Constant::REMINDER_30_DAYS) {
            $rxRefillDays = $platFormSetting['reminderRxRefill30'];
        } else {
            $rxRefillDays = $platFormSetting['reminderRxRefill60'];
        }
        list($year, $month, $day) = explode("-", $startOn);
        $refillDate = date('Y-m-d', mktime(0, 0, 0, $month, $day + $refillSupplyDuration - $rxRefillDays, $year));
        return new DateTime($refillDate);
    }

    /**
     * Get Plat Form Settings
     * @return type
     */
    public function getPlatFormSettings() {
        // Currency
        $platformSettings = $this->getEntityManager()
                ->getRepository('UtilBundle:PlatformSettings')
                ->getPlatFormSetting();
        return $platformSettings;
    }

    /**
     * Get Refills
     * @return type
     */
    public function getRefillArrayId() {
        $queryBuilder = $this->createQueryBuilder('r');
        $selectStr = "IDENTITY(r.rx) as rxId";
        $queryBuilder->select($selectStr);

        $result = $queryBuilder->getQuery()->getArrayResult();
        $arrayIds = [];
        foreach ($result as $obj) {
            $arrayIds[] = $obj['rxId'];
        }
        return $arrayIds;
    }

    /**
     * Return reminder patient
     * @return type
     * author luyen nguyen
     */
    public function getRxs() {
        $today = date("Y-m-d");
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('r as rx, f.startOn, f.refillSupplyDuration, f.id as refillReminderId')
                ->innerjoin('UtilBundle:Rx', 'r', 'WITH', 'r.id = f.rx')
                ->where('date(f.remindOn) = (:remindOn) AND f.hasBeenReminded is NULL')
                ->andWhere('r.paidOn IS NOT NULL')
                ->setParameter('remindOn', $today);
        $results = $queryBuilder->getQuery()->getResult();
        return $results;
    }
    
    /**
     * Find by rx Id
     * @param type $rxId
     * @return type
     */
    public function findByRxId ($rxId) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f')
                ->where('f.rx = (:rxId)')
                ->setParameter('rxId', $rxId);
        $result = $queryBuilder->getQuery()->getSingleResult();        
        return $result;
    }
}

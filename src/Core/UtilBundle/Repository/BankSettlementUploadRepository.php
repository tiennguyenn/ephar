<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BankSettlementUploadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BankSettlementUploadRepository extends EntityRepository {
	
    public function getBankPayments($request, $router) 
	{
        $search = $request->get('search', '');
        $limit = $request->get('length', 5);
        $sort = $request->get('sort', array());
        $page = $request->get('page', 1);

        $qb = $this->createQueryBuilder('bsu');
		if (!empty($search)) {
			try {
				$date = new \DateTime($search);
				$qb->andWhere($qb->expr()->gte("bsu.createdOn", "'" . $date->format("Y-m-d") . " 00:00:00'"))
					->andWhere($qb->expr()->lte("bsu.createdOn",  "'" . $date->format("Y-m-d") . " 23:59:59'"));
			} catch (\Exception $ex) {
				
			}
		}

        $total = $qb->select("COUNT(bsu.id)")
                ->getQuery()
                ->getSingleScalarResult();
		
		if (!empty($sort)) {
			foreach ($sort as $key => $value) {
				$qb->orderBy("bsu." . $key, $value);
			}
		}
		$qb->setMaxResults($limit)
			->setFirstResult(($page - 1) * $limit);	
			
        $list = $qb->select("bsu")->getQuery()->getResult();
        $data = array();
		foreach ($list as $item) {
			$data[] = array(
				'id' => $item->getId(),
				'timestamp' => $item->getCreatedOn()->format('d M Y, h:i A'),
				'uploaded_by' => $item->getUploadedBy(),
				'document_url' => "/" . $item->getDocumentUrl(),
				'detail_url' => $router->generate('bank_payment_detail', array('id' => $item->getId()))
			);
		}
		
        return array('data' => $data, 'total' => $total);
    }
    public function getLinesByBankSettlement($id,$request)
    {

        $search = $request->get('search', '');
        $filter = $request->get('filter', array());
        $limit = $request->get('length', 5);
        $sort = $request->get('sort', array());
        $page = $request->get('page', 1);

        $qb = $this->createQueryBuilder('bsu');
        $qb->innerJoin('bsu.accounts', 'bsa')
            ->innerJoin('bsa.lines','bsul' );

       $qb->where($qb->expr()->eq("bsu.id", $id));
        if (!empty($search)) {
            $qb->andWhere("bsul.customerReference LIKE :search")
                ->setParameter('search', '%'. $search .'%');
        }

        if (!empty($filter)) {
            if (isset($filter['min']) && is_numeric($filter['min'])) {
                $qb->andWhere($qb->expr()->gte("bsul.transactionAmount", $filter['min']));
            }
            if (isset($filter['max']) && is_numeric($filter['max'])) {
                $qb->andWhere($qb->expr()->lte("bsul.transactionAmount", $filter['max']));
            }
        }
        $qb->groupBy('bsul.id');


            if (!empty($sort)) {
                foreach ($sort as $key => $value) {

                     $qb->orderBy("bsul." . $key, $value);


                }
            }

        $qb->select('bsul.id as id ,  bsul.postDate as postDate, bsul.transactionAmount as transactionAmount, bsul.customerReference as customerReference ');
        $all = $qb->getQuery()->getResult();




        $qb->setMaxResults($limit)
            ->setFirstResult(($page - 1) * $limit);

            $list = $qb->getQuery()->getResult();

            foreach ($list as &$record) {
                $record['postDate'] = $record['postDate']->format('d-M-y');
            }
            return array('data' => $list, 'total' => count($all));



    }

}
<?php

namespace UtilBundle\Repository;

/**
 * FeeSettingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeeSettingRepository extends \Doctrine\ORM\EntityRepository {

    public function getUpdateFeesetting() {
        $query = $this->createQueryBuilder('a')
                ->orWhere('a.effectDate  lIKE :date ')
                ->setParameter('date', '%' . date("Y-m-d") . '%')
                ;
        return $query->getQuery()->getResult();
    }

    /**
     * get Fee seting by id
     * @author  thu.tranq
     * @return array
     */
    public function getFeeSettingById($id)
    {
        $qb = $this->createQueryBuilder('fs');
        $qb->select('fs.id',
            'fs.fee',
            'fs.newFee',
            'fs.effectDate'
            )
            ->where('fs.id = :id')
            ->setParameter('id', $id)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param string $paymentMethod
     * @param string $countryCode
     * @author Tien Nguyen
     */
    public function getFeeSetting($paymentMethod, $countryCode, $paymentGate = null)
    {
        $queryBuilder = $this->createQueryBuilder('f')
                ->select('f, p.code')
                ->innerJoin('UtilBundle:PaymentGatewayFee', 'p', 'WITH'
                        , 'p.feeSetting = f')
                ->innerJoin('UtilBundle:Country', 'c', 'WITH'
                        , 'c.id = p.country AND c.code = :countryCode')
                ->where('p.paymentMethod = :paymentMethod')
                ->setParameter('paymentMethod', $paymentMethod)
                ->setParameter('countryCode', $countryCode);

        if(!empty($paymentGate)) {
            $queryBuilder->andWhere('p.paymentGate = :paymentGate')
                ->setParameter('paymentGate', $paymentGate);
        } else {
            $queryBuilder->andWhere('p.paymentGate is NULL');
        }

        $arrayResult = array();
        $results = $queryBuilder->getQuery()->getResult();
        foreach ($results as $item) {
            $feeSetting = isset($item[0]) ? $item[0] : array();
            if (!$feeSetting) {
                continue;
            }

            $arrayResult[$item['code']] = $feeSetting->getFee();
        }

        return $arrayResult;
    }

    /**
     * @param string $code
     * @param string $paymentMethod
     * @param string $countryCode
     * @author Tien Nguyen
     */
    public function getFeeSettingByCode($code, $paymentMethod, $countryCode, $paymentGate = null)
    {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f')
                ->innerJoin('UtilBundle:PaymentGatewayFee', 'p', 'WITH', 'p.feeSetting = f')
                ->where('p.paymentMethod=:paymentMethod')
                ->andWhere('p.code=:code')
                ->andWhere('p.paymentGate= :paymentGate');
        if (!$paymentGate) {
            $paymentGate = \UtilBundle\Utility\Constant::PAYMENT_GATE_MOLPAY;
        }
        $queryBuilder->setParameter('code', $code)
                     ->setParameter('paymentMethod', $paymentMethod)
                     ->setParameter('paymentGate', $paymentGate);

        $item = $queryBuilder->getQuery()->getOneOrNullResult(1);


        if($item) {
            return $item->getFee();
        }

        return 0;
    }

}

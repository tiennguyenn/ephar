<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use UtilBundle\Entity\PaymentGatewaySettlement;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;

/**
 * PaymentGatewaySettlementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentGatewaySettlementRepository extends EntityRepository
{
    /**
     * create new
     * @param $params
     * @return null|object
     * @author vinh.nguyen
     */
    public function create($params)
    {
        $pgsObj = new PaymentGatewaySettlement();
        $pgsObj->setTransactionRef($params['transactionRef']);
        $pgsObj->setOrderNumber($params['orderNumber']);
        $pgsObj->setExpectedAmount($params['expectedAmount']);
        $pgsObj->setSettlementAmount($params['settlementAmount']);
        $pgsObj->setStatus($params['status']); //0: Non Updated, 1: Updated, 2: For Investigation

        if(isset($params['transactionGrossAmount']))
            $pgsObj->setTransactionGrossAmount($params['transactionGrossAmount']);
        
        if(isset($params['paymentMethod']))
            $pgsObj->setPaymentMethod($params['paymentMethod']);
            
        if(!empty($params['settlementDate']))
            $pgsObj->setSettlementDate($params['settlementDate']);

        if(!empty($params['transactionDate']))
            $pgsObj->setTransactionDate($params['transactionDate']);

        $pgsObj->setCreatedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($pgsObj);
        $em->flush();

        return $pgsObj->getId();
    }

    /**
     * PG settlement update
     * @param $params
     * @return array
     * @author vinh.nguyen
     */
    public function update($params)
    {
        $pgsObj = $this->findOneBy(array('id' => $params['id']));
        if( null == $pgsObj ) {
            $pgsObj = new PaymentGatewaySettlement();
            $pgsObj->setStatus(0); //0: Updated, 1: For Investigation
            $pgsObj->setOrderNumber($params['orderNumber']);
            $pgsObj->setCreatedOn(new \DateTime());
        }

        $pgsObj->setSettlementType($params['settlementType']); //0: Normal Settlement, 1: Bad debt - Doctor, 2: Bad debt - Gmeds
        $pgsObj->setSettlementAmountUpdated(str_replace(",","",$params['settlementAmount']));
        $pgsObj->setRemark($params['remark']);
        $pgsObj->setUpdatedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($pgsObj);
        $em->flush();

        return $this->getPGSDetailBy($params);
    }

    /**
     * daily collection settlement
    * @param $container
     * @return array
     * @author vinh.nguyen
     */
    public function dailyCollections($container)
    {
        $yesterday = new \DateTime('-1 day');
        $params = array(
            'startDate' => $yesterday->format("dmY000000"),//DDMMYYYYhhmmss
            'endDate'   => $yesterday->format("dmY235959"),
            'queryType' => 'O' //O,S
        );

        $apiSettlements =  $container->get('microservices.api')->getSettlementReport($params);
        $apiSettlements = Common::xml2Array($apiSettlements);

        $results = array();
        if($apiSettlements != null) {
            foreach ($apiSettlements['record'] as $record) {
                $pgsRow = array(
                    'transactionRef'   => $record['payref'],
                    'orderNumber'      => $record['merref'],
                    'expectedAmount'   => $record['originalamt'],
                    'settlementAmount' => $record['amt'],
                    'settlementDate'   => Common::st2date($record['settledate'], true),
                    'transactionDate'  => Common::st2date($record['authdate'], true),
                    'paymentMethod'    => $record['paymethod']
                );

                //0: Updated, 1: For Investigation
                $rxObj = $this->getEntityManager()->getRepository('UtilBundle:Rx')->getRxOrderValue($pgsRow['orderNumber']);
                $pgsRow['status'] = ($rxObj != null && $rxObj['orderValue'] == $record['originalamt'])? 1: 2;

                $results[] = $this->create($pgsRow);
            }
        }

        return $results;
    }

    /**
     * get PG settlement detail
     * @author  vinh.nguyen
     * @return array
     */
    public function getPGSDetailBy($params)
    {
        $today = $start = new \DateTime();
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("rx.orderNumber, d.doctorCode,
                (CASE
                    WHEN pi.lastName is not null and pi.lastName is not null
                        THEN CONCAT(pi.firstName, ' ' ,  pi.lastName)
                    WHEN pi.firstName is not null and pi.lastName is null
                        THEN pi.firstName
                    WHEN pi.firstName is null and pi.lastName is not null
                        THEN pi.lastName
                    ELSE ' '
                END) as name")
            ->addSelect("pgs.id,
                pgs.transactionRef,
                pgs.expectedAmount,
                pgs.settlementDate,
                pgs.transactionDate,
                pgs.settlementType,
                pgs.remark,
                pgs.paymentMethod,
                pgs.transactionGrossAmount,
                (case when pgs.expectedAmount is not null and pgs.settlementAmount is not null then (pgs.expectedAmount - pgs.settlementAmount) else pgs.expectedAmount end) as differenceAmount,
                (case when pgs.settlementAmountUpdated is null then pgs.settlementAmount else pgs.settlementAmountUpdated end) as settlementAmount,
                (case when pgs.status is null then 0 else pgs.status end) as status
               ")
            ->from('UtilBundle:Rx', 'rx')
            ->innerJoin('rx.doctor', 'd')
            ->innerJoin('d.personalInformation', 'pi')
            ->innerJoin('UtilBundle:PaymentGatewaySettlement', 'pgs', 'WITH', 'rx.orderNumber = pgs.orderNumber')
            ->andWhere('rx.paidOn < :today')
            ->andWhere("rx.orderNumber = :orderNumber")
            ->setParameter('today', $today->format("Y-m-d"))
            ->setParameter("orderNumber", $params['orderNumber'])
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * get list PG settlement
     * @param $params
     * @return array
     * @author vinh.nguyen
     */
    public function getListPGSettlement($params)
    {
        $today = $start = new \DateTime();
        if(!empty($params['start_date'])) {
            $start = new \DateTime($params['start_date']);
            $end = new \DateTime($params['end_date']);
        } else {
            $start = new \DateTime();
            $start = $start->modify("-1 month");
            $end = new \DateTime();
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("rx.orderNumber, d.doctorCode, rx.paidOn,
                (CASE
                    WHEN pi.lastName is not null and pi.lastName is not null
                        THEN CONCAT(pi.firstName, ' ' ,  pi.lastName)
                    WHEN pi.firstName is not null and pi.lastName is null
                        THEN pi.firstName
                    WHEN pi.firstName is null and pi.lastName is not null
                        THEN pi.lastName
                    ELSE ' '
                END) as name")
            ->addSelect("pgs.id,
                pgs.transactionRef,
                pgs.expectedAmount,
                pgs.settlementDate,
                pgs.transactionDate,
                pgs.settlementType,
                pgs.remark,
                pgs.paymentMethod,
                pgs.transactionGrossAmount,
                (case when pgs.expectedAmount is not null and pgs.settlementAmount is not null then (pgs.expectedAmount - pgs.settlementAmount) else pgs.expectedAmount end) as differenceAmount,
                (case when pgs.settlementAmountUpdated is null then pgs.settlementAmount else pgs.settlementAmountUpdated end) as settlementAmount,
                (case when pgs.status is null then 0 else pgs.status end) as status
               ")
            ->from('UtilBundle:Rx', 'rx')
            ->innerJoin('rx.doctor', 'd')
            ->innerJoin('d.personalInformation', 'pi')
            ->innerJoin('UtilBundle:PaymentGatewaySettlement', 'pgs', 'WITH', 'rx.orderNumber = pgs.orderNumber')
            ->andWhere('rx.paidOn < :today')
            ->andWhere('rx.paidOn >= :start AND rx.paidOn <= :end')
            ->setParameter('today', $today->format("Y-m-d"))
            ->setParameter('start', $start->format("Y-m-d"))
            ->setParameter('end', $end->format("Y-m-d"));
        ;

        //more conditions
        $this->moreConditions($qb, $params);

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }

    /**
     * more conditions
     * @param QueryBuilder $qb
     * @param $params
     * @author vinh.nguyen
     */
    private function moreConditions(QueryBuilder &$qb, $params)
    {
        //sorting
        if(isset($params['sorting']) && !empty($params['sorting'])){
            $fieldName = "";
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                switch($arrSort[0]):
                    case 'transactionRef':
                        $fieldName = 'pgs.transactionRef';
                        break;
                    case 'orderNumber':
                        $fieldName = 'rx.orderNumber';
                        break;
                    case 'expectedAmount':
                        $fieldName = 'pgs.expectedAmount';
                        break;
                    case 'settlementDate':
                        $fieldName = 'pgs.settlementDate';
                        break;
                    case 'settlementAmount':
                        $fieldName = 'pgs.settlementAmount';
                        break;
                    case 'status':
                        $fieldName = 'status';
                        break;
                    case 'transactionGrossAmount':
                        $fieldName = 'pgs.transactionGrossAmount';
                        break;
                    case 'differenceAmount':
                        $fieldName = 'differenceAmount';
                        break;
                endswitch;
                if(!empty($fieldName)) {
                    $qb->orderBy($fieldName, strtoupper($arrSort[1]));
                }
            }
        } else {
            $qb->orderBy('pgs.settlementDate', 'DESC');
        }

        //filter on: code, name
        if(isset($params['term']) && !empty($params['term'])) {
            $term = trim(strtolower($params['term']));
            $qb->andWhere('LOWER(rx.orderNumber) LIKE :term OR LOWER(pgs.transactionRef) LIKE :term')
                ->setParameter('term', '%'. $term .'%');
        }

        //filter on: status
        if(isset($params['status']) && $params['status'] != 'all') {
                $qb->andWhere('pgs.status = :status');
                $qb->setParameter("status", $params['status']);

        }
    }

    /**
     * suggestion search
     * @param $params
     * @return array
     * @author vinh.nguyen
     */
    public function suggestionSearch($term)
    {
        $today = $start = new \DateTime();
        $term = trim(strtolower($term));
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("rx.orderNumber, pgs.transactionRef")
            ->distinct()
            ->from('UtilBundle:Rx', 'rx')
            ->innerJoin('UtilBundle:PaymentGatewaySettlement', 'pgs', 'WITH', 'rx.orderNumber = pgs.orderNumber')
            ->andWhere('rx.paidOn < :today')
            ->andWhere('LOWER(rx.orderNumber) LIKE :term OR LOWER(pgs.transactionRef) LIKE :term')
            ->setParameter('today', $today->format("Y-m-d"))
            ->setParameter('term', '%'. $term .'%')
            ->setFirstResult(0)
            ->setMaxResults(5);
        $lists = $qb->getQuery()->getArrayResult();

        $results = array();
        $column = 'orderNumber';
        foreach($lists as $v){
            if($column == 'orderNumber' && strpos(strtolower($v['transactionRef']), $term) !== false)
                $column = 'transactionRef';
            $results[]['name'] = $v[$column];
        }

        return $results;
    }


   public function getSettlementForXeroDaily(){

        $queryBuilder = $this->createQueryBuilder('f');

        $queryBuilder->select('f.id, rx.id as rxId, f.orderNumber as orderNumber, f.settlementAmount as amount, f.settlementDate as settlementDate')
            ->innerJoin('UtilBundle:Rx','rx','WITH', 'rx.orderNumber = f.orderNumber')
            ->where('f.syncedOn  is null');

        $result = $queryBuilder->getQuery()->getArrayResult();
        return $result;
    }
}

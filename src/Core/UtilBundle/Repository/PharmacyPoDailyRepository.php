<?php

namespace UtilBundle\Repository;

use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use DoctrineExtensions\Query;
use UtilBundle\Entity\Pharmacy;
use UtilBundle\Entity\PharmacyPoDaily;
use UtilBundle\Entity\InvoiceUpload;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;

/**
 * PharmacyPoDailyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PharmacyPoDailyRepository extends EntityRepository
{
    /**
    * create new
    * @author vinh.nguyen
    */
    public function create($params)
    {
        $podObj = $this->findOneBy(array('poDate' => $params['poDate']));
        if($podObj == null)
            $podObj = new PharmacyPoDaily();

        $podObj->setPharmacy($params['pharmacy']);
        $podObj->setPoDate($params['poDate']);
        $podObj->setCycle($params['cycle']);
        $podObj->setPoNumber($params['poNumber']);
        $podObj->setTotalAmount($params['totalAmount']);
        $podObj->setExcludeGstAmount($params['excludeGstAmount']);
        $podObj->setIncludeGstAmount($params['includeGstAmount']);
        $podObj->setGstAmount($params['gstAmount']);
        $podObj->setCustomerReference($params['customerReference']);
        $podObj->setCreatedOn(new \DateTime());

        $amountPaid = $outStandingAmount = 0.00;
        $podObj->setAmountPaid($amountPaid);

        $em = $this->getEntityManager();
        $em->persist($podObj);
        $em->flush();

        return $podObj;
    }

    /**
     * update
     * @author vinh.nguyen
     */
    public function update($params)
    {
        $podObj = $this->findOneBy(array('id' => $params['id']));
        if( null == $podObj )
            return null;

        $podObj->setPoWeekly($params['poWeekly']);

        $em = $this->getEntityManager();
        $em->persist($podObj);
        $em->flush();

        return $podObj->getId();
    }

    /**
     * get RX
     * @author vinh.nguyen
     */
    public function getRxBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("rx.id, 
                rx.orderPhysicalNumber,
                rx.orderValue, 
                rx.status, 
                rl.name,
                rl.id as rxLineId,
                dr.costPrice,
                rl.quantity,
                gst.code as gstCode,
                dr.sku,
                dt.name as drugType,
                rx.updatedOn,
                pl.id as dailyLineId
            ")
            ->from('UtilBundle:PharmacyPoDailyLine', 'pl')
            ->innerJoin('pl.rx', 'rx')
            ->innerJoin('UtilBundle:RxLine', 'rl', 'WITH', 'rl.rx = rx.id')
            ->innerJoin('rl.drug', 'dr')
            ->leftJoin('dr.gstCode', 'gst')
            ->leftJoin('dr.class', 'dt')
            ->andWhere('date(pl.createdOn) = :start')
            ->setParameter('start', $params['start']->format("Y-m-d"))
            ->orderBy('rx.orderPhysicalNumber', 'ASC')
            ->orderBy('pl.createdOn', 'ASC')
            ;

        return $qb->getQuery()->getArrayResult();
    }

    public function getTrackingNumberByRx($rxLineId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("box.trackingNumber")
            ->from('UtilBundle:Box', 'box')
            ->innerJoin('UtilBundle:RxDrugBatchBox', 'rdb', 'WITH', 'rdb.box = box')
            ->innerJoin('rdb.rxDrugBatch', 'rb')
            ->where('rb.rxLine = :rxLine')
            ->setParameter('rxLine', $rxLineId)
            ->setMaxResults(1);

        $result = $qb->getQuery()->getOneOrNullResult();
        if ($result) {
            return $result['trackingNumber'];
        }

        return '';
    }

    /**
     * get list for PDF
     * @author  vinh.nguyen
     */
    public function getListBy($dailyLineId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("rx.id, rx.orderPhysicalNumber, rx.status")
            ->addSelect("rl.name, dr.costPrice, rl.originPrice, rl.quantity, (rl.originPrice * rl.quantity) as lineTotal")
            ->addSelect("dr.sku, dt.name as drugType, gst.code as gstCode")
            ->from('UtilBundle:PharmacyPoDailyLine', 'pol')
            ->innerJoin('pol.rx', 'rx')
            ->leftJoin('UtilBundle:RxLine', 'rl', 'WITH', 'rl.rx = rx.id')
            ->leftJoin('rl.drug', 'dr')
            ->leftJoin('dr.gstCode', 'gst')
            ->leftJoin('dr.class', 'dt')
            ->andWhere('pol.id IN(:dailyLineId)')
            ->setParameter("dailyLineId", $dailyLineId)
        ;

        $results = $qb->getQuery()->getArrayResult();

        return $results;
    }

    /**
     * get list PO daily in week
     * @author vinh.nguyen
     */
    public function getPODailyBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("pod.id,
                pod.poDate,
                pod.cycle,
                pod.poNumber,
                pod.totalAmount,
                pod.excludeGstAmount,
                pod.gstAmount,
                pod.includeGstAmount
            ")
            ->from('UtilBundle:PharmacyPoDaily', 'pod')
            ->andWhere('pod.poDate >= :start AND pod.poDate <= :end')
            ->setParameter('start', $params['start']->format("Y-m-d"))
            ->setParameter('end', $params['end']->format("Y-m-d H:i:s"));

        return $qb->getQuery()->getArrayResult();
    }
    
    /**
    * get Daily PO Running Number
    */
    public function getPORunningNumber($poDate)
    {
        $number = 1;
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("pod.poNumber")
            ->from('UtilBundle:PharmacyPoDaily', 'pod')
            ->andWhere('MONTH(pod.poDate) = :month and YEAR(pod.poDate) = :year')
            ->setParameter('month', $poDate->format("m"))
            ->setParameter('year', $poDate->format("Y"))
            ->orderBy('pod.createdOn', 'DESC')
            ->orderBy('pod.id', 'DESC')
            ->setMaxResults(1);

        $poNumber = $qb->getQuery()->getOneOrNullResult();

        if($poNumber != null) {
            $arrNumber = explode('/', $poNumber['poNumber']);
            $number = (int) end($arrNumber) + 1;
        }
        return $number;
    }

    /**
     * get Excluded PO
     * @author  vinh.nguyen
     */
    public function getExcludedPO($weeklyId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("d.id")
            ->from('UtilBundle:PharmacyPoDaily', 'd')
            ->where("d.isExcludePayment is not null AND d.poWeekly = :poWeekly")
            ->setParameter('poWeekly', $weeklyId)
            ;

        $result = $qb->getQuery()->getArrayResult();

        return count($result);
    }
	
    public function getDetailBy($params)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->select("d.id, 
                d.poNumber,
                d.cycle,
				d.poDate,
				d.totalAmount,
				d.excludeGstAmount,
				d.includeGstAmount,
				d.gstAmount,
				d.isExcludePayment,
				d.excludedOn,
				d.excludedBy,
				d.excludePaymentNote,
				d.issueStatus,
                d.status, 
                d.filename,
				d.timesSent,
				d.sentOn,
                d.createdOn,
                d.updatedOn,
                d.outStandingAmount,
                p.name, 
                p.gstNo,
                p.isGst,
                ".Constant::USER_TYPE_PHARMACY." as userType,
                iu.id as iuId,
                iu.invoiceNumber,
                iu.invoiceAmount,
                iu.gst,
                iu.invoiceTotalAmount,
                iu.documentUrl,
                iu.createdOn as iuCreatedOn,
                iu.receiveDate
            ")
            ->leftJoin('d.invoiceUpload', 'iu')
            ->leftJoin('UtilBundle:Pharmacy', 'p', 'WITH', 'p.id = d.pharmacy')
            ->where("d.id = :dailyId")
            ->setParameter("dailyId", $params['id'])
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }
	
    /**
     * update InvoiceUpload & Daily
     * @author tuan.nguyen
     */
    public function updateDailyUI($params)
    {
        try {
            $wObj = $this->find($params['id']);
            if( null == $wObj )
                return false;

            // Invoice Upload
            $em = $this->getEntityManager();
            if($wObj->getInvoiceUpload() != null) {            
				$params['documentUrl'] = empty($params['documentUrl']) ? $wObj->getInvoiceUpload()->getDocumentUrl() : $params['documentUrl'];
                $invoiceUpload = $em->getRepository('UtilBundle:InvoiceUpload')->find($wObj->getInvoiceUpload()->getId());
            } else {
                $invoiceUpload = new InvoiceUpload();
            }
            $invoiceUpload->setInvoiceNumber($params['invoiceNumber']);
            $invoiceUpload->setReceiveDate($params['invoiceReceiveDate']);
            $invoiceUpload->setInvoiceAmount($params['invoiceAmount']);
            $invoiceUpload->setGst($params['gst']);
            $invoiceUpload->setInvoiceTotalAmount($params['invoiceTotalAmount']);
            $invoiceUpload->setDocumentUrl($params['documentUrl']);
            $invoiceUpload->setUpdatedBy($params['updatedBy']);            
            if($wObj->getInvoiceUpload() == null) {
                $invoiceUpload->setCreatedOn(new \DateTime());
            }
            $wObj->setInvoiceUpload($invoiceUpload);

            $em->persist($invoiceUpload);
            $em->persist($wObj);
            $em->flush();

            return $this->getDetailBy($params);
        } catch (Exception $e) {
            return false;
        }
    }

    /*
     * get matching line
     * author :bien
     */

    public  function getMatchedLines($line)
    {
        $qb = $this->createQueryBuilder("c");
        $qb->where($qb->expr()->eq("c.customerReference", ":customerReference"))
            ->setParameter("customerReference", $line->getCustomerReference())
            ->addOrderBy('c.createdOn', "DESC");
        $line = $qb->select("c")->getQuery()->setMaxResults(1)->getOneOrNullResult();

        return $line;
    }
}

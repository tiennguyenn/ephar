<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * XeroAccountCodeMappingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class XeroMappingRepository extends EntityRepository {
	
    public function getList($request) 
	{
        $search = strtolower( $request->get('search', ''));
		$filter = $request->get('filter', 0);
		$event = $request->get('event', 0);
        $sort = $request->get('sort', array());
		$limit = 10;
        $page = $request->get('page', 1);

        $qb = $this->createQueryBuilder('xm')
            ->innerJoin("xm.xeroComponent", "xc")
			->innerJoin("xc.xeroEventTrigger", "xet")
            ->innerJoin("xm.xeroDocumentType", "xdt")
            ->leftJoin("xm.debitAccountCode", "dc")
            ->leftJoin("xm.creditAccountCode", "cc")
            ->where("xm.deletedOn IS NULL");


        $qb->andWhere($qb->expr()->neq("(xc.name)", "''"));
		if (!empty($search)) {
			$qb->andWhere($qb->expr()->like("LOWER(xc.name)", ":description"))
				->setParameter("description", "%$search%");
		}

		if (!empty($filter) && in_array($filter, [1,9]) ) {
			$qb->andWhere($qb->expr()->eq("xm.orderDestination", ":location"))
				->setParameter("location", $filter);
		}
		
		if ($event) {
			$qb->andWhere($qb->expr()->eq("xet.id", ":event"))
				->setParameter("event", $event);
		}
		
        $total = $qb->select("COUNT(xm.id)")
                ->getQuery()
                ->getSingleScalarResult();
		
		if (!empty($sort)) {
			foreach ($sort as $key => $value) {
				if ($key == 'documentType') {
					$qb->orderBy("xdt.friendlyName", $value);
				} elseif ($key == 'description') {
					$qb->orderBy("xc.name", $value);
				} elseif ($key == 'debitCode') {
					$qb->orderBy("dc.code", $value);
				} elseif($key == 'creditCode'){
                    $qb->orderBy("cc.code", $value);
                }
			}
		} else{
            $qb->orderBy("xm.id", 'DESC');
        }
		
		$qb->setMaxResults($limit)
			->setFirstResult(($page - 1) * $limit);	
			
        $list = $qb->select("xm")->getQuery()->getResult();
        $data = array();
		foreach ($list as $item) {
			$data[] = array(
				'id' => $item->getId(),
				'description' => $item->getXeroComponent()->getName(),
				'document_type' => $item->getXeroDocumentType()->getFriendlyName(),
                'document_id' => $item->getXeroDocumentType()->getId(),
				'debit_code' => $item->getDebitAccountCode()->getCode(),
				'credit_code' => $item->getCreditAccountCode()->getCode(),
				'event_id' => $item->getXeroComponent()->getXeroEventTrigger()->getId(),
				'event_name' => $item->getXeroComponent()->getXeroEventTrigger()->getName(),
				'description_id' => $item->getXeroComponent()->getId(),
				'debit_id' => $item->getDebitAccountCode()->getId(),
				'credit_id' => $item->getCreditAccountCode()->getId(),
                'debit_code' => $item->getDebitAccountCode()->getCode(),
                'credit_code' => $item->getCreditAccountCode()->getCode(),
				'location' => $item->getOrderDestination(),
                'naration' => $item->getNarration(),
			);
		}
		
        return array('data' => $data, 'total' => $total);
    }

    public function getSetlementMapping($destination){
        $qb = $this->createQueryBuilder('xm');

        $qb->innerJoin("xm.xeroComponent", "xc")
            ->innerJoin("xc.xeroEventTrigger", "xet")
            ->where($qb->expr()->eq("xet.name", "'Settlement Date by Payment Gateway'"))
            ->andWhere($qb->expr()->eq("xm.orderDestination", $destination))
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
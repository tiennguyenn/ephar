<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Constant;

/**
 * CourierRateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourierRateRepository extends EntityRepository {

    /**
     * Shipping price
     * @param type $countryId
     * @return type
     */
    public function getShippingPrice($countryId) {
        $queryBulider = $this->createQueryBuilder('f');
        $queryBulider->select('f')
                ->where('f.destinationCountry = (:countryId)')
                ->setParameter('countryId', $countryId);
        $result = $queryBulider->getQuery()->getResult();
        // Get world
        if (count($result) == 0) {
            $queryBulider = $this->createQueryBuilder('f');
            $queryBulider->select('f')
                    ->where('f.destinationCountry IS NULL');
            $result = $queryBulider->getQuery()->getResult();
        }
        return $result;
    }

    /*
     * get all courier_rate that need to update rate
     * edit by bien
     */
    public function updateCourierRate(){
         $query = $this->createQueryBuilder('a')  
                ->orWhere('date(a.costEffectDate) = :cost')
                ->setParameter('cost', date("Y-m-d") )
                ->orWhere('date(a.igPermitListEffectDate) = :ig')
                ->setParameter('ig', date("Y-m-d"))
                ->orWhere('date(a.listEffectDate) = :list ')
                ->setParameter('list', date("Y-m-d"))
                ->orWhere('date(a.collectionRateEffectDate) = :collectFee ')
                ->setParameter('collectFee',date("Y-m-d"));
        return $query->getQuery()->getResult();
    }

    public function getIgPermitFeeByCountry($countryId, $rx) {
        $queryBulider = $this->createQueryBuilder('f');
        $queryBulider->select('f')
                ->where('f.destinationCountry = (:countryId)')
                ->setParameter('countryId', $countryId);
        $result = $queryBulider->getQuery()->getResult();

        $isColdChain = $rx->isColdChain();

        foreach ($result as $value) {
            $type = $value->getType();
            if ($isColdChain && $type) {
                return $value->getIgPermitFee();
            }
        }

        return $value->getIgPermitFee();
    }

    /**
     * get list shipping fees
     * @author  vinh.nguyen
     */
    public function getShippingFees($params)
    {
        $qb = $this->createQueryBuilder('d');

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                if($arrSort[0] == 'code') {
                    $qb->orderBy('gst.'.$arrSort[0], strtoupper($arrSort[1]));
                } else {
                    $qb->orderBy('d.'.$arrSort[0], strtoupper($arrSort[1]));
                }
            }
        }

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }

    public function isMYE($postalCode)
    {
        $courierRate = $this->findOneByCourierRateCode('MYE');
        if (empty($courierRate)) {
            return null;
        }

        $country = $courierRate->getDestinationCountry();
        if (Constant::ID_MALAYSIA != $country->getId()) {
            return null;
        }

        if ($postalCode >= $courierRate->getFromPostcode() &&
            $postalCode <= $courierRate->getToPostcode()) {
            return $courierRate;
        }

        return null;
    }
}

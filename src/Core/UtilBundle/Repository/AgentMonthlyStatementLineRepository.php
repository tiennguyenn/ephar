<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Constant;
/**
 * AgentMonthlyStatementLineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgentMonthlyStatementLineRepository extends EntityRepository 
{
    public function getMatchedLines($line) 
	{
		$qb = $this->createQueryBuilder("l");
		$qb->innerJoin("UtilBundle:AgentMonthlyStatement", "a", "WITH", "l.agentMonthlyStatement = a.id");
		$qb->where($qb->expr()->eq("l.customerReference", ":customerReference"))
			->setParameter("customerReference", trim($line->getCustomerReference()))
            ->addOrderBy('l.createdOn', "DESC");
			
		$list = $qb->select("l")->getQuery()->setMaxResults(1)->getOneOrNullResult();
		
		return $list;
	}

	/**
	 * getPaymentStatus for agent
	 * @param  integer $agentId
	 * @param  integer $month
	 * @param  integer $year
	 * @return string
	 */
	public function getPaymentStatus($agentId, $month, $year) {
		$qb = $this->createQueryBuilder("al");
		$qb->select("al.status")
			->innerJoin("UtilBundle:AgentMonthlyStatement", "a", "WITH", "al.agentMonthlyStatement = a.id")
		    ->where("al.agent = :agentId")
			->andWhere("a.month = :month")
			->andWhere("a.year = :year")
			->setParameter("agentId", $agentId)
			->setParameter("month", $month)
			->setParameter("year", $year);
		$data = $qb->getQuery()->getOneOrNullResult();

		if (!empty($data)) {
			return Constant::PAYMENT_STATUS[$data['status']];
		}

		return 'Pending';
	}


    /**
     * get statement line data by month year
     * @param   $agentId
     * @param  integer $month
     * @param  integer $year
     * @return object
     */
    public function getStatementLine($agentId, $month, $year) {
        $qb = $this->createQueryBuilder("amsl");
        
        $qb->innerJoin("UtilBundle:AgentMonthlyStatement", "ams", "WITH", "amsl.agentMonthlyStatement = ams.id")
            ->where("amsl.agent = :agentId")
            ->andWhere("ams.month = :month")
            ->andWhere("ams.year = :year")
            ->setParameter("agentId", $agentId)
            ->setParameter("month", $month)
            ->setParameter("year", $year);

        $data = $qb->getQuery()->getOneOrNullResult();

        return $data;
    }

     /**
     * calculate totalAmount for agent_monthly_statement_line
     * @param   $params is the params passed when cron for generate statement date be called
     * @relatedTicket: #658
     * @return float
     */
    public function getPreMonthsStatementInfo($params, $onlyTotalAmount = false){
        $preTotalAmount = 0; // total amount of last month of $currentMonth
        $date = new \DateTime( $params['year'] . '-' . $params['month']  );
        $date->modify('-1 month');
        $month          = (int)$date->format('m');
        $year           = $date->format('Y');
        $dateTimeStr = $date->format('Y-m-d');

        // get balance from pre months
        $queryBuilder = $this->createQueryBuilder('amsl');
        $queryBuilder->innerJoin("amsl.agentMonthlyStatement", 'ams')
                     ->andWhere("(
                        STR_TO_DATE(CONCAT(ams.year,'-', ams.month, '-01'),  '%Y-%m-%d') < '{$dateTimeStr}' 
                        and (amsl.amountPaid IS NOT NULL
                        and amsl.amountPaid <> 0) 
                        and amsl.agent = {$params['agentId']} 
                        and MONTH(amsl.postDate) = {$params['month']} 
                        and YEAR(amsl.postDate) = {$params['year']} 
                    )")
                     ->orWhere("(
                                STR_TO_DATE(CONCAT(ams.year,'-', ams.month, '-01'),  '%Y-%m-%d') = '{$dateTimeStr}' 
                                and amsl.agent = {$params['agentId']} 
                            )")
                     ->addOrderBy('ams.year', 'desc')
                     ->addOrderBy('ams.month', 'desc');

         $result = $queryBuilder->getQuery()->getResult();



         // cal totalAmount
         if (!empty($result)) {
            foreach ($result as $key => $value) {
                $month = $value->getAgentMonthlyStatement()->getMonth();
                $year = $value->getAgentMonthlyStatement()->getYear();
                if ($month == (int)$date->format('m') && $year == (int)$date->format('Y')) {
                    $preTotalAmount = $value->getTotalAmount();
                }
                $preTotalAmount -= $value->getAmountPaid(); // find balance of last month

            }
         }

         if ($onlyTotalAmount) {
            $totalAmount = $params['monthlyFee']; // total amount of the month that recieved payment, called $currentMonth
             return $totalAmount + $preTotalAmount;
         }

         return array('data' => $result, 'balance' => $preTotalAmount);
    }

    public function listStatementForAgent($params)
    {
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
        $startRecord = $perPage*$page;

        $selectStr = 'msl.id,
            ms.month,
            ms.year,                                    
            msl.patientFee,
            msl.status,
            msl.agentMonthlyFee,
            msl.postDate,
			msl.filename
			';        
        
        $queryBuilder = $this->createQueryBuilder('msl')
            ->select($selectStr)
            ->innerJoin('UtilBundle:AgentMonthlyStatement', 'ms', 'WITH', 'msl.agentMonthlyStatement = ms.id');

        if (!empty($params['monthYear'])) {
            $date = date_create_from_format('M Y', $params['monthYear']);
            $month = $date->format('m');
            $year = $date->format('Y');

            $queryBuilder->andWhere('ms.year=:year');
            $queryBuilder->andWhere('ms.month=:month');
            $queryBuilder->setParameter('year', $year);
            $queryBuilder->setParameter('month', $month);
        }                

        if(!empty($params['agent'])){ 
            $queryBuilder->andWhere('msl.agentMonthlyFee > 0');
            $queryBuilder->andWhere('msl.agent =:agent');
            $queryBuilder->setParameter('agent', $params['agent']);
        }

        //filter by date
        if(isset($params['from_date']) && isset($params['to_date']) && !empty($params['from_date']) && !empty($params['to_date'])){
            $startDate = new \DateTime($params['from_date']);
            $startDate->modify('first day of this month');

            $endDate = new \DateTime($params['to_date']);
            $endDate->modify('last day of this month');            

        } elseif (isset($params['from_date']) && !empty($params['from_date'])){
            $startDate = new \DateTime($params['from_date']);
            $startDate->modify('first day of this month');            

            $endDate = new \DateTime();
            $endDate->modify('last day of previous month');            

        } elseif (isset($params['to_date']) && !empty($params['to_date'])){

            $startDate = new \DateTime();
            $startDate->modify('first day of Jan');        

            $endDate = new \DateTime($params['to_date']);
            $endDate->modify('last day of this month');                       
        }

        if(isset($startDate) && isset($endDate)){

            $queryBuilder->andWhere("DATE(CONCAT(ms.year, '-', ms.month, '-01')) <= :end AND DATE(CONCAT(ms.year, '-', ms.month, '-01')) >= :start")
                         ->setParameter('start', $startDate->format("Y-m-d H:i:s"))
                         ->setParameter('end', $endDate->format("Y-m-d H:i:s"));             
        }        

        $sort  = 'ms.year';
        $order = 'desc';
        //dump($params); die;
        if (!empty($params['sorting'])) {
            list($sort, $order) = explode('-', $params['sorting']);
            $queryBuilder->orderBy($sort, $order);
            if ('ms.year' == $sort) {
                $queryBuilder->addOrderBy('ms.month', $order);
            }
        } else {
            $queryBuilder->orderBy($sort, $order);
            $queryBuilder->addOrderBy('ms.month', $order);
        }

        $query = $queryBuilder->getQuery();

        $totalResult = count($queryBuilder->getQuery()->getArrayResult());

        $queryBuilder->setFirstResult($startRecord);
        $queryBuilder->setMaxResults($perPage);
        //$paginator = new Paginator($query, false);

        $result = array(
            'sort'  => $sort,
            'order' => $order,
            'data'  => $queryBuilder->getQuery()->getArrayResult(),
            'totalResult' => $totalResult
        );

        return $result;
    }
}
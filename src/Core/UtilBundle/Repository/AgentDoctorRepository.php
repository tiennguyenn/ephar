<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Constant;
use UtilBundle\Entity\AgentDoctor;
use UtilBundle\Utility\MsgUtils;
/**
 * AgentDoctorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgentDoctorRepository extends EntityRepository
{
    /**
     * get list doctor by agent id
     * @param $params
     * @return array
     * @author toan.le
     */
    public function getDoctorsListByAgent($params, $subAgentIds = array(),$isSubAgent, $getAll = false)
    {
        $results = [];
        try{
            $queryBuilder = $this->createQueryBuilder('f')
                                ->select("d.id, 
                                        d.doctorCode,
                                        pid.title,
                                        d.createdOn, 
                                        pid.emailAddress, 
                                        p.number as phone,
                                        p.areaCode,
                                        c.phoneCode,
                                        count(distinct pa) as totalPatient,
                                        ifelse(pid.firstName is null, pid.lastName, CONCAT(pid.firstName, ' ', pid.lastName)) AS fullName,
                                        a.agentCode,
                                        ifelse(pia.firstName is null, pia.lastName, CONCAT(pia.firstName, ' ', pia.lastName)) AS agentName")
                                ->innerJoin('f.doctor', 'd')
                                ->innerJoin('d.personalInformation', 'pid')
                                ->innerJoin('f.agent', 'a')
                                ->innerJoin('a.personalInformation', 'pia')
                                ->leftJoin('UtilBundle\Entity\Patient', 'pa', 'WITH', 'pa.doctor = d.id')
                                ->leftJoin('UtilBundle\Entity\DoctorPhone', 'dp', 'WITH', 'dp.doctor = d.id')
                                ->leftJoin('dp.contact', 'p')
                                ->leftJoin('p.country', 'c')
                                ->where('f.agent = :id OR f.agent IN (:ids)')
                                ->andWhere('d.deletedOn is null')
                                ->groupBy('d.id')
                                ->setParameter('ids', $subAgentIds)
                                ->setParameter('id', $params['id']);
            // if($isSubAgent){
                $queryBuilder->andWhere('f.deletedOn is null');
            // }
            //filter on: code, name
            if(isset($params['term']) && !empty($params['term'])) {
                $term = trim(strtolower($params['term']));

                $searchIn = $queryBuilder->expr()->like(
                                $queryBuilder->expr()->concat('pid.firstName', $queryBuilder->expr()->concat($queryBuilder->expr()->literal(' '), 'pid.lastName')),
                                $queryBuilder->expr()->literal( '%' . $term . '%')
                            );

                $queryBuilder   
                    ->andWhere($searchIn ." OR LOWER(d.doctorCode) LIKE :term")
                    ->setParameter('term', '%' . $term . '%');
            }
            $totalResult = count($queryBuilder->getQuery()->getArrayResult());
            $results['totalResult'] = $totalResult;
            $perPage = isset($params['perPage']) && ($params['perPage'] > 0)? $params['perPage']: 1;
            $page = isset($params['page']) && ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
            $startRecord = $perPage*$page;
            //get page
            if(!$getAll){

                $queryBuilder
                    ->setFirstResult($startRecord)
                    ->setMaxResults($perPage);

            }
            $results['totalPages'] = ceil($results['totalResult']/$perPage);

            //filter by date
            if(isset($params['from_date']) && !empty($params['from_date'])){
                $startDate = new \DateTime($params['from_date']);
                $endDate = new \DateTime($params['to_date']);
                $endDate->modify('tomorrow');
                $endDate->modify('1 second ago');
                $queryBuilder
                    ->andWhere('d.createdOn <= :end AND d.createdOn >= :start')
                    ->setParameter('start', $startDate->format("Y-m-d H:i:s"))
                    ->setParameter('end', $endDate->format("Y-m-d H:i:s"));
            }

            //sorting
            if(isset($params['sorting']) && !empty($params['sorting'])){
                $arrSort= explode("_", $params['sorting']);
                if(isset($arrSort[0]) && isset($arrSort[1])){
                    if($arrSort[0] == 'emailAddress' ){
                        $queryBuilder->orderBy('pid.'.$arrSort[0], strtoupper($arrSort[1]));
                    }elseif($arrSort[0] == 'createdOn' || $arrSort[0] == 'doctorCode'){
                        $queryBuilder->orderBy('d.'.$arrSort[0], strtoupper($arrSort[1]));
                    }elseif($arrSort[0] == 'phoneCode'){
                        $queryBuilder->orderBy('c.phoneCode', strtoupper($arrSort[1]));
                    }elseif($arrSort[0] == 'fullName' || $arrSort[0] == 'totalPatient' || $arrSort[0] == 'agentName'){
                        $queryBuilder->orderBy($arrSort[0], strtoupper($arrSort[1]));
                    }
                }
            }
            
            $resultQuery =  $queryBuilder->getQuery()->getArrayResult();

            $results['success'] = true;
            $results['data'] = $resultQuery;
            if(null == $resultQuery) {
                $results['message'] = MsgUtils::generate('msgNoData');
            } else {
                $results['message'] = null;
            }
        }catch(Exception $ex){
            $results['message'] = $ex->getMessage();
            $results['success'] = false;
        }

        return $results;
    }
    
    /**
     * get total sales by agent id
     * @param $params
     * @return array
     * @author toan.le
     */
    public function getTotalSalesByAgent($id, $subAgentIds = array(),$isSubAgent)
    {
        $results = [];
        try{
            $queryBuilder = $this->createQueryBuilder('f')
                                ->select("(ifelse(rx.agentMedicineFee IS NOT NULL, rx.agentMedicineFee, 0) + ifelse(rx.agentServiceFee IS NOT NULL, rx.agentServiceFee, 0) AS agentFee, ifelse(rx.agent3paMedicineFee IS NOT NULL, rx.agent3paMedicineFee, 0) + ifelse(rx.agent3paServiceFee IS NOT NULL, rx.agent3paServiceFee, 0) as secondaryAgentFee, agent.id as agentId, secondaryAgent.id as secondaryAgentId, rx.id")
                                ->innerJoin('f.doctor', 'd')
                                ->innerJoin('UtilBundle:Rx', 'rx', 'WITH', 'rx.doctor = d.id')
                                ->leftJoin('rx.agent', 'agent')
                                ->leftJoin('rx.secondaryAgent', 'secondaryAgent')
                                ->where('f.agent = :id OR f.agent IN (:ids) OR secondaryAgent.id IN (:agentIds)')
                                ->andWhere('d.deletedOn is null')
                                ->andWhere('rx.paidOn is not null')
                                ->andWhere('rx.status != :failStatus')
                                ->andWhere('rx.status != :deadStatus')
                                ->andWhere('rx.status != :pfailStatus')
                                ->andWhere('rx.deletedOn is null')
                                ->setParameter('ids', $subAgentIds)
                                ->setParameter('id', $id)
                                ->setParameter('agentIds', array_merge([$id], $subAgentIds))
                                ->setParameter('failStatus', Constant::RX_STATUS_FAILED)
                                ->setParameter('deadStatus', Constant::RX_STATUS_DEAD)
                                ->setParameter('pfailStatus', Constant::RX_STATUS_PAYMENT_FAILED);
            // if($isSubAgent){
                $queryBuilder->andWhere('f.deletedOn is null');
            // }
            $queryBuilder->groupBy("rx.id");
            $resultQuery =  $queryBuilder->getQuery()->getResult();
            $total = 0;
            $agentIds = array_merge([$id], $subAgentIds);
            foreach ($resultQuery as $value) {
                if (in_array($value['secondaryAgentId'], $agentIds)) {
                    $total += $value['secondaryAgentFee'];
                } else {
                    $total += $value['agentFee'];
                }
            }
            $totalResult = count($resultQuery);
            $results['success'] = true;
            $results['totalResult'] = $totalResult;
            $results['data'] = $total;
            if(null == $resultQuery) {
                $results['message'] = MsgUtils::generate('msgNoData');
            } else {
                $results['message'] = null;
            }
        }catch(Exception $ex){
            $results['message'] = $ex->getMessage();
            $results['success'] = false;
        }
        return $results;
    }

    /**
     * get suggestion search
     * @param $params
     * @return array
     * @author toan.le
     */
    public function getSuggestionSearch($params, $subAgentIds = array(),$isSubAgent)
    {
        $results = [];
        try{
            $queryBuilder = $this->createQueryBuilder('f')
                                ->select("
                                        ifelse(pi.firstName is null, pi.lastName, CONCAT(pi.firstName, ' ', pi.lastName)) AS fullName,
                                        d.doctorCode")
                                ->innerJoin('f.doctor', 'd')
                                ->innerJoin('d.personalInformation', 'pi')
                                ->where('f.agent = :id OR f.agent IN (:ids)')
                                ->andWhere('d.deletedOn is null')
                                ->andWhere('f.deletedOn is null')
                                ->setParameter('ids', $subAgentIds)
                                ->setParameter('id', $params['id']);
            // if($isSubAgent){
                $queryBuilder->andWhere('f.deletedOn is null');
            // }
            //filter on: code, name
            if(isset($params['term']) && !empty($params['term'])) {
                $term = trim(strtolower($params['term']));
                $searchIn = $queryBuilder->expr()->like(
                                $queryBuilder->expr()->concat('pi.firstName', $queryBuilder->expr()->concat($queryBuilder->expr()->literal(' '), 'pi.lastName')),
                                $queryBuilder->expr()->literal( '%' . $term . '%')
                            );
                
                $queryBuilder
                    ->andWhere($searchIn  ." OR LOWER(d.doctorCode) LIKE :term")
                    ->setParameter('term', '%' . $term . '%');
            }
            
            //get page
            $queryBuilder->setMaxResults($params['perPage']);

            $resultQuery =  $queryBuilder->getQuery()->getArrayResult();

            $results['success'] = true;
            $column = 'doctorCode';

            foreach($resultQuery as $v){
                if($column == 'doctorCode' && strpos(strtolower($v['fullName']), strtolower($term)) !== false){
                    $column = 'fullName';
                }
                $results['data'][]['name'] = $v[$column];
            }

            if(null == $resultQuery) {
                $results['message'] = MsgUtils::generate('msgNoData');
            } else {
                $results['message'] = null;
            }
        }catch(Exception $ex){
            $results['message'] = $ex->getMessage();
            $results['success'] = false;
        }
        return $results;
    }
    
    /**
     * Find Agent by doctor
     * @param type $doctor
     * author luyen nguyen
     */
    public function findAgent($doctor) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->where('f.doctor = :doctor')
                ->setParameter('doctor', $doctor)
                ->setMaxResults(1);
        $result = $queryBuilder->getQuery()->getOneOrNullResult();        
        return $result->getAgent();
    }

    /**
     * Find master agent by doctor
     * @param type $doctor
     */
    public function findMasterAgent($doctor)
    {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->innerJoin('f.agent', 'agent')
                ->where('f.doctor = :doctor')
                ->andWhere('f.isActive = 1')
                ->andWhere('f.isPrimary = 1')
                ->andWhere('f.deletedOn IS NULL')
                ->setParameter('doctor', $doctor)
                ->setMaxResults(1);
        $result = $queryBuilder->getQuery()->getOneOrNullResult();

        if (!$result) {
            return $result;
        }

        $agent  = $result->getAgent();
        $parent = $agent->getParent();

        if ($parent) {
            return $parent;
        }

        return $agent;
    }

    public function getRxByMonth($params, $subAgentIds = array(), $isSubAgent=false){
        // get platform setting repository
        $psRepository = $this
            ->getEntityManager()
            ->getRepository('UtilBundle:PlatformSettings');
        $psObj = $psRepository->getPlatFormSetting();

        $drugType = Constant::RX_LINE_TYPE_DRUG;
        $serviceType = Constant::RX_LINE_TYPE_SERVICE;

        $agentIds = array_merge([$params['agentId']], $subAgentIds);

        // find rxs of a doctor by month
        $queryBuilder = $this->createQueryBuilder('f');
        $selectStr = "
            d.displayName,
            rl.id, r.id rxId, r.hasRxReviewFee, r.paidOn, r.orderNumber, d.doctorCode, 
            gc.code,r.taxInvoiceNo,

            ifelse(pi.firstName is null, pi.lastName, CONCAT(pi.firstName, ' ', pi.lastName)) AS fullName,

            rl.lineType, rl.listPrice, rl.name, rl.quantity, rl.originPrice,
            (p.primaryResidenceCountry) as primaryResidenceCountry,

            rl.agentMedicineFee, rl.agentServiceFee, rl.platformMedicineFee, rl.platformServiceFee,
            r.shippingCost as shippingFee,
            pl.updatedOn as refundedOn, r.orderNumber,
            co.id as shippingCountryId,
            r.agentMedicineFee as rxAMF,
            r.agentServiceFee as rxASF,
            r.agent3paMedicineFee,
            r.agent3paServiceFee,
            agent.id as agentId,
            secondaryAgent.id as secondaryAgentId
        ";

        $queryBuilder->select($selectStr)
                            ->innerJoin('f.doctor', 'd')
                            ->innerJoin('UtilBundle:Rx', 'r', 'WITH', 'r.doctor = d.id')
                            ->innerJoin('UtilBundle:RxLine', 'rl', 'WITH', 'rl.rx = r.id')
                            ->leftJoin('UtilBundle:RxPaymentLog', 'pl', 'WITH', 'pl.orderRef = r.orderNumber AND pl.paymentType = :paymentType AND pl.status = :refundStatus')
                            ->leftJoin('UtilBundle:Drug', 'dr', 'WITH', 'dr.id = rl.drug')
                            ->leftJoin('r.agent', 'agent')
                            ->leftJoin('r.secondaryAgent', 'secondaryAgent')
                            ->leftJoin('UtilBundle:GstCode', 'gc', 'WITH', 'gc.id = dr.gstCode')
                            ->innerJoin('r.patient', 'p')
                            ->innerJoin('d.personalInformation', 'pi')
                            ->innerJoin('r.shippingAddress', 'ad')
                            ->innerJoin('ad.city', 'ci')
                            ->innerJoin('ci.country', 'co')
                            ->where('(r.agent = :agentId OR r.agent IN (:ids) OR secondaryAgent.id IN (:agentIds)) and (MONTH(r.paidOn) = :month and YEAR(r.paidOn) = :year OR MONTH(pl.updatedOn) = :month AND YEAR(pl.updatedOn) = :year)')
                            ->andWhere('d.deletedOn is null')
                            ->andWhere('r.status != :failStatus')
                            ->andWhere('r.status != :deadStatus')
                            ->andWhere('r.status != :pfailStatus')
                            ->andWhere('r.deletedOn IS NULL')
                            ->setParameter('agentId', $params['agentId'])
                            ->setParameter('month', $params['month'])
                            ->setParameter('year', $params['year'])
                            ->setParameter('ids', $subAgentIds)
                            ->setParameter('agentIds', $agentIds)
                            ->setParameter('paymentType', Constant::PAYMENT_TYPE_REFUND)
                            ->setParameter('refundStatus', Constant::REFUND_STATUS_SUCCESS)
                            ->setParameter('failStatus', Constant::RX_STATUS_FAILED)
                            ->setParameter('deadStatus', Constant::RX_STATUS_DEAD)
                            ->setParameter('pfailStatus', Constant::RX_STATUS_PAYMENT_FAILED)
                            ->groupBy('rl.id')
                            ->addOrderBy('r.taxInvoiceNo', 'ASC')
                            ->addOrderBy("d.doctorCode", "ASC")
                            ->addOrderBy('r.paidOn',  'ASC')
                            ->addOrderBy('rl.lineType',  'ASC')
                            ->addOrderBy('rl.name',  'ASC');
        // if($isSubAgent){
            $queryBuilder->andWhere('f.deletedOn is null');
        //}

        $result = $queryBuilder->getQuery()->getArrayResult();

         // group rx_line by rx id
        $totalColumn3 = 0;
        $data = array();
        if (isset($result) && count($result) > 0) {
            foreach ($result as $item) {
                $tmp = $item;
                $remove = ['paidOn', 'fullName', 'doctorCode',
                'orderNumber', 'shippingFee', 'primaryResidenceCountry'];

                $tmp = array_diff_key($tmp, array_flip($remove));

                
                if($item['lineType'] == 1){
                    if (!isset($item['refundedOn'])) {
                    $totalColumn3 += $item['agentMedicineFee'];
                    }
                    $tmp['margin'] = $item['listPrice'] - ($item['originPrice'] * $item['quantity']);
                }else{
                    if (!isset($item['refundedOn'])) {
                    $totalColumn3 += $item['agentServiceFee'];
                }
                }

                $data[$item['rxId']]['presDetail'][] = $tmp;

                if (isset($data[$item['rxId']]) and !isset($data[$item['rxId']]['rx'])) {
                    if(!empty($item['displayName'])){
                        $item['fullName'] = $item['displayName'];
                    }
                    $rxInfo = 
                        array('paidOn' => $item['paidOn'],
                          'fullName'   => $item['fullName'], 
                          'refundedOn' => $item['refundedOn'],
                          'doctorCode' => $item['doctorCode'],
                          'orderNumber' => $item['orderNumber'],
                          'taxInvoiceNo' => $item['taxInvoiceNo'],
                          'shippingFee' => array($item['shippingFee'], $item['shippingFee'], 0.00),
                          'primaryResidenceCountry' => $item['primaryResidenceCountry'],
                          'shippingCountryId' => $item['shippingCountryId'],
                          'rxAMF' => $item['rxAMF'],
                          'rxASF' => $item['rxASF'],
                          'agent3paMedicineFee' => $item['agent3paMedicineFee'],
                          'agent3paServiceFee' => $item['agent3paServiceFee'],
                          'secondaryAgentId' => $item['secondaryAgentId']
                        );
                    $data[$item['rxId']]['rx'] = $rxInfo;
                }
            }
        }
        if (!empty($data)) {
          $tmp = array();
          $is3paAgent = false;
          foreach ($data as $key => $v) {
            // calculate gst for per rx (order)
            if (isset($v['presDetail']) and !empty($v['presDetail'])) {
                $gst = 0;
                $originPriceTotal = 0;
                foreach ($v['presDetail'] as $rxLine) {
                    $originPriceTotal += $rxLine['originPrice']*$rxLine['quantity'];
                }
            }
            $v['rx']['originPriceTotal'] = $originPriceTotal;

            // separate rx into base and adjustment 
            if (isset($v['rx']['refundedOn'])) {
                $timestamp = $v['rx']['refundedOn']->getTimestamp();
                if (date('m', $timestamp) == $params['month'] && date('Y', $timestamp) == $params['year']) {
                    $tmp['ajm'][] = $v;
                    if ($psObj['operationsCountryId'] == $v['rx']['shippingCountryId']) {
                        $tmp['ajmlocal'][] = $v;
                        if (in_array($v['rx']['secondaryAgentId'], $agentIds)) {
                            $tmp['ajmlocal3pa']['third'][] = $v;
                            $is3paAgent = true;
                        } else {
                            $tmp['ajmlocal3pa']['main'][] = $v;
                        }
                    } else {
                        $tmp['ajmoversea'][] = $v;
                        if (in_array($v['rx']['secondaryAgentId'], $agentIds)) {
                            $tmp['ajmoversea3pa']['third'][] = $v;
                            $is3paAgent = true;
                        } else {
                            $tmp['ajmoversea3pa']['main'][] = $v;
                        }
                    }
                }
            }

            $timestamp = $v['rx']['paidOn']->getTimestamp();
            if (!isset($v['rx']['refundedOn']) || (date('m', $timestamp) == $params['month'] && date('Y', $timestamp) == $params['year'])) {
                $tmp['base'][] = $v;
                if ($psObj['operationsCountryId'] == $v['rx']['shippingCountryId']) {
                    $tmp['local'][] = $v;
                    if (in_array($v['rx']['secondaryAgentId'], $agentIds)) {
                        $tmp['local3pa']['third'][] = $v;
                        $is3paAgent = true;
                    } else {
                        $tmp['local3pa']['main'][] = $v;
                    }
                } else {
                    $tmp['oversea'][] = $v;
                    if (in_array($v['rx']['secondaryAgentId'], $agentIds)) {
                        $tmp['oversea3pa']['third'][] = $v;
                        $is3paAgent = true;
                    } else {
                        $tmp['oversea3pa']['main'][] = $v;
                    }
                }
            }
          }
          $data['rx'] = $tmp;
          $data['totalColumn3'] = $totalColumn3;
          $data['totalGST'] = $totalColumn3 * $psObj['gstRate'] / 100;
          $data['totalColumn4'] = $totalColumn3 * $psObj['gstRate'] / 100;
          $data['is3paAgent'] = $is3paAgent;
        }
        if (!isset($data['rx'])) {
            $data['rx'] = array();
        }
        if (!isset($data['totalColumn3'])) {
            $data['totalColumn3'] = $totalColumn3;
        }
        if (!isset($data['totalGST'])) {
            $data['totalGST'] = 0;
        }
        
        if(!empty($data['rx']['oversea'])){
            ksort($data['rx']['oversea']);
        }
        
        return $data;
    }
}

<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\Connection;
use UtilBundle\Utility\Constant;
use Doctrine\ORM\Tools\Pagination\Paginator;
use UtilBundle\Entity\Patient;
use UtilBundle\Utility\MsgUtils;

/**
 * PatientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatientRepository extends EntityRepository
{
	/**
     * Get detail patient
     * @param $id
     * @author Toan Le
     */
    public function getPatient($id) {
        return $this->find($id);
    }

    /**
     * @author Tien Nguyen
     */
    public function getListPatient($params)
    {
        $result = [];
        $doctorId = isset($params['doctorId']) ? $params['doctorId'] : 0;
        $statusConfirmed = Constant::RX_STATUS_CONFIRMED;
        $statusDead = Constant::RX_STATUS_DEAD;
        if (!isset($params['rxStatus']) || count($params['rxStatus']) < 1) {
             $params['rxStatus'] = array();
        }
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p', 
                'country.name as countryName', 
                'SUM(ifelse(rx.status >= :statusConfirmed and rx.status != :statusDead and rx.deletedOn is null and rx.doctor = :doctorId,1,0)) as noOfRX', 
                'MAX(rx_new.createdOn) as dateOfLastRX')
            ->innerJoin('p.personalInformation', 'info')
            ->leftJoin('UtilBundle:Country', 'country', 'WITH', 'p.primaryResidenceCountry=country')
            ->leftJoin('UtilBundle:Rx', 'rx', 'WITH', 'rx.patient=p')
            ->leftJoin('UtilBundle:Rx', 'rx_new', 'WITH', 'rx_new.patient=p AND rx_new.status IN (:rxStatus)')
            ->where('p.doctor = :doctorId')
            ->setParameter('doctorId', $doctorId)
            ->setParameter('statusConfirmed', $statusConfirmed)
            ->setParameter('statusDead', $statusDead)
            ->setParameter('rxStatus', $params['rxStatus'])
            ->groupBy('p.id');

        if (isset($params['query']) && $params['query']) {
            $or = $queryBuilder->expr()->orX();
            $query = $params['query'];
            $literal = $queryBuilder->expr()->literal("%$query%");
            $or->add($queryBuilder->expr()->like('p.patientCode', $literal));
            $or->add($queryBuilder->expr()->like('info.firstName', $literal));
            $or->add($queryBuilder->expr()->like('info.lastName', $literal));
            $queryBuilder->andWhere($or);
        }

        if (!empty($params['isAdvanced']) && isset($params['country']) && $params['country']) {
            $queryBuilder->andWhere('p.primaryResidenceCountry = :country');
            $queryBuilder->setParameter('country', $params['country']);
        }

        if (!empty($params['caregiver'])) {
            $queryBuilder->andWhere('p.useCaregiver IN (:caregiver)');
            $queryBuilder->setParameter('caregiver', $params['caregiver'], Connection::PARAM_STR_ARRAY);
        }

        if (empty($params['deletedOn'])) {
            $queryBuilder->andWhere('p.deletedOn IS NULL');
        } else if (1 == $params['deletedOn']) {
            $queryBuilder->andWhere('p.deletedOn IS NOT NULL');
        }

        if (!empty($params['isAdvanced']) && !empty($params['startDate']) && !empty($params['endDate'])) {
            $date = date_create_from_format(Constant::GENERAL_DATE_FORMAT, $params['startDate']);
            $start = $date->setTime(0, 0, 0)->format('Y-m-d H:i:s');
            $date = date_create_from_format(Constant::GENERAL_DATE_FORMAT, $params['endDate']);
            $end = $date->setTime(23, 59, 59)->format('Y-m-d H:i:s');

            $queryBuilder->andHaving('dateOfLastRX BETWEEN :from AND :to');
            $queryBuilder->setParameter('from', $start);
            $queryBuilder->setParameter('to', $end);
        }

        if (isset($params['sorting']) && $params['sorting']) {
            list($sort, $order) = explode('-', $params['sorting']);
            $queryBuilder->orderBy($sort, $order);
        } else {
            $queryBuilder->orderBy('p.createdOn', 'asc');
        }
        
        $query = $queryBuilder->getQuery();
        $result['totalResult'] = count($query->getResult());

        if(isset($params['perPage'])){
            $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
            $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
            $startRecord = $perPage*$page;
            $queryBuilder->setFirstResult($startRecord)
                ->setMaxResults($perPage);
            $result['totalPages'] = ceil($result['totalResult']/$perPage);
            $result['data'] = $queryBuilder->getQuery()->getResult();
        }

        return $result;
    }

    /**
     * @author Tien Nguyen
     */
    public function getPatientRXHistory($params)
    {
        $doctorId  = isset($params['doctorId']) ? $params['doctorId'] : 0;
        $patientId = isset($params['patientId']) ? $params['patientId'] : 0;

        //get page
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
        $startRecord = $perPage*$page;

        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
                ->select('rxl')
                ->from('UtilBundle:RxLine', 'rxl')
                ->innerJoin('rxl.rx', 'rx')
                ->where('rx.doctor = :doctorId')
                ->andWhere('rx.patient = :patientId')
                ->andWhere('rx.deletedOn IS NULL')
                ->andWhere('rx.status <> :deadStatus')
                ->setParameter('deadStatus', Constant::RX_STATUS_DEAD)
                ->setParameter('doctorId', $doctorId)
                ->setParameter('patientId', $patientId);

        $q = clone $queryBuilder;
        $q->addSelect('SUM(rxl.listPrice) as totalAmount')
        ->groupBy('rx.id')
        ->setFirstResult($startRecord)
        ->setMaxResults($perPage);

        if (isset($params['sorting']) && $params['sorting']) {
            list($sort, $order) = explode('-', $params['sorting']);
            $q->orderBy($sort, $order);
        } else {
            $q->orderBy('rx.createdOn', 'desc');
        }

        $paginator   = new Paginator($q->getQuery());
        $totalResult = count($paginator);

        $settings = $this
            ->getEntityManager()
            ->getRepository('UtilBundle:PlatformSettings')
            ->getPlatFormSetting();

        $result = array();
        foreach ($paginator as $value) {
            $value = $value[0];
            $rxId  = $value->getRx()->getId();
            $result[$rxId]['rx'] = $value->getRx();

            $q2 = clone $queryBuilder;
            $q2->andWhere('rx.id = :rxId');
            $q2->setParameter('rxId', $rxId);
            $list = $q2->getQuery()->getResult();
            $result[$rxId]['list'] = $list;

            $result[$rxId]['type'] = '';
            $result[$rxId]['date'] = '';

            $rxStatus = $value->getRx()->getStatus();
            $result[$rxId]['rxStatus'] = Constant::getRXStatus($rxStatus);

            $rxRefill = $this->getEntityManager()->getRepository('UtilBundle:RxRefillReminder')
                ->findOneBy(array('rx' => $rxId));
            if (empty($rxRefill)) {
                $result[$rxId]['status'] = false;
                continue;
            }

            $startOn = $rxRefill->getStartOn();
            if (empty($startOn)) {
                $result[$rxId]['status'] = false;
                continue;
            }

            $duration = $rxRefill->getRefillSupplyDuration();
            $interval = date_interval_create_from_date_string("$duration days");
            $dueOn    = date_add($startOn, $interval);
            $diff     = date_create()->diff($dueOn)->format('%a%');

            $numberOfDuration = $settings['reminderRxRefill30'];
            if ($duration > Constant::REMINDER_30_DAYS) {
                $numberOfDuration = $settings['reminderRxRefill60'];
            }

            $status = $diff <= $numberOfDuration;
            $result[$rxId]['status'] = $status;

            if (!$status) {
                continue;
            }

            $message = $rxRefill->getMessage();
            if (!$message) {
                continue;
            }
            $messageContent = $message->getContent();
            if (!$messageContent) {
                continue;
            }

            $result[$rxId]['type'] = $messageContent->getType();
            $result[$rxId]['date'] = $messageContent->getCreatedOn();
        }

        return array(
            'totalResult' => $totalResult,
            'totalPages' => ceil($totalResult/$perPage),
            'data' => $result
        );
    }

    /**
     * @author Tien Nguyen
     */
    public function generatePatientCode($patient)
    {
        $arrResult = array();
        $arrResult[] = 'P';

        $doctorId = 0;
        if ($patient) {
            $doctorCode = $patient->getDoctor()->getDoctorCode();
            list(,,,$doctorId) = explode('-', $doctorCode);
        }
        $arrResult[] = sprintf("%'.04d", $doctorId);

        $country = null;
        if ($patient) {
            $country = $patient->getPrimaryResidenceCountry()->getCodeAthree();
        }
        $arrResult[] = $country;

        $arrResult[] = date('my');

        $params = array('doctorId' => $patient->getDoctor()->getId());
        $latest = $this->getLatestPatientCode($params);
        $arrayCheck = explode('-', $latest);
        if(isset($arrayCheck[4])){
            $newNo = $arrayCheck[4];
        }
        if (empty($newNo)) {
            $newNo = 0;
        }
        $arrResult[] = sprintf("%'.04d", $newNo + 1);

        return implode('-', $arrResult);

    }

    /**
     * @author Tien Nguyen
     */
    public function updateJoinTables(Patient $patient, $otherDiagnosis = null)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
                ->select('pd')
                ->from('UtilBundle:PatientDiagnosis', 'pd')
                ->where('pd.patient = :patientId')
                ->setParameter('patientId', $patient->getId());

        $list = $queryBuilder->getQuery()->getResult();
        foreach ($list as $value) {
            if (strtolower($value->getDiagnosis()->getDiagnosis()) == 'others') {
                $otherDiagnosisValues = explode(',', $otherDiagnosis);
                $optionsValue = [];
                foreach ($otherDiagnosisValues as $diagnosisValue) {
                    if ($diagnosisValue != '') {
                        $optionsValue[] = $diagnosisValue;
                    }
                }
                $value->setOptions(json_encode($optionsValue));
            }
            if ($value->getCreatedOn() == null) {
                $value->setCreatedOn(new \DateTime());
            }
            $this->getEntityManager()->persist($value);
        }

        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
                ->select('pp')
                ->from('UtilBundle:PatientPhone', 'pp')
                ->where('pp.patient = :patientId')
                ->andWhere('pp.createdOn is NULL')
                ->setParameter('patientId', $patient->getId());

        $list = $queryBuilder->getQuery()->getResult();
        foreach ($list as $value) {
            $value->setCreatedOn(new \DateTime());
            $this->getEntityManager()->persist($value);
        }

        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
                ->select('cp')
                ->from('UtilBundle:CareGiverPhone', 'cp')
                ->innerJoin('cp.careGiver', 'c')
                ->where('c.patient = :patientId')
                ->andWhere('cp.createdOn is NULL')
                ->setParameter('patientId', $patient->getId());

        $list = $queryBuilder->getQuery()->getResult();
        foreach ($list as $value) {
            $value->setCreatedOn(new \DateTime());
            $this->getEntityManager()->persist($value);
        }

        $this->getEntityManager()->flush();
    }

    /**
     * @author Tien Nguyen
     */
    private function getLatestPatientCode($params)
    {
        $doctorId = isset($params['doctorId']) ? $params['doctorId'] : 0;
        $criteria = array('doctor' => $doctorId);

        $orderBy = array('id' => 'desc');
        $patient = $this->findOneBy($criteria, $orderBy);

        if (null == $patient) {
            return '';
        }

        return $patient->getPatientCode();
    }

    /**
     * @author Tien Nguyen
     */
    public function getEntityManager()
    {
        return $this->_em;
    }

    /**
     * get list patient by agent id
     * @param $params
     * @return array
     * @author toan.le
     */
    public function getPatientsListByDoctors($doctors)
    {
        $results = [];
        try{
            $queryBuilder = $this->createQueryBuilder('p')
                                ->select('p')
                                ->innerJoin('p.doctor', 'd')
                                ->where('p.doctor IN (:ids)')
                                ->andWhere('d.deletedOn is null')
                                ->setParameter('ids', $doctors);

            $resultQuery =  $queryBuilder->getQuery()->getArrayResult();
            $totalResult = count($resultQuery);
            $results['success'] = true;
            $results['data'] = $resultQuery;
            $results['totalResult'] = $totalResult;
            if(null == $resultQuery) {
                $results['message'] = MsgUtils::generate('msgNoData');
            } else {
                $results['message'] = null;
            }
        }catch(Exception $ex){
            $results['message'] = $ex->getMessage();
            $results['success'] = false;
        }
        return $results;
    }

    public function getOtherDiagnosticValues($patientId) {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
            ->select('pd')
            ->from('UtilBundle:PatientDiagnosis', 'pd')
            ->where('pd.patient = :patientId')
            ->andWhere('pd.options IS NOT NULL')
            ->setMaxResults(1)
            ->setParameter('patientId', $patientId);

        $result = $queryBuilder->getQuery()->getResult();
        $otherValues = '';
        if (count($result) > 0) {
            $otherValues = $result[0]->getOptions();
        }

        return json_decode($otherValues, true);
    }

}

<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BankSettlementUploadLineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BankSettlementUploadLineRepository extends EntityRepository {
	
    public function getLinesByBankSettlement($id, $request) 
	{
        $search = $request->get('search', '');
		$filter = $request->get('filter', array());
        $limit = $request->get('length', 5);
        $sort = $request->get('sort', array());
        $page = $request->get('page', 1);

        $qb = $this->createQueryBuilder('bsul');
		
		$qb->where($qb->expr()->eq("bsul.bankSettlementUpload", $id));
		if (!empty($search)) {
			$qb->andWhere("bsul.customerReference LIKE :search")
			->setParameter('search', '%'. $search .'%');
		}
		
		if (!empty($filter)) {
			if (isset($filter['min']) && is_numeric($filter['min'])) {
				$qb->andWhere($qb->expr()->gte("bsul.transactionAmount", $filter['min']));
			}
			if (isset($filter['max']) && is_numeric($filter['max'])) {
				$qb->andWhere($qb->expr()->lte("bsul.transactionAmount", $filter['max']));
			}
		}

        $total = $qb->select("COUNT(bsul.id)")
                ->getQuery()
                ->getSingleScalarResult();
		
		if (!empty($sort)) {
			foreach ($sort as $key => $value) {
				$qb->orderBy("bsul." . $key, $value);
			}
		}
		$qb->setMaxResults($limit)
			->setFirstResult(($page - 1) * $limit);	
			
        $list = $qb->select("bsul")->getQuery()->getResult();
        $data = array();
		foreach ($list as $item) {
			$data[] = array(
				'id' => $item->getId(),
				'accountName' => $item->getAccountName(),
				'country' => $item->getCountry(),
				'openingAvailableBalance' => number_format($item->getOpeningAvailableBalance(), 2, '.', ','),
				'closingAvailableBalance' => number_format($item->getClosingAvailableBalance(), 2, '.', ','),
				'accountNumber' => $item->getAccountNumber(),
				'companyName' => $item->getCompanyName(),
				'openingLedgerBalance' => number_format($item->getOpeningLedgerBalance(), 2, '.', ','),
				'closingLedgerBalance' => number_format($item->getClosingLedgerBalance(), 2, '.', ','),
				'currency' => $item->getCurrency(),
				'bankCode' => $item->getBankCode(),
				'balanceOn' => $item->getBalanceOn()->format('d-M-y'),
				'accountType' => $item->getAccountType(),
				'branchCode' => $item->getBranchCode(),
				'transactionReference' => $item->getTransactionReference(),
				'valueDate' => $item->getValueDate()->format('d-M-y'),
				'postDate' => $item->getPostDate()->format('d-M-y'),
				'transactionDetail' => $item->getTransactionDetail(),
				'transactionType' => $item->getTransactionType(),
				'transactionAmount' => number_format($item->getTransactionAmount(), 2, '.', ','),
				'customerReference' => $item->getCustomerReference(),
				'chequeNumber' => $item->getChequeNumber(),
				'payType' => $item->getPayType()
			);
		}
		
        return array('data' => $data, 'total' => $total);
    }


    public function getListForSummary($day){
        $qb = $this->createQueryBuilder('bsul');
        if(empty($day)){
            $qb->where($qb->expr()->eq("bsul.isSyncSummary", 0))
                ->andWhere($qb->expr()->eq($qb->expr()->trim("bsul.customerReference"), "''"));
        }  else {
            $qb->where($qb->expr()->like("date(bsul.postDate)", "'%".$day."%'"))
                ->andWhere($qb->expr()->eq($qb->expr()->trim("bsul.customerReference"), "''"));
        }
        $lines = $qb->getQuery()->getResult();
        $result = [];
        foreach ($lines as $line) {

            $date =  $line->getPostDate()->format('Y-m-d');

            if(isset($result[$date])) {
                $result[$date][] = ['id'=>$line->getId(),'amout' => $line->getTransactionAmount()];
            } else {
                $result[$date] = [['id'=>$line->getId(),'amout' => $line->getTransactionAmount()]];
            }
        }
        return $result;

    }
}
<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Constant;
/**
 * MarginShareRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MarginShareRepository extends EntityRepository
{

    /**
     * get platform setting
     * @author  thu.tranq
     * @return array
     */
    public function getDoctorFeeByMonth($params) {
        $refundStatusSuccess = Constant::REFUND_STATUS_SUCCESS;
        $queryBuilder = $this->createQueryBuilder('ms');
        $refundType          = Constant::PAYMENT_TYPE_REFUND;
        $queryBuilder->select("SUM(ifelse(pl.status is null or pl.status <> '{$refundStatusSuccess}', ms.doctorAmount, 0)) as doctorAmount")
                     ->leftJoin('UtilBundle:RxPaymentLog', 'pl', 'WITH', "ms.rx = pl.rx and  pl.status = '{$refundStatusSuccess}' and pl.paymentType='{$refundType}'")
                     ->where("MONTH(ms.createdOn) = {$params['month']}")
                     ->andWhere("YEAR(ms.createdOn) = {$params['year']}")
                     ->andWhere("ms.doctor = {$params['doctorId']}");

         $data =  $queryBuilder->getQuery()->getSingleResult();

         return $data['doctorAmount'];
    }

    /**
     * get platform setting
     * @author  toan.le
     * @modifier thu.tranq
     * @return array
     */
    public function getAgentFeeByMonth($params, $returnPatientFee = false) {
        $refundStatusSuccess = Constant::REFUND_STATUS_SUCCESS;
        $refundType          = Constant::PAYMENT_TYPE_REFUND;
        $queryBuilder = $this->createQueryBuilder('ms');
        $queryBuilder->select("ms")
                     ->innerJoin('ms.rx', 'rx')
                     ->leftJoin('UtilBundle:RxPaymentLog', 'pl', 'WITH', "ms.rx = pl.rx and  pl.status = '{$refundStatusSuccess}' and pl.paymentType='{$refundType}'")
                     ->where("MONTH(ms.createdOn) = {$params['month']}")
                     ->andWhere("YEAR(ms.createdOn) = {$params['year']}")
                     ->andWhere("ms.agent = {$params['agentId']} OR ms.agent3pa = {$params['agentId']}" )
                     ->andWhere($queryBuilder->expr()->notIn('rx.status',[Constant::RX_STATUS_FAILED, Constant::RX_STATUS_PAYMENT_FAILED , Constant::RX_STATUS_DEAD]));

        $data =  $queryBuilder->getQuery()->getResult();

        $agentMonthlyFee = $patientFee = 0;
        foreach ($data as $value) {
            if ($params['agentId'] == $value->getAgent()->getId()) {
                $agentMonthlyFee += $value->getAgentAmount();
            }
            if ($value->getAgent3pa() && $params['agentId'] == $value->getAgent3pa()->getId()) {
                $agentMonthlyFee += $value->getAgentAmount3pa();
            }

            $patientFee += $value->getRx()->getOrderValue();
        }

        // recal if any gst
        $em    = $this->getEntityManager();
        $agent = $em->getRepository('UtilBundle:Agent')->find($params['agentId']);

        if ($agent->getIsGst() != true) {
            if ($returnPatientFee) {
                return ['agentMonthlyFee' => $agentMonthlyFee, 'patientFee' => $patientFee];
            }

            return $agentMonthlyFee;
        }

        $platforms = $em->getRepository('UtilBundle:PlatformSettings')->findAll();
        $gstRate = 0;
        if (!empty($platforms)) {
            $platforms = $platforms[0];
            $gstRate = $platforms->getGstRate();
        }

        $agentMonthlyFeeGst = $agentMonthlyFee * $gstRate/100;
        $agentMonthlyFeeGst = round($agentMonthlyFeeGst, 2);
        $agentMonthlyFee    = $agentMonthlyFee + $agentMonthlyFeeGst;

        if ($returnPatientFee) {
            return ['agentMonthlyFee' => $agentMonthlyFee, 'patientFee' => $patientFee];
        }

        return $agentMonthlyFee;
    }


    /**
     * get refuned rxids
     * @return string
     */
    public function getRefundedRxIds($params) {
        $params['doctorId'] = implode(',', $params['doctorIds']);
        $em          = $this->getEntityManager();
        $refundedRxs = $em->getRepository('UtilBundle:RxPaymentLog')->getRxRefundedByMonth($params['month'], $params['year'], $params['doctorId']);

        if (empty($refundedRxs)) {
            return '';
        }
        $excludedRxIds = array();
        foreach ($refundedRxs as $value) {
            if (!in_array($value['rxId'], $excludedRxIds)) {
                $excludedRxIds[] = $value['rxId'];
            }
        }
        $excludedRxIds = implode(' ,', $excludedRxIds);
        $excludedRxIds = '(' . $excludedRxIds . ')';

        return $excludedRxIds;
    }
    /*
   * Agent - Amount Paid to Agent
   * SUM(margin_shares.agent_amount)
   * author : bien
   */
    public function getAmountPaidToAgent(){
        $queryBuilder = $this->createQueryBuilder('r');
        $queryBuilder->select('SUM(r.agentAmount )');
        $resultQuery = $queryBuilder->getQuery()->getSingleScalarResult();
        return $resultQuery;
    }

    /**
     * New function for get monthly doctor fee.
     * Fix issue the differentiation between data
     * on dashboard and monthly statement pdf.
     * 
     * @param   array   $params The params
     * @return  float
     */
    public function getMonthlyDoctorFee($params)
    {
        $refundStatusSuccess = Constant::REFUND_STATUS_SUCCESS;
        $refundType          = Constant::PAYMENT_TYPE_REFUND;

        $select = "rx.doctorMedicineFee
            + rx.doctorServiceFee
            + rx.feeGst
            + rx.customsClearanceDoctorFee
            - IFELSE(rx.paymentGatewayFeeBankGst IS NULL, 0, rx.paymentGatewayFeeBankGst)
            - IFELSE(rx.paymentGatewayFeeVariable IS NULL, 0, rx.paymentGatewayFeeVariable)
            - IFELSE(rx.paymentGatewayFeeFixed IS NULL, 0, rx.paymentGatewayFeeFixed) as doctorFee, rx.orderValue";

        $queryBuilder = $this->getEntityManager()->getRepository('UtilBundle:Rx')
            ->createQueryBuilder('rx');
        $queryBuilder->select($select)
            ->leftJoin('UtilBundle:RxPaymentLog', 'pl', 'WITH', "rx = pl.rx AND pl.status = '{$refundStatusSuccess}' AND pl.paymentType='{$refundType}'")
            ->where("MONTH(rx.paidOn) = :month")
            ->andWhere("YEAR(rx.paidOn) = :year")
            ->andWhere($queryBuilder->expr()->notIn('rx.status',[Constant::RX_STATUS_FAILED, Constant::RX_STATUS_PAYMENT_FAILED , Constant::RX_STATUS_DEAD]))
            ->andWhere("rx.doctor = :doctorId")
            ->setParameter('month', $params['month'])
            ->setParameter('year', $params['year'])
            ->setParameter('doctorId', $params['doctorId']);

        $result = $queryBuilder->getQuery()->getArrayResult();

        $data = $orderValue = 0;
        foreach ($result as $value) {
            $data += $value['doctorFee'];
            $orderValue += $value['orderValue'];
        }

        if (isset($params['returnOrderValue'])) {
            return ['doctorFee' => $data, 'orderValue' => $orderValue];
        }

        return $data;
    }
}
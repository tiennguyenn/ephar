<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Constant;

/**
 * AgentPrimaryCustomFeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgentPrimaryCustomFeeRepository extends EntityRepository {
    
    /**
     * get platform share percentage by type
     * @return array
     */
    public function getAgentPSFByType($agent, $areaType, $msType)
    {
        $qb = $this->createQueryBuilder('psf');
        $qb->select('psf.id',
            'psf.platformPercentage',
            'psf.newPlatformPercentage',
            'psf.agentPercentage',
            'psf.newAgentPercentage',
            'psf.takeEffectOn',
            'psf.marginShareType',
            'psf.areaType',
            'psf.isActive'
            )
            ->where('psf.agent=:agent AND psf.marginShareType=:msType AND psf.areaType=:areaType')
            ->setParameter('agent', $agent->getId())
            ->setParameter('msType', $msType)
            ->setParameter('areaType', $areaType)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Function to get data to update on the cronjob Update fee
     */
    public function getCronjobUpdateFeeData()
    {
        $query = $this->createQueryBuilder('a')
                ->where('a.takeEffectOn lIKE :date')
                ->setParameter('date', '%' . date("Y-m-d") . '%')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Function to calculate the agent service fee
     */
    public function calculatePlatformShare($agent, $rxLine)
    {
        $em = $this->getEntityManager();

        $reviewFee = round($rxLine->getCostPrice(), 2);
        $rx = $rxLine->getRx();

        $params = ['patient' => $rx->getPatient()];
        $isLocalPatient = $em->getRepository('UtilBundle:Rx')->isLocalPatient($params);

        $areaType = Constant::AREA_TYPE_OVERSEA;
        if ($isLocalPatient) {
            $areaType = Constant::AREA_TYPE_LOCAL;
        }
        $msType = Constant::MST_SERVICE;

        $criteria = [
            'agent' => $agent,
            'areaType' => $areaType,
            'marginShareType' => $msType,
            'isActive' => true
        ];
        $psp = $this->findOneBy($criteria);

        $platformSF = $agentSF = 0;
        if ($psp) {
            $platformSF = round($psp->getPlatformPercentage(), 2);
            $agentSF = round($psp->getAgentPercentage(), 2);
        } else {
            return $em->getRepository('UtilBundle:PlatformShareFee')->calculatePlatformShare($rxLine);
        }

        $listPrice = round($reviewFee + $platformSF + $agentSF, 2);

        return [
            'platformSF' => $platformSF,
            'agentSF' => $agentSF,
            'doctorSF' => $reviewFee,
            'listPrice' => $listPrice
        ];
    }
}

<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use UtilBundle\Entity\PaymentStatus;
use UtilBundle\Utility\Constant;
use DoctrineExtensions\Query;

/**
 * PaymentStatusRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentStatusRepository extends EntityRepository
{
    /**
     * payment status update
     * @param $params
     * @return array
     * @author vinh.nguyen
     */
    public function update($params)
    {
        $psObj = $this->findOneBy(array('id' => $params['id']));
        if( null == $psObj ) {
            $psObj = new PaymentStatus();
            $psObj->setUserId($params['userId']);
            $psObj->setUserType($params['userType']);
            $psObj->setCreatedOn(new \DateTime());
        }
        $datePaid = new \DateTime($params['datePaid']);
        $psObj->setAmountPaid(str_replace(",","",$params['amountPaid']));
        $psObj->setRemark($params['remark']);
        $psObj->setStatus(1); //on update, the status will be always true
        $psObj->setDatePaid($datePaid->modify('last day of this month'));
        $psObj->setUpdatedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($psObj);
        $em->flush();

        return $this->getPSDetailBy($params);
    }

    /**
     * get payment status detail
     * @author  vinh.nguyen
     * @return array
     */
    public function getPSDetailBy($params)
    {
        $timeNow = new \DateTime();

        $qb = $this->getEntityManager()->createQueryBuilder();
        switch($params['userType']):
            case Constant::USER_TYPE_DOCTOR:
                $datePaid = new \DateTime($params['datePaid']);
                $qb->select("d.doctorCode as userCode,
                        (CASE
                            WHEN pi.lastName is not null and pi.lastName is not null
                                THEN CONCAT(pi.firstName, ' ' ,  pi.lastName)
                            WHEN pi.firstName is not null and pi.lastName is null
                                THEN pi.firstName
                            WHEN pi.firstName is null and pi.lastName is not null
                                THEN pi.lastName
                            ELSE ' '
                        END) as name,
                        SUM(ms.doctorAmount) as amountDue")
                    ->addSelect(" ps.id,
                        (case when ps.userId is null then d.id else ps.userId end) as userId,
                        (case when ps.userType is null then ".Constant::USER_TYPE_DOCTOR." else ps.userType end) as userType,
                        ps.amountPaid,
                        ps.remark,
                        ps.status,
                        (case when ps.datePaid is null then :datePaid else ps.datePaid end) as datePaid
                    ")
                    ->from('UtilBundle:MarginShare', 'ms')
                    ->innerJoin('ms.doctor', 'd')
                    ->innerJoin('d.personalInformation', 'pi')
                    ->leftJoin('UtilBundle:PaymentStatus', 'ps', 'WITH', 'ps.userId = d.id AND ps.userType='.Constant::USER_TYPE_DOCTOR.' AND ps.datePaid >= :start AND ps.datePaid <= :end')
                    ->andWhere('d.id=:userId')
                    //->andWhere('ms.createdOn < :currentTime')
                    ->andWhere('ms.createdOn >= :start AND ms.createdOn <= :end')
                    ->setParameter('userId', $params['userId'])
                    //->setParameter('currentTime', $timeNow->format('Y-m-01'))
                    ->setParameter('start', $datePaid->format("Y-m-01"))
                    ->setParameter('end', $datePaid->format("Y-m-t"))
                    ->setParameter('datePaid', $datePaid)
                    ->groupBy('ms.doctor')
                    ->setMaxResults(1);
                break;
            case Constant::USER_TYPE_AGENT:
                $datePaid = new \DateTime($params['datePaid']);
                $qb->select("a.agentCode as userCode,
                        (CASE
                            WHEN pi.lastName is not null and pi.lastName is not null
                                THEN CONCAT(pi.firstName, ' ' ,  pi.lastName)
                            WHEN pi.firstName is not null and pi.lastName is null
                                THEN pi.firstName
                            WHEN pi.firstName is null and pi.lastName is not null
                                THEN pi.lastName
                            ELSE ' '
                        END) as name,
                        SUM(ms.agentAmount) as amountDue")
                    ->addSelect(" ps.id,
                        (case when ps.userId is null then a.id else ps.userId end) as userId,
                        (case when ps.userType is null then ".Constant::USER_TYPE_AGENT." else ps.userType end) as userType,
                        ps.amountPaid,
                        ps.remark,
                        ps.status,
                        (case when ps.datePaid is null then :datePaid else ps.datePaid end) as datePaid
                    ")
                    ->from('UtilBundle:MarginShare', 'ms')
                    ->innerJoin('ms.agent', 'a')
                    ->innerJoin('a.personalInformation', 'pi')
                    ->leftJoin('UtilBundle:PaymentStatus', 'ps', 'WITH', 'ps.userId = a.id AND ps.userType='.Constant::USER_TYPE_AGENT.' AND ps.datePaid >= :start AND ps.datePaid <= :end')
                    ->andWhere('a.id=:userId')
                    //->andWhere('ms.createdOn < :currentTime')
                    ->andWhere('ms.createdOn >= :start AND ms.createdOn <= :end')
                    ->setParameter('userId', $params['userId'])
                    //->setParameter('currentTime', $timeNow->format('Y-m-01'))
                    ->setParameter('start', $datePaid->format("Y-m-01"))
                    ->setParameter('end', $datePaid->format("Y-m-t"))
                    ->setParameter('datePaid', $datePaid)
                    ->groupBy('ms.agent')
                    ->setMaxResults(1);
                break;
        endswitch;

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * get list payment status
     * @author  vinh.nguyen
     * @return array
     */
    public function getPSListBy($params)
    {
        $timeNow = new \DateTime();
        $qb = $this->getEntityManager()->createQueryBuilder();

        switch($params['userType']):
            case Constant::USER_TYPE_DOCTOR:
                $datePaid = !empty($params['date'])? new \DateTime($params['date']): new \DateTime();
                $qb->select("d.doctorCode as userCode,
                        (CASE
                            WHEN pi.lastName is not null and pi.lastName is not null
                                THEN CONCAT(pi.firstName, ' ' ,  pi.lastName)
                            WHEN pi.firstName is not null and pi.lastName is null
                                THEN pi.firstName
                            WHEN pi.firstName is null and pi.lastName is not null
                                THEN pi.lastName
                            ELSE ' '
                        END) as name,
                        SUM(ms.doctorAmount) as amountDue")
                    ->addSelect("ps.id,
                        (case when ps.userId is null then d.id else ps.userId end) as userId,
                        (case when ps.userType is null then ".Constant::USER_TYPE_DOCTOR." else ps.userType end) as userType,
                        ps.amountPaid,
                        ps.remark,
                        ps.status,
                        (case when ps.datePaid is null then :datePaid else ps.datePaid end) as datePaid
                        ")
                    ->from('UtilBundle:MarginShare', 'ms')
                    ->innerJoin('ms.doctor', 'd')
                    ->innerJoin('d.personalInformation', 'pi')
                    ->leftJoin('UtilBundle:PaymentStatus', 'ps', 'WITH', 'ps.userId = d.id AND ps.userType = '.Constant::USER_TYPE_DOCTOR.' AND ps.datePaid >= :start AND ps.datePaid <= :end')
                    //->andWhere('ms.createdOn < :currentTime')
                    ->andWhere('ms.createdOn >= :start AND ms.createdOn <= :end')
                    //->setParameter('currentTime', $timeNow->format('Y-m-01'))
                    ->setParameter('datePaid', $datePaid)
                    ->setParameter('start', $datePaid->format("Y-m-01"))
                    ->setParameter('end', $datePaid->format("Y-m-t"))
                    ->setParameter('datePaid', $datePaid)
                    ->groupBy('ms.doctor');
                break;
            case Constant::USER_TYPE_AGENT:
                $datePaid = !empty($params['date'])? new \DateTime($params['date']): new \DateTime();
                $qb->select("a.agentCode as userCode,
                        (CASE
                            WHEN pi.lastName is not null and pi.lastName is not null
                                THEN CONCAT(pi.firstName, ' ' ,  pi.lastName)
                            WHEN pi.firstName is not null and pi.lastName is null
                                THEN pi.firstName
                            WHEN pi.firstName is null and pi.lastName is not null
                                THEN pi.lastName
                            ELSE ' '
                        END) as name,
                        SUM(ms.agentAmount) as amountDue")
                    ->addSelect("ps.id,
                        (case when ps.userId is null then a.id else ps.userId end) as userId,
                        (case when ps.userType is null then ".Constant::USER_TYPE_AGENT." else ps.userType end) as userType,
                        ps.amountPaid,
                        ps.remark,
                        ps.status,
                        (case when ps.datePaid is null then :datePaid else ps.datePaid end) as datePaid
                    ")
                    ->from('UtilBundle:MarginShare', 'ms')
                    ->innerJoin('ms.agent', 'a')
                    ->innerJoin('a.personalInformation', 'pi')
                    ->leftJoin('UtilBundle:PaymentStatus', 'ps', 'WITH', 'ps.userId = a.id AND ps.userType ='.Constant::USER_TYPE_AGENT.' AND ps.datePaid >= :start AND ps.datePaid <= :end')
                    //->andWhere('ms.createdOn < :currentTime')
                    ->andWhere('ms.createdOn >= :start AND ms.createdOn <= :end')
                    //->setParameter('currentTime', $timeNow->format('Y-m-01'))
                    ->setParameter('datePaid', $datePaid)
                    ->setParameter('start', $datePaid->format("Y-m-01"))
                    ->setParameter('end', $datePaid->format("Y-m-t"))
                    ->setParameter('datePaid', $datePaid)
                    ->groupBy('ms.agent');
                break;
        endswitch;

        //more conditions
        $this->moreConditions($qb, $params);

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }

    /**
     * more conditions
     * @param QueryBuilder $qb
     * @param $params
     * @author vinh.nguyen
    */
    private function moreConditions(QueryBuilder &$qb, $params)
    {
        switch($params['userType']):
            case Constant::USER_TYPE_DOCTOR:
                //sorting
                if(isset($params['sorting']) && !empty($params['sorting'])){
                    $fieldName = "";
                    $arrSort= explode("_", $params['sorting']);
                    if(isset($arrSort[0]) && isset($arrSort[1])) {
                        switch($arrSort[0]):
                            case 'userCode':
                                $fieldName = 'd.doctorCode';
                                break;
                            case 'name':
                                $fieldName = 'pi.firstName';
                                break;
                            case 'amountDue':
                                $fieldName = 'amountDue';
                                break;
                            case 'amountPaid':
                                $fieldName = 'ps.amountPaid';
                                break;
                            case 'status':
                                $fieldName = 'ps.status';
                                break;
                        endswitch;
                        if(!empty($fieldName)) {
                            $qb->orderBy($fieldName, strtoupper($arrSort[1]));
                        }
                    }
                }

                //filter on: code, name
                if(isset($params['term']) && !empty($params['term'])) {
                    $term = trim(strtolower($params['term']));
                    $qb->where('LOWER(d.doctorCode) LIKE :term
                        OR LOWER(pi.firstName) LIKE :term
                        OR LOWER(pi.lastName) LIKE :term
                    ')
                        ->setParameter('term', '%'. $term .'%');
                }
                //filter on: status
                if(isset($params['status']) && $params['status'] != 'all') {
                    if($params['status'] == 1)
                        $qb->andWhere('ps.status IS NOT NULL');
                    else
                        $qb->andWhere('ps.status IS NULL');
                }
                break;
            case Constant::USER_TYPE_AGENT:
                //sorting
                if(isset($params['sorting']) && !empty($params['sorting'])){
                    $fieldName = "";
                    $arrSort= explode("_", $params['sorting']);
                    if(isset($arrSort[0]) && isset($arrSort[1])) {
                        switch($arrSort[0]):
                            case 'userCode':
                                $fieldName = 'a.agentCode';
                                break;
                            case 'name':
                                $fieldName = 'pi.firstName';
                                break;
                            case 'amountDue':
                                $fieldName = 'amountDue';
                                break;
                            case 'amountPaid':
                                $fieldName = 'ps.amountPaid';
                                break;
                            case 'status':
                                $fieldName = 'ps.status';
                                break;
                        endswitch;
                        if(!empty($fieldName)) {
                            $qb->orderBy($fieldName, strtoupper($arrSort[1]));
                        }
                    }
                }
                //filter on: code, name
                if(isset($params['term']) && !empty($params['term'])) {
                    $term = trim(strtolower($params['term']));
                    $qb->where('LOWER(a.agentCode) LIKE :term
                        OR LOWER(pi.firstName) LIKE :term
                        OR LOWER(pi.lastName) LIKE :term
                    ')
                        ->setParameter('term', '%'. $term .'%');
                }
                //filter on: status
                if(isset($params['status']) && $params['status'] != 'all') {
                    if($params['status'] == 1)
                        $qb->andWhere('ps.status IS NOT NULL');
                    else
                        $qb->andWhere('ps.status IS NULL');
                }
                break;
        endswitch;
    }

    /**
     * get platform setting
     * @author  thu.tranq
     * @return array
     */
    public function getPaymentByMonth($params,$userType = Constant::USER_TYPE_DOCTOR) {
        $id = isset($params['doctorId']) ? $params['doctorId'] : $params['agentId'];
        $queryBuilder = $this->createQueryBuilder('ps');
        $queryBuilder->select("ps.datePaid, ps.amountPaid")
                     ->where("MONTH(ps.datePaid) = {$params['month']}")
                     ->andWhere("YEAR(ps.datePaid) = {$params['year']}")
                     ->andWhere("ps.userId = {$id}")
                     ->andWhere("ps.userType = {$userType}")
                     ->setMaxResults( 1 );

         $data =  $queryBuilder->getQuery()->getArrayResult();

         return count($data) > 0 ? $data[0] : array();
    }
}
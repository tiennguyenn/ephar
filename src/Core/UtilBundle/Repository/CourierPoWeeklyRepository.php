<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use DoctrineExtensions\Query;
use UtilBundle\Entity\CourierPoDaily;
use UtilBundle\Entity\CourierPoWeekly;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;

/**
 * CourierPoWeeklyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourierPoWeeklyRepository extends EntityRepository
{
    /**
     * create new
     * @author vinh.nguyen
     */
    public function create($params)
    {
        $cowObj = $this->findOneBy(array('cycle' => $params['cycle']));
        if($cowObj == null)
            $cowObj = new CourierPoWeekly();

        $cowObj->setCycle($params['cycle']);
        $cowObj->setPoNumber($params['poNumber']);
        $cowObj->setCycleFromDate($params['cycleFromDate']);
        $cowObj->setCycleToDate($params['cycleToDate']);
        $cowObj->setWeeklyPoDate($params['weeklyPoDate']);
        $cowObj->setAmount($params['amount']);
        $cowObj->setStatus(0);
        $cowObj->setProjectedPaymentDate($params['projectedPaymentDate']);
        $cowObj->setCustomerReference($params['customerReference']);
        $cowObj->setCreatedOn(new \DateTime());
        $cowObj->setUpdatedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($cowObj);
        $em->flush();

        return $cowObj;
    }

    /**
     * courier PO weekly update
     * @author vinh.nguyen
     */
    public function update($params)
    {
        $cwObj = $this->findOneBy(array('id' => $params['id']));
        if( null == $cwObj )
            return null;

        $cwObj->setAmountPaid(str_replace(",","",$params['amountPaid']));
        $cwObj->setRemark($params['remark']);
        $cwObj->setStatus(1); //on update, the status will be always true
        $cwObj->setUpdatedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($cwObj);
        $em->flush();

        return $this->getDetailBy($params);
    }

    /**
     * get courier PO weekly detail
     * @author  vinh.nguyen
     */
    public function getDetailBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("cw.id,
                cw.amount,
                cw.amountPaid,
                cw.remark,
                cw.status,
                cw.createdOn
            ")
            ->addSelect("cr.friendlyName as name,
                 cr.courierRateCode,
                 ".Constant::USER_TYPE_DELIVERY." as userType
             ")
            ->from('UtilBundle:CourierPoWeekly', 'cw')
            ->leftJoin('UtilBundle:CourierPoDaily', 'cd', 'WITH', 'cd.poWeekly = cw.id')
            ->leftJoin('cd.courierRate', 'cr')
            ->groupBy('cd.poWeekly')
            ->andWhere("cw.id=:weeklyId")
            ->setParameter("weeklyId", $params['id'])
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * get list courier PO weekly
     * @author  vinh.nguyen
     */
    public function getListBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("cw.id,
                cw.amount,
                cw.amountPaid,
                cw.remark,
                cw.status,
                cw.createdOn
            ")
            ->addSelect("cr.friendlyName as name,
                cr.courierRateCode,
                ".Constant::USER_TYPE_DELIVERY." as userType
            ")
            ->from('UtilBundle:CourierPoWeekly', 'cw')
            ->leftJoin('UtilBundle:CourierPoDaily', 'cd', 'WITH', 'cd.poWeekly = cw.id')
            ->leftJoin('cd.courierRate', 'cr')
            ->andWhere('cw.cycle = :cycle')
            ->setParameter('cycle', $params['cycle'])
            ->groupBy('cd.poWeekly');

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }
	
    public function getMatchedLines($line) 
	{
		$qb = $this->createQueryBuilder("c");
		$qb->where($qb->expr()->eq("c.customerReference", ":customerReference"))
			//->andWhere($qb->expr()->eq("c.amount", $line->getTransactionAmount()))
			->setParameter("customerReference", $line->getCustomerReference())
            ->addOrderBy('c.createdOn', "DESC");
			
		$list = $qb->select("c")->getQuery()->setMaxResults(1)->getOneOrNullResult();
		
		return $list;
	}

    public function listCourierPOWeekly($params)
    {
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
        $startRecord = $perPage*$page;

        $queryBuilder = $this->createQueryBuilder('cw')
            ->select('cw')
            ->addSelect('i.invoiceTotalAmount as tiA')
            ->leftJoin('cw.invoiceUpload' , 'i')
            ->andWhere('cw.amount > 0')
            ->setFirstResult($startRecord)
            ->setMaxResults($perPage);

        if(isset($params['cycle']) && !empty($params['cycle'])) {
            $queryBuilder->andWhere('cw.cycle = :cycle')
            ->setParameter('cycle', $params['cycle']);
        }

        if (!empty($params['term'])) {
            $queryBuilder->andWhere('cw.poNumber LIKE :term');
            $queryBuilder->setParameter('term', '%' . $params['term'] . '%');
        }
		
        if (isset($params['minAmount']) && is_numeric($params['minAmount'])) {
			$queryBuilder->andWhere("cw.amount >= :minAmount");
            $queryBuilder->setParameter('minAmount', $params['minAmount']);
        }

        if (isset($params['maxAmount']) && is_numeric($params['maxAmount'])) {
			$queryBuilder->andWhere("cw.amount <= :maxAmount");
            $queryBuilder->setParameter('maxAmount', $params['maxAmount']);
        }

        if (isset($params['status']) && is_numeric($params['status'])) {
            $queryBuilder->andWhere('cw.status=:status');
            $queryBuilder->setParameter('status', $params['status']);
        }

        $sort  = 'cw.poNumber';
        $order = 'desc';

        if (!empty($params['sorting'])) {
            list($sort, $order) = explode('_', $params['sorting']);
            $queryBuilder->orderBy($sort, $order);
        } else {
            $queryBuilder->orderBy($sort, $order);
        }

        $query = $queryBuilder->getQuery();
        $paginator = new Paginator($query, false);

        $weeklyId = 0;
        foreach ($paginator as $value) {
            $item = $value[0];
            $weeklyId = $item->getId();
        }

        $totalResult = count($paginator);
        $totalPages  = $totalResult/$perPage;

        $result = array(
            'sort'  => $sort,
            'order' => $order,
            'totalResult' => $totalResult,
            'totalPages' => $totalPages,
            'data'  => $paginator,
            'weeklyId' => $weeklyId
        );

        return $result;
    }

    /*
    * author bien
    * get po last week
    */
    public function getXeroWeeklyStatmentCheck($cycle){

        $queryBuilder = $this->createQueryBuilder('phw');
        $queryBuilder
            ->innerJoin('phw.invoiceUpload','iv')
            ->andWhere($queryBuilder->expr()->eq("phw.cycle", "'".$cycle."'"))
            ->setMaxResults(1)
            ->getQuery();
        return $queryBuilder->getQuery()->getOneOrNullResult();

    }

    public function updateExceptionForNextWeek(CourierPoWeekly $line, $input)
    {
        if (empty($line)) {
            return;
        }

        $cycleToDate = $line->getCycleToDate();
        if (!$cycleToDate) {
            return;
        }

        $cycle = $cycleToDate->modify('+1 day')->format('Y.W');
        $data = $this->findOneBy(array('cycle' => $cycle));

        if (!$data) {
            return;
        }

        $exceptionPoWeekly = $data->getExceptionPoWeekly();
        $data->setExceptionPoWeekly($exceptionPoWeekly + $input);

        $this->getEntityManager()->persist($data);

        $this->updateExceptionForNextWeek($data, $input);
    }

    public function updateWeeklyPoList()
    {
        $em = $this->getEntityManager();

        $queryBuilder = $this->createQueryBuilder('cw')
            ->orderBy('cw.cycleToDate', 'asc');

        $list = $queryBuilder->getQuery()->getResult();
        foreach ($list as $value) {
            $daily = $value->getPoDaily();
            if (0 == count($daily)) {
                continue;
            }

            $totalAmount = $totalAmountPaid = $totalOutStandingAmount = $exceptionPoWeekly = 0;
            $isPaid = true;
            foreach ($daily as $item) {
                $amount = $item->getAmount();
                $totalAmount += $amount;

                $amountPaid = $item->getAmountPaid();
                $totalAmountPaid += $amountPaid;

                $outStandingAmount = $amount - $amountPaid;
                $item->setOutStandingAmount($outStandingAmount);

                if ($item->getIsExcludePayment()) {
                    $exceptionPoWeekly += $outStandingAmount;
                }

                $em->persist($item);

                if (1 != $item->getStatus()) {
                    $isPaid = false;
                }
            }

            $totalOutStandingAmount = $totalAmount - $totalAmountPaid;

            $value->setAmount($totalAmount);
            $value->setAmountPaid($totalAmountPaid);
            $value->setExceptionPoWeekly($exceptionPoWeekly);
            $value->setOutStandingAmount($totalOutStandingAmount);

            if ($isPaid) {
                $value->setStatus(1);
            }

            $em->persist($value);
        }

        $em->flush();
    }
    

    public function getListDoctorStatementLineForInstruction($id)
    {
        $queryBuilder = $this->createQueryBuilder('cw');
        $queryBuilder ->select('sum(d.amount) as amount, iv.invoiceNumber as invoiceNumber, iv.receiveDate as receiveDate, cw.customerReference as customerReference')
            ->innerJoin('cw.dailies', 'd')
            ->innerJoin('cw.invoiceUpload', 'iv')
            ->where($queryBuilder->expr()->eq('cw.id',$id))
            ->andWhere($queryBuilder->expr()->isNull('d.isExcludePayment'))
            ->andWhere($queryBuilder->expr()->in('cw.status',[0,3]) )
            ->groupBy('cw.id');


        $result = $queryBuilder->getQuery()->getOneOrNullResult();

        return $result;
    }
    /*
    * author Bien
    * get list line exception for export UOB
    */
    public function getListDoctorStatementLineForInstructionException($ids)
    {
        if(empty($ids))
        {
            return [];
        }
        $queryBuilder = $this->createQueryBuilder('cw');
        $queryBuilder ->select('d.amount as amount, iv.invoiceNumber as invoiceNumber, iv.receiveDate as receiveDate, d.customerReference as customerReference')
            ->innerJoin('cw.dailies', 'd')
            ->innerJoin('d.invoiceUpload', 'iv')
            ->where($queryBuilder->expr()->in('d.id',$ids))
            ->andWhere($queryBuilder->expr()->isNotNull('d.isExcludePayment'))
            ->andWhere($queryBuilder->expr()->in('d.status',[0,3]) )
            ->andWhere($queryBuilder->expr()->eq('d.issueStatus',1))
            ->andWhere($queryBuilder->expr()->gt('d.amount',0))
            ->groupBy('d.id');


        $result = $queryBuilder->getQuery()->getResult();

        return $result;
    }

    public function getAvailableCourierPoWeekly()
    {
        $lastWeek = new \DateTime();
        $lastWeek->modify("last week");

        $week  = $lastWeek->format("Y-m-d");
        $dates = Common::getWeek($week);

        //get daily items
        $dailyItems = $this->getEntityManager()->getRepository('UtilBundle:CourierPoDaily')->getPODailyBy($dates);

        return $dailyItems;
    }
}

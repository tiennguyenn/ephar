<?php

namespace UtilBundle\Repository;

use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use DoctrineExtensions\Query;
use UtilBundle\Entity\CourierPoDaily;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;

/**
 * CourierPoDailyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourierPoDailyRepository extends EntityRepository
{
    /**
    * create new
    * @author vinh.nguyen
    */
    public function create($params)
    {
        $codObj = $this->findOneBy(array(
            'poDate' => $params['poDate'],
            'poNumber' => $params['poNumber']
        ));
        if($codObj == null)
           $codObj = new CourierPoDaily();

        $codObj->setCourierRate($params['courierRate']);
        $codObj->setPoDate($params['poDate']);
        $codObj->setCycle($params['cycle']);
        $codObj->setPoNumber($params['poNumber']);
        $codObj->setAmount($params['amount']);
        $codObj->setExcludeGSTAmount($params['excludeGSTAmount']);
        $codObj->setGstAmount($params['gstAmount']);
        $codObj->setCustomerReference($params['customerReference']);
        $codObj->setCreatedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($codObj);
        $em->flush();

        return $codObj;
    }

    /**
     * update
     * @author vinh.nguyen
     */
    public function update($params)
    {
        $codObj = $this->findOneBy(array('id' => $params['id']));
        if( null == $codObj )
            return null;

        $codObj->setPoWeekly($params['poWeekly']);

        $em = $this->getEntityManager();
        $em->persist($codObj);
        $em->flush();

        return $codObj->getId();
    }

    /**
     * update on list
     * @author vinh.nguyen
     */
    public function updateBy($weeklyObj, $listDaily)
    {
        $result = array();
        if(!empty($listDaily)) {
            foreach ($listDaily as $daily) {
                $result[] = $this->update(array(
                    'id'       => $daily['id'],
                    'poWeekly' => $weeklyObj
                ));
            }
        }
        return $result;
    }

    public function getDailyBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("pod.id,
                pod.poDate,
                pod.cycle,
                pod.poNumber,
                pod.excludeGstAmount,
                pod.gstAmount,
                pod.amount,
                cr.id as courierId,
                cr.friendlyName as courierName,
                cr.courierRateCode")
            ->from('UtilBundle:CourierPoDaily', 'pod')
            ->leftJoin('pod.courierRate', 'cr')
            ->andWhere('pod.courierRate = :courierRate')
            ->andWhere('pod.poDate >= :start AND pod.poDate <= :end')
            ->setParameter('start', $params['start']->format("Y-m-d"))
            ->setParameter('end', $params['end']->format("Y-m-d"))
            ->setParameter('courierRate', $params['courierRate']);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * get list PO daily in week
     * @author vinh.nguyen
     */
    public function getPODailyBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("pod.id,
                pod.poDate,
                pod.cycle,
                pod.poNumber,
                pod.excludeGstAmount,
                pod.gstAmount,
                pod.amount,
                cr.id as courierId,
                cr.friendlyName as courierName,
                cr.courierRateCode,
                cr.email as courierEmail
            ")
            ->from('UtilBundle:CourierPoDaily', 'pod')
            ->leftJoin('pod.courierRate', 'cr')
            ->andWhere('pod.poDate >= :start AND pod.poDate <= :end')
            ->setParameter('start', $params['start']->format("Y-m-d"))
            ->setParameter('end', $params['end']->format("Y-m-d H:i:s"));

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * get order info
     * @author vinh.nguyen
     */
    public function getRxBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("rx.id as rxId,
                b.id as boxId,
                rx.shippingCost,
                rx.customTaxByCourier,
                rx.igPermitFeeByCourier,
                a.id as shippingAddressId,
                ci.id as cityId,
                co.id as countryId,
                (case when cr.id is null then cr1.id else cr.id end) as courierRateId,
                (case when cr.courierRateCode is null then cr1.courierRateCode else cr.courierRateCode end) as courierRateCode,
                (case when cr.friendlyName is null then cr1.friendlyName else cr.friendlyName end) as courierName,
                (case when cr.email is null then cr1.email else cr.email end) as courierEmail,
                (case when c.isGst is null then c1.isGst else c.isGst end) as isGst,
                cl.postCodeShippingAddress
            ")
            ->addSelect("cl.id as dailyLineId")
            ->from('UtilBundle:CourierPoDailyLine', 'cl')
            ->innerJoin('cl.box', 'b')
            ->innerJoin('b.rx', 'rx')
            ->innerJoin('rx.shippingAddress', 'a')
            ->innerJoin('a.city', 'ci')
            ->innerJoin('ci.country', 'co')
            ->leftJoin('UtilBundle:CourierRate', 'cr', 'WITH', 'cr.destinationCountry = co.id')
            ->leftJoin('UtilBundle:CourierRate', 'cr1', 'WITH', 'cr1.destinationCountry is null')
            ->leftJoin('cr.courier', 'c')
            ->leftJoin('cr1.courier', 'c1')
            ->andWhere('date(cl.createdOn) = :start')
            ->andWhere('cl.postCodeShippingAddress between cr.fromPostcode AND cr.toPostcode OR cl.postCodeShippingAddress = 1')            
            ->setParameter('start', $params['start']->format("Y-m-d"))
            ;

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * get box info
     * @author vinh.nguyen
     */
    public function getBoxBy($boxId, $weighingArea='Pharmacy')
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("rx.id, 
                rx.orderPhysicalNumber, 
                rx.shippingCost, 
                rx.customTaxByCourier,
                rx.igPermitFeeByCourier,                
                co.id as countryId,
                b.id as boxId, 
                b.trackingNumber, 
                bw.weight
            ")
            ->from('UtilBundle:Box', 'b')
            ->innerJoin('b.rx', 'rx')
            ->innerJoin('rx.shippingAddress', 'a')
            ->innerJoin('a.city', 'ci')
            ->innerJoin('ci.country', 'co')
            ->leftJoin('UtilBundle:BoxWeight', 'bw', 'WITH', 'bw.box=b.id AND bw.weighingArea=:weighingArea')
            ->andWhere('b.id IN(:boxId)')
            ->orderBy('b.id', 'ASC')
            ->setParameter("boxId", $boxId)
            ->setParameter("weighingArea", $weighingArea);

        return $qb->getQuery()->getArrayResult();
    }
    
    /**
    * get Daily PO Running Number
    */
    public function getPORunningNumber($poDate)
    {
        $number = 1;
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("pod.poNumber")
            ->from('UtilBundle:CourierPoDaily', 'pod')
            ->andWhere('MONTH(pod.poDate) = :month and YEAR(pod.poDate) = :year')
            ->setParameter('month', $poDate->format("m"))
            ->setParameter('year', $poDate->format("Y"))
            ->orderBy('pod.createdOn', 'DESC')
            ->orderBy('pod.id', 'DESC')
            ->setMaxResults(1);

        $poNumber = $qb->getQuery()->getOneOrNullResult();

        if($poNumber != null) {
            $arrNumber = explode('/', $poNumber['poNumber']);
            $number = (int) end($arrNumber) + 1;
        }
        return sprintf("%'.02d", $number);
    }

    public function listCourierPODaily($params)
    {
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
        $startRecord = $perPage*$page;
        $weeklyId = isset($params['weeklyId']) ? $params['weeklyId'] : 0;

        $queryBuilder = $this->createQueryBuilder('cw')
            ->select('cw')
            ->addSelect('w.poNumber as wwpr')
            ->addSelect('i.invoiceTotalAmount as tiA')
            ->innerJoin('cw.poWeekly' , 'w')
            ->leftJoin('cw.invoiceUpload', 'i')
            ->where('cw.amount > 0')
            ->orWhere('cw.outStandingAmount > 0')
            ->setFirstResult($startRecord)
            ->setMaxResults($perPage);

        if ($weeklyId) {
            $queryBuilder->andWhere('cw.poWeekly = :poWeekly')
                ->setParameter('poWeekly', $weeklyId);
        }

        if(isset($params['cycle']) && !empty($params['cycle'])) {
            $queryBuilder->andWhere('cw.cycle = :cycle')
            ->setParameter('cycle', $params['cycle']);
        }

        if (isset($params['isExclude'])) {
            $queryBuilder->andWhere('cw.isExcludePayment = :isExclude')
                ->setParameter('isExclude', $params['isExclude']);
        } else {
            $queryBuilder->andWhere('cw.isExcludePayment IS NULL');
        }

        if (!empty($params['term'])) {
            $queryBuilder->andWhere('cw.poNumber LIKE :term');
            $queryBuilder->setParameter('term', '%' . $params['term'] . '%');
        }

        if (isset($params['minAmount']) && $params['minAmount'] != '') {
            $queryBuilder->andWhere('cw.amount>=:minAmount');
            $queryBuilder->setParameter('minAmount', $params['minAmount']);
        }

        if (isset($params['maxAmount']) && $params['maxAmount'] != '') {
            $queryBuilder->andWhere('cw.amount<=:maxAmount');
            $queryBuilder->setParameter('maxAmount', $params['maxAmount']);
        }

        if (isset($params['status']) && is_numeric($params['status'])) {
			$queryBuilder->andWhere($queryBuilder->expr()->eq('cw.status', $params['status']));
        }
		
		if (isset($params['ids']) && !empty($params['ids'])) {
			$queryBuilder->andWhere($queryBuilder->expr()->in('cw.id', ':ids'))
						->setParameter('ids', $params['ids']);
		}
		
        $sort  = 'cw.poNumber';
        $order = 'desc';

        if (!empty($params['sorting'])) {
            list($sort, $order) = explode('_', $params['sorting']);
            $queryBuilder->orderBy($sort, $order);
        } else {
            $queryBuilder->orderBy($sort, $order);
        }

        $query = $queryBuilder->getQuery();
        $paginator = new Paginator($query, false);

        $totalResult = count($paginator);
        $totalPages  = $totalResult/$perPage;

        foreach ($paginator as $item) {
            $value = $item[0];
            $poWeekly = $value->getPoWeekly();
            if ($poWeekly) {
                $weeklyId = $poWeekly->getId();
            }
            break;
        }

        $result = array(
            'sort'  => $sort,
            'order' => $order,
            'totalResult' => $totalResult,
            'totalPages' => $totalPages,
            'data'  => $paginator,
            'weeklyId' => $weeklyId
        );

        return $result;
    }

    public function listCourierPODailyByCriteria($criteria)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        if (isset($criteria['poWeeklyId'])) {
            $qb->select('w')
                ->from('UtilBundle:CourierPoWeekly', 'w')
                ->where('w.id=:id')
                ->andWhere('w.status IN (0,3)')
                ->setParameter('id', $criteria['poWeeklyId']);
        } else {
            $poDailyId = isset($criteria['poDailyId']) ? $criteria['poDailyId'] : array();
            $qb->select('d')
                ->from('UtilBundle:CourierPoDaily', 'd')
                ->where('d.id IN (:poDailyId)')
                ->andWhere('d.isExcludePayment IS NOT NULL')
                ->andWhere('d.status IN (0,3)')
                ->setParameter('poDailyId', $poDailyId, Connection::PARAM_STR_ARRAY);
			
			if (isset($criteria['hasInvoice']) && $criteria['hasInvoice']) {
				$qb->andWhere('d.invoiceUpload IS NOT NULL');
			}
			
			if (isset($criteria['issueStatus'])) {
				$qb->andWhere('d.issueStatus = ' . $criteria['issueStatus']);
			}
        }

       return $qb->getQuery()->getResult();
    }

    public function getCourierPODaily($id)
    {
        $queryBuilder = $this->createQueryBuilder('cw')
            // ->addSelect('r')
            // ->leftJoin('cw.courierRate', 'r')
            // ->innerJoin('r.courier', 'c')
            ->where('cw.id = :id')
            ->setParameter('id', $id)
            ->setMaxResults(1);       

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }


    /*
     * get matching line
     * author :bien
     */

    public  function getMatchedLines($line)
    {
        $qb = $this->createQueryBuilder("c");
        $qb->where($qb->expr()->eq("c.customerReference", ":customerReference"))
            ->setParameter("customerReference", $line->getCustomerReference())
            ->addOrderBy('c.createdOn', "DESC");
        $line = $qb->select("c")->getQuery()->setMaxResults(1)->getOneOrNullResult();

        return $line;
    }
}

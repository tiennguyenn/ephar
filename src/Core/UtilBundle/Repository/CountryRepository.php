<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Entity\Country;

/**
 * CountryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CountryRepository extends EntityRepository {

    /**
     * get list countries
     * @return array
     */
    public function getList() {
        $queryBuilder = $this->createQueryBuilder('f');

        //count total items
        $totalResult = count($queryBuilder->getQuery()->getArrayResult());

        $query = $queryBuilder
                ->setFirstResult(0)
                ->setMaxResults(300);

        $resultQuery = $query->getQuery()->getArrayResult();

        return array(
            'totalResult' => $totalResult,
            'data' => $resultQuery
        );
    }

    /*
     * return country list with Singapore, Malaysia and Indonesia as top result
     *
     * @params $returnArray if true, this method will return an array, instead entity object
     * */
    public function getByPreferredCountry($returnArray = false)
    {
        $query = $this->createNativeNamedQuery('get_by_preferred_country');

        if ($returnArray) {
            return $query->getArrayResult();
        }

        return $query->getResult();
    }

    public function getListContry() {
        $countries = $this->findAll();
        $result = array();
        foreach ($countries as $country) {
            $result[$country->getId()] = $country->getName();
        }
        
        return $result;
    }

    /*
     * get list country for phone location select box
     */
    public function getListCountryForPhone() {
        $queryBuilder = $this->createQueryBuilder('c')
                ->select('c.id,c.name,c.code,c.phoneCode')
                ->getQuery()
                ->getArrayResult();
        
        return $queryBuilder;
    }
    
    /*
     * get list city by country
     */
    public function getCityByCountry($id)
    {
        $country = $this->find($id);
        $cities = $country->getCities();
        $result = array();
        foreach ($cities as $city) {
            $result[$city->getId()] = $city->getName();
        }
        
        return $result;                
    }

    /*
  * get list city by country
  */
    public function getCityByCountryCC($id)
    {
        $country = $this->find($id);
        $cities = $country->getCities();
        $result = array();
        foreach ($cities as $city) {
            $result[] = ['id' => $city->getId(),'name' => $city->getName()];
        }

        return $result;
    }
    /**
     * Get Customs Clearance Admin Fee
     * @param type $countryCode
     * @return type
     */
    public function getCCAdminPercentage($countryCode) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f.customsClearancePlatformPercentage as ccPercentage')
                ->where('f.code = (:countryCode)')
                ->setParameter('countryCode', $countryCode)
                ->setMaxResults(1);
        $result = $queryBuilder->getQuery()->getOneOrNullResult();
        return $result;
    }

    /**
     * get doctor's country name
     * @author  thu.tranq
     * @return string
     */
    public function getPlatformSettingCountryName() {
        $queryBuilder = $this->createQueryBuilder('c');
        $queryBuilder->select('c.name')
                ->innerJoin('UtilBundle:PlatformSettings', 'ps', 'WITH', 'ps.operationsCountryId = c.id');
        $result = $queryBuilder->getQuery()->getOneOrNullResult();

        if (isset($result)) {
            return $result['name'];
        }
        return '';
    }

    /**
     * Get Threshold Tax by country code
     * @param type $countryCode
     * @return type
     */
    public function getThresholdTaxByCountryCode($countryCode) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f.thresholdTax')
                ->where('f.code = (:countryCode)')
                ->setParameter('countryCode', $countryCode)
                ->setMaxResults(1);
        $result = $queryBuilder->getQuery()->getOneOrNullResult();

        if (isset($result['thresholdTax'])) {
            return $result['thresholdTax'];
        }

        return null;
    }

}

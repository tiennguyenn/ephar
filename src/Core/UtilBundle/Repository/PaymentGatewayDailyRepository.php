<?php

namespace UtilBundle\Repository;

use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use DoctrineExtensions\Query;
use UtilBundle\Entity\PaymentGatewayDaily;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;
use UtilBundle\Utility\Utils;

/**
 * PaymentGatewayDailyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentGatewayDailyRepository extends EntityRepository
{
    /**
     * create new
     */
    public function create($params)
    {
        $obj = $this->findOneBy(array('actualSettelementDate' => $params['actualSettelementDate']));
        if($obj == null)
            $obj = new PaymentGatewayDaily();

        $obj->setStartPeriod($params['startPeriod']);
        $obj->setEndPeriod($params['endPeriod']);
        $obj->setExpectedSettlementDate($params['expectedSettlementDate']);
        $obj->setActualSettelementDate($params['actualSettelementDate']);
        $obj->setExpectedAmountDue($params['expectedAmountDue']);
        $obj->setPaymentGatewayAmountDue($params['paymentGatewayAmountDue']);
        $obj->setBankSettlement($params['bankSettlement']);
        $obj->setCreatedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($obj);
        $em->flush();

        return $obj;
    }

    /**
     * set data daily
     */
    public function setDataDaily($settlementDate, $transactionDate)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("sum(p.expectedAmount) as totalExpectedAmount,
            sum(p.settlementAmount) as totalSettlementAmount,
            p.settlementDate")
            ->from('UtilBundle:PaymentGatewaySettlement', 'p')
            ->where('DATE(p.settlementDate) = :date')
            ->setParameter('date', $settlementDate->format('Y-m-d'))
            ->groupBy('p.settlementDate')
        ;

        $result = $qb->getQuery()->getOneOrNullResult();
        if($result) {
            $period['start'] = $settlementDate;
            $period['end']   = $settlementDate;

            $params = array(
                'startPeriod'             => $transactionDate,
                'endPeriod'               => $transactionDate,
                'expectedSettlementDate'  => $settlementDate,
                'actualSettelementDate'   => $settlementDate,
                'expectedAmountDue'       => $result['totalExpectedAmount'],
                'paymentGatewayAmountDue' => $result['totalSettlementAmount'],
                'bankSettlement'          => $this->getBankSettlement($period)
            );
            $this->create($params);
        }
    }

    /**
     * get list
     */
    public function getListBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder('p');
        $qb->select("p")
            ->from('UtilBundle:PaymentGatewayDaily', 'p');

        if(!empty($params['date1'])) {
            $d1 = new \DateTime($params['date1']);
            $qb->andWhere('date(p.expectedSettlementDate) = :d1')
                ->setParameter('d1', $d1->format("Y-m-d"));
        }
        if(!empty($params['date2'])) {
            $d2 = new \DateTime($params['date2']);
            $qb->andWhere('date(p.actualSettelementDate) = :d2')
                ->setParameter('d2', $d2->format("Y-m-d"));
        }
        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());
        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                $qb->orderBy($arrSort[0], strtoupper($arrSort[1]));
            }
        }
        //pagination
        $perPage = ($params['perPage'] > 0) ? $params['perPage'] : Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0) ? $params['page'] : Constant::PAGE_DEFAULT;
        $qb->setFirstResult($perPage * $page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages' => ceil($totalResult / $perPage),
            'data' => $qb->getQuery()->getArrayResult()
        );
    }

    /**
     * get bankSettlement
     * bank_settlement_upload_line.status ==1 (paid)
     * payment_gateway_daily.start_period <= bank_settlement_upload_line.post_date <=payment_gateway_daily.end_period
     */
    public function getBankSettlement($period)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("SUM(b.transactionAmount) as total")
            ->from('UtilBundle:BankSettlementUploadLine', 'b')
            ->where('b.status = 1 AND b.postDate >= :start AND b.postDate <= :end')
            ->setParameter('start', $period['start']->format('Y-m-d'))
            ->setParameter('end', $period['end']->format('Y-m-d'));

        $result = $qb->getQuery()->getOneOrNullResult();

        return !empty($result['total'])? $result['total']: 0;
    }


    public function getItemByExpectedDate($date){
        $qb = $this->createQueryBuilder('p');
        $qb->where($qb->expr()->eq('date(p.expectedSettlementDate)',"'".$date."'" ));
        return $qb->getQuery()->getOneOrNullResult();

    }
}
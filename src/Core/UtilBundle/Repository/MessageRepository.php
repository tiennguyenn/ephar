<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\Connection;
use UtilBundle\Utility\Constant;
use UtilBundle\Entity\Message;
use UtilBundle\Entity\MessageContent;
use UtilBundle\Entity\MessageAttachment;
use \Datetime;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{

    /**
     * insert
     * @param type $params
     */
    public function insert($params) {
        try {
            // Rx Refill Reminder
            $em = $this->getEntityManager();
            $rxRefillObj = $em->getRepository('UtilBundle:RxRefillReminder')->findByRxId($params['rxId']);
            if ($rxRefillObj == null) {
                return false;
            }
            // Message Content
            $messageContent = new MessageContent();
            if ($params['refillStatus'] == Constant::REFILL_STATUS_YES) {
                $messageContent->setSubject(Constant::MESSAGE_CONTENT_SUBJECT);
                $messageContent->setBody(Constant::MESSAGE_CONTENT_BODY_YES);
                $messageContent->setType(Constant::MESSAGE_CONTENT_TYPE_YES);
            } else if ($params['refillStatus'] == Constant::REFILL_STATUS_MAYBE) {
                $messageContent->setSubject(Constant::MESSAGE_CONTENT_SUBJECT);
                $messageContent->setBody(Constant::MESSAGE_CONTENT_BODY_MAYBE);
                $messageContent->setType(Constant::MESSAGE_CONTENT_TYPE_MAYBE);
            } else if ($params['refillStatus'] == Constant::REFILL_STATUS_NO) {
                $messageContent->setSubject(Constant::MESSAGE_CONTENT_SUBJECT);
                $messageContent->setBody(Constant::MESSAGE_CONTENT_BODY_NO);
                $messageContent->setType(Constant::MESSAGE_CONTENT_TYPE_NO);
            }
            if(isset($params['rxId']) && !empty($params['rxId'])) {
                $messageContent->setEntityId($params['rxId']);
            }
            $messageContent->setCreatedOn(new \DateTime());
            // Message
            $message = new Message();
            $message->setSender($params['sender']);
            $message->setSenderName($params['senderName']);
            $message->setSenderEmail($params['senderEmail']);
            $message->setReceiver($params['receiver']);
            $message->setReceiverName($params['receiverName']);
            $message->setReceiverEmail($params['receiverEmail']);
            $message->setSentDate(new \DateTime());
            $message->setStatus(Constant::ZERO_NUMBER);
            $message->setContent($messageContent);
            // Rx Refill Reminder
            $rxRefillObj->setMessage($message);
            // Save DB
            $em->persist($messageContent);
            $em->persist($message);
            $em->flush();
            $em->persist($rxRefillObj);
            $em->flush();
            return true;
        } catch (Exception $e) {
            return false;
        }
    }

    /**
     * create new
     */
    public function create($params, $attachments = [])
    {
        $message = isset($params['id'])? $this->find($params['id']): new Message();
        $message->setContent($params['content']);
        $message->setSender($params['sender']);
        $message->setSenderName($params['senderName']);
        $message->setSenderEmail($params['senderEmail']);

        if(isset($params['receiver']))
            $message->setReceiver($params['receiver']);
        if(isset($params['receiverName']))
            $message->setReceiverName($params['receiverName']);
        if(isset($params['receiverEmail']))
            $message->setReceiverEmail($params['receiverEmail']);
        if(isset($params['receiverType']))
            $message->setReceiverType($params['receiverType']);
        if(isset($params['receiverGroup']))
            $message->setReceiverGroup($params['receiverGroup']);
        if(isset($params['status']))
            $message->setStatus($params['status']);
        if(isset($params['sentDate']))
            $message->setSentDate($params['sentDate']);
        if(isset($params['parentMessageId']))
            $message->setParentMessageId($params['parentMessageId']);

        if(!empty($attachments)){
            foreach ($attachments as $attachment) {
                $arrAtt = explode('/', $attachment);
                $objAtt = new MessageAttachment();
                $objAtt->setMessage($message);
                $objAtt->setUrlAttachment($attachment);
                $objAtt->setName(end($arrAtt));
                $objAtt->setCreatedOn(new \DateTime());
                $message->addAttachment($objAtt);
            }
        }

        $em = $this->getEntityManager();
        $em->persist($message);
        $em->flush();
        return $message->getId();
    }

    /**
     * update mark as read
     */
    public function markAsRead($id)
    {
        $msgObj = $this->find($id);
        if($msgObj == null)
            return null;

        $msgObj->setReadDate(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($msgObj);
        $em->flush();

        return $msgObj->getId();
    }

    /**
     * update status {0: inbox, 1: sent, 2: draft, 3: spam}
     * @author vinh.nguyen
     */
    public function updateStatus($id, $status)
    {
        $msgObj = $this->find($id);
        if($msgObj == null)
            return null;

        $msgObj->setStatus($status);

        $em = $this->getEntityManager();
        $em->persist($msgObj);
        $em->flush();

        return $msgObj->getId();
    }

    /**
     * update deleted
     */
    public function deleted($id, $type=null)
    {
        $msgObj = $this->find($id);
        if($msgObj == null)
            return null;

        if($type == 'sent' || $type == 'draft')
            $msgObj->setDeletedOn(new \DateTime());
        else
            $msgObj->setReceiverDeletedOn(new \DateTime());

        $em = $this->getEntityManager();
        $em->persist($msgObj);
        $em->flush();

        return $msgObj->getId();
    }

    /**
     * get detail
     */
    public function getDetail($userId, $id, $type=null)
    {
        $em = $this->getEntityManager();
        $user = $this->getRelatedUsers($userId);
        $qb = $em->createQueryBuilder();
        $qb->select("m.id, 
                m.parentMessageId,
                s.id as senderId,
                m.senderName, 
                m.senderEmail, 
                r.id as receiverId,
                m.receiverName, 
                m.receiverEmail, 
                m.receiverGroup,
                m.sentDate, 
                m.readDate, 
                m.status,
                c.id as contentId,
                c.subject, 
                c.body, 
                c.type, 
                c.createdOn,
                c.entityId,
                m.deletedOn,
                m.receiverDeletedOn
            ")
            ->from('UtilBundle:Message', 'm')
            ->leftJoin('m.sender', 's')
            ->leftJoin('m.receiver', 'r')
            ->innerJoin('m.content', 'c', 'WITH', "c.type is null OR c.type = 'reminder_no'")
            ->where('m.id = :id')
            ->andWhere('m.sender IN(:user) OR m.receiver IN(:user)')
            ->setParameter('id', $id)
            ->setParameter('user', $user, Connection::PARAM_INT_ARRAY);

        $result = $qb->getQuery()->getOneOrNullResult();

        if(!empty($result)) {
            $result['attachment'] = $this->getAttachmentBy($id);
            $result['relevantReceiver'] = $this->getRelevantReceiverBy($result['contentId'], 2);
            $result['relevantParent'] = $this->getDetail($userId, $result['parentMessageId']);
            
            if(!empty($result['receiverGroup']))
                $result['receiverGroup'] = ucwords(str_replace('_', ' ', $result['receiverGroup']));

            if($result['type'] == Constant::MESSAGE_CONTENT_TYPE_NO && !empty($result['entityId'])) {

                $result['reminderInfo'] = $this->getReminderInfo($result['entityId']);
            }
        }

        return $result;
    }

    public function getReminderInfo($rxId)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select("rx.id, 
            pi.title,
            (CASE
                    WHEN pi.lastName is not null and pi.lastName is not null
                        THEN CONCAT(pi.firstName, ' ' ,  pi.lastName)
                    WHEN pi.firstName is not null and pi.lastName is null
                        THEN pi.firstName
                    WHEN pi.firstName is null and pi.lastName is not null
                        THEN pi.lastName
                    ELSE ' '
                END) as doctorName,
            (CASE
                    WHEN pi2.lastName is not null and pi2.lastName is not null
                        THEN CONCAT(pi2.firstName, ' ' ,  pi2.lastName)
                    WHEN pi2.firstName is not null and pi2.lastName is null
                        THEN pi2.firstName
                    WHEN pi2.firstName is null and pi2.lastName is not null
                        THEN pi2.lastName
                    ELSE ' '
                END) as patientName,
                rx.paidOn
            ")
            ->from('UtilBundle:Rx', 'rx')
            ->innerJoin('rx.doctor', 'd')
            ->innerJoin('d.personalInformation', 'pi')
            ->innerJoin('rx.patient', 'p')
            ->innerJoin('p.personalInformation', 'pi2')
            ->where('rx.id =:rxId')
            ->setParameter('rxId', $rxId)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getAttachmentBy($messageId, $first=false)
    {
        $message = $this->find($messageId);
        if($message == null)
            return null;
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("a.id, a.urlAttachment, a.name")
            ->from('UtilBundle:MessageAttachment', 'a')
            ->where('a.message=:message')
            ->setParameter('message', $message);

        if($first) {
            $qb->setMaxResults(1);
            return $qb->getQuery()->getOneOrNullResult();
        }

        return $qb->getQuery()->getArrayResult();
    }

    public function getRelevantReceiverBy($contentId, $messageId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("
                m.receiverName, 
                m.receiverEmail,
                m.receiverType,
                m.receiverGroup
            ")
            ->from('UtilBundle:Message', 'm')
            ->innerJoin('m.content', 'c')
            ->where('m.id !=:messageId
                AND m.receiver is not null 
                AND c.id=:contentId')
            ->setParameter('messageId', $messageId)
            ->setParameter('contentId', $contentId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * get list
     */
    public function getList($params)
    {
        $em = $this->getEntityManager();
        $user = $this->getRelatedUsers($params['userId']);
        if($params['sort_name'] == 'createdOn') {
            $sortName = 'c.createdOn';
        } elseif($params['sort_name'] == 'subject') {
            $sortName = 'c.subject';
        } else {
            $sortName = 'm.'.$params['sort_name'];
        }

        $qb = $em->createQueryBuilder();
        $qb->select('m.id, 
                s.id as senderId,
                m.senderName, 
                m.senderEmail, 
                r.id as receiverId,
                m.receiverName, 
                m.receiverEmail, 
                m.receiverGroup,
                m.sentDate as sentDate, 
                m.readDate,
                m.status,
                c.subject as subject,
                c.createdOn,
                m.deletedOn,
                m.receiverDeletedOn
            ')
            ->from('UtilBundle:Message', 'm')
            ->innerJoin('m.content', 'c', 'WITH', "c.type is null OR c.type = 'reminder_no'")
            ->leftJoin('m.sender', 's')
            ->leftJoin('m.receiver', 'r')
            ->orderBy($sortName, $params['sort_order'])
        ;

        //filter: status
        if(isset($params['type'])) {
            switch ($params['type']) {
                case 'sent':
                    $qb->andWhere('m.sender IN(:user)
                        AND m.receiver is not null
                        AND m.deletedOn is null')
                        ->setParameter('user', $user, Connection::PARAM_INT_ARRAY)
                        ->groupBy('m.content');
                    break;
                case 'draft':
                    $qb->andWhere('m.sender IN(:user)
                        AND m.deletedOn is null
                        AND m.status=:status')
                        ->setParameter('user', $user, Connection::PARAM_INT_ARRAY)
                        ->setParameter('status', Constant::MESSAGE_DRAFT); //1
                    break;
                case 'trash':
                    $qb->andWhere('m.sender IN(:user)
                        AND m.deletedOn is not null')
                        ->orWhere('m.receiver IN(:user)
                        AND m.receiverDeletedOn is not null')
                        ->setParameter('user', $user, Connection::PARAM_INT_ARRAY);
                    break;

                default: //inbox
                    $qb->andWhere('m.receiver IN(:user)
                        AND m.receiverDeletedOn is null
                        AND m.status=:status')
                        ->setParameter('user', $user, Connection::PARAM_INT_ARRAY)
                        ->setParameter('status', Constant::MESSAGE_INBOX); //0
                    break;
            }
        }

        //filter: read_date
        if(!empty($params['read_date'])) {
            $qb->andWhere('m.readDate is null');
        }

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        //filter: term
        if(isset($params['term']) && !empty($params['term'])) {
            $term = trim(strtolower($params['term']));
            $qb->andWhere('LOWER(m.senderName) LIKE :term
                OR LOWER(m.senderEmail) LIKE :term
                OR LOWER(m.receiverName) LIKE :term
                OR LOWER(m.receiverEmail) LIKE :term
                OR LOWER(c.subject) LIKE :term
            ')->setParameter('term', '%'. $term .'%');
        }

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        $result = $qb->getQuery()->getArrayResult();
        if(!empty($result)) {
            foreach ($result as &$item) {
                $item['attachment'] = $this->getAttachmentBy($item['id'], true);
            }
        }

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $result
        );
    }

    public function getTotal($userId)
    {
        $result = array();
        $em = $this->getEntityManager();
        $user = $this->getRelatedUsers($userId);

        //inbox
        $qbInbox = $em->createQueryBuilder('m')
            ->select("m.id")
            ->from('UtilBundle:Message', 'm')
            ->innerJoin('m.content', 'c', 'WITH', "c.type is null OR c.type = 'reminder_no'")
            ->andWhere('m.receiver IN(:user)
                AND m.readDate is null
                AND m.status=:status
                AND m.receiverDeletedOn is null')
            ->setParameter('user', $user, Connection::PARAM_INT_ARRAY)
            ->setParameter('status', Constant::MESSAGE_INBOX);
        $result['inbox'] = count($qbInbox->getQuery()->getArrayResult());

        //sent
        /*$qbSent = $em->createQueryBuilder('m')
            ->select("m.id")
            ->from('UtilBundle:Message', 'm')
            ->andWhere('m.sender=:user
                AND m.receiver is not null
                AND m.deletedOn is null')
            ->setParameter('user', $user)
            ->groupBy('m.content');

        $result['sent'] = count($qbSent->getQuery()->getArrayResult());*/

        //draft
        $user = implode(',', $user);
        $qbDraft = $em->createQueryBuilder('m')
            ->select("m.id")
            ->from('UtilBundle:Message', 'm')
            ->innerJoin('m.content', 'c', 'WITH', "c.type is null OR c.type = 'reminder_no'")
            ->andWhere('m.sender=:user
                AND m.status=:status
                AND m.deletedOn is null')
            ->setParameter('user', $user)
            ->setParameter('status', Constant::MESSAGE_DRAFT);
        $result['draft'] = count($qbDraft->getQuery()->getArrayResult());

        //trash
        $qbTrash = $em->createQueryBuilder()
            ->select("m.id")
            ->from('UtilBundle:Message', 'm')
            ->innerJoin('m.content', 'c', 'WITH', "c.type is null OR c.type = 'reminder_no'")
            ->andWhere('m.sender=:user AND m.deletedOn is not null')
            ->orWhere('m.receiver=:user AND m.receiverDeletedOn is not null')
            ->setParameter('user', $user);
        $result['trash'] = count($qbTrash->getQuery()->getArrayResult());

        $result['total'] = $result['inbox'];

        return $result;
    }

    /**
     * suggestion search
     * type: admin, agent, doctor
     */
    public function suggestionSearch($term, $type='admin')
    {
        $term = trim(strtolower($term));
        $lists = array();
        $qb = $this->getEntityManager()->createQueryBuilder();
        //Gmedes Admin, All Agents, All Doctors, Customer Care
        
        
        switch ($type) {
            case 'admin':
                $qb->select("u.id, (CASE WHEN u.firstName IS NOT NULL THEN CONCAT(u.firstName, ' ', u.lastName, ' <', u.emailAddress, '>') ELSE u.emailAddress END) as emailAddress")
                    ->distinct()
                    ->from('UtilBundle:User', 'u')
                    ->join('u.roles', 'role')
                    ->where('LOWER(u.emailAddress) LIKE :term OR LOWER(CONCAT(u.firstName,\' \',u.lastName)) LIKE :name' )
                    ->andWhere('role.id in (1,2,3,4,5,6,8) ')
                    ->setParameter('term', '%'.$term.'%')
                    ->setParameter('name', '%'.$term.'%')
                    ->setFirstResult(0)
                    ->setMaxResults(10);
                $listsU = $qb->getQuery()->getArrayResult();
                $query = $this->getEntityManager()->createQueryBuilder();
                $query->select("ui.id, CONCAT(ui.firstName, ' ', ui.lastName, ' <', ui.emailAddress, '>') as emailAddress")
                    ->distinct()
                    ->from('UtilBundle:Doctor', 'd')
                    ->join('d.personalInformation', 'dp')      
                    ->join('d.user', 'ui')    
                    ->where('LOWER(ui.emailAddress) LIKE :term OR LOWER(CONCAT(dp.firstName,\' \',dp.lastName)) LIKE :name' )
                    ->setParameter('name', '%'.$term.'%')
                    ->setParameter('term', '%'.$term.'%')
                    ->setFirstResult(0)
                    ->setMaxResults(10);
                $listsDoctor = $query->getQuery()->getArrayResult();
                $lists = array_slice(array_merge($listsU, $listsDoctor), 0, 10);
                $lists[] = array('id' => time(), 'emailAddress'=> 'All Doctors');
                $lists[] = array('id' => time() + 1, 'emailAddress'=> 'All Agents');
				$lists[] = array('id' => time() + 2, 'emailAddress'=> 'Customer Care');
                $lists[] = array('id' => time() + 3, 'emailAddress'=> 'Pharmacy Service');
                break;
                
            case 'agent':
                $lists = [];
                $lists[] = array('id' => time(), 'emailAddress'=> 'Gmedes Admin');
                break;
                
            case 'doctor':
                $lists = [];
                $lists[] = array('id' => time(), 'emailAddress'=> 'Gmedes Admin');
                $lists[] = array('id' => time() + 1, 'emailAddress'=> 'Ask the Pharmacist'); //Customer Care
                $lists[] = array('id' => time() + 2, 'emailAddress'=> 'Pharmacy Service');
                break;
                
            case 'customer_care':
                $qb->select("u.id, (CASE WHEN u.firstName IS NOT NULL THEN CONCAT(u.firstName, ' ', u.lastName, ' <', u.emailAddress, '>') ELSE u.emailAddress END) as emailAddress")
                    ->distinct()
                    ->from('UtilBundle:User', 'u')
                    ->join('u.roles', 'role')
                    ->where('LOWER(u.emailAddress) LIKE :term OR LOWER(CONCAT(u.firstName,\' \',u.lastName)) LIKE :name' )
                    ->andWhere('role.id = 1  or role.id = 6')
                    ->setParameter('term', '%'.$term.'%')
                    ->setParameter('name', '%'.$term.'%')
                    ->setFirstResult(0)
                    ->setMaxResults(10);
                $listsU = $qb->getQuery()->getArrayResult();
                $query = $this->getEntityManager()->createQueryBuilder();
                $query->select("ui.id, (CASE WHEN ui.firstName IS NOT NULL THEN CONCAT(ui.firstName, ' ', ui.lastName, ' <', ui.emailAddress, '>') ELSE ui.emailAddress END) as emailAddress")
                    ->distinct()
                    ->from('UtilBundle:Doctor', 'd')
                    ->join('d.personalInformation', 'dp')      
                    ->join('d.user', 'ui')    
                    ->where('LOWER(ui.emailAddress) LIKE :term OR LOWER(CONCAT(dp.firstName,\' \',dp.lastName)) LIKE :name' )
                    ->setParameter('name', '%'.$term.'%')
                    ->setParameter('term', '%'.$term.'%')
                    ->setFirstResult(0)
                    ->setMaxResults(10);
                $listsDoctor = $query->getQuery()->getArrayResult();
                $lists = array_slice(array_merge($listsU, $listsDoctor), 0, 10);
                $lists[] = array('id' => time(), 'emailAddress'=> 'Gmedes Admin');
                $lists[] = array('id' => time() + 1, 'emailAddress'=> 'All Doctors');
                $lists[] = array('id' => time() + 2, 'emailAddress'=> 'Pharmacy Service');
                break;

            case 'pharmacy_service':
                $qb->select("u.id, (CASE WHEN u.firstName IS NOT NULL THEN CONCAT(u.firstName, ' ', u.lastName, ' <', u.emailAddress, '>') ELSE u.emailAddress END) as emailAddress")
                    ->distinct()
                    ->from('UtilBundle:User', 'u')
                    ->join('u.roles', 'role')
                    ->where('LOWER(u.emailAddress) LIKE :term OR LOWER(CONCAT(u.firstName,\' \',u.lastName)) LIKE :name' )
                    ->andWhere('role.id = 1  or role.id = 8')
                    ->setParameter('term', '%'.$term.'%')
                    ->setParameter('name', '%'.$term.'%')
                    ->setFirstResult(0)
                    ->setMaxResults(10);
                $listsU = $qb->getQuery()->getArrayResult();
                $query = $this->getEntityManager()->createQueryBuilder();
                $query->select("ui.id, (CASE WHEN ui.firstName IS NOT NULL THEN CONCAT(ui.firstName, ' ', ui.lastName, ' <', ui.emailAddress, '>') ELSE ui.emailAddress END) as emailAddress")
                    ->distinct()
                    ->from('UtilBundle:Doctor', 'd')
                    ->join('d.personalInformation', 'dp')
                    ->join('d.user', 'ui')
                    ->where('LOWER(ui.emailAddress) LIKE :term OR LOWER(CONCAT(dp.firstName,\' \',dp.lastName)) LIKE :name' )
                    ->setParameter('name', '%'.$term.'%')
                    ->setParameter('term', '%'.$term.'%')
                    ->setFirstResult(0)
                    ->setMaxResults(10);
                $listsDoctor = $query->getQuery()->getArrayResult();
                $lists = array_slice(array_merge($listsU, $listsDoctor), 0, 10);
                $lists[] = array('id' => time(), 'emailAddress'=> 'Gmedes Admin');
                $lists[] = array('id' => time() + 1, 'emailAddress'=> 'All Doctors');
                $lists[] = array('id' => time() + 2, 'emailAddress'=> 'Ask the Pharmacist'); //Customer Care
                break;
        }
        return $lists;
    }

    public function findByCriteria($criteria)
    {
        $entityId = isset($criteria['entityId']) ? $criteria['entityId'] : 0;
        $type = isset($criteria['type']) ? $criteria['type'] : '';

        $queryBuilder = $this->createQueryBuilder('m')
            ->innerJoin('m.content', 'mc')
            ->where('mc.entityId = :entityId')
            ->andWhere('mc.type = :type')
            ->setParameter('entityId', $entityId)
            ->setParameter('type', $type);

        $result = $queryBuilder->getQuery()->getOneOrNullResult();

        return $result;
    }

    /**
     * get list User of Agent and Doctor related to the Message page
     * @param $userId
     * @return array
     */
    public function getRelatedUsers($userId)
    {
        $listUsers = array();
        $em = $this->getEntityManager();
        $uaObj = $em->getRepository('UtilBundle:UserActors')->findOneBy(['user' => $userId]);

        if($uaObj != null && !empty($uaObj->getEntityId())) {
            $list = $em->getRepository('UtilBundle:UserActors')->findBy(['entityId' => $uaObj->getEntityId()]);
            if(!empty($list)) {
                foreach($list as $v)
                    $listUsers[] = $v->getUser()->getId();
            }
        } else {
            $listUsers[] = $userId;
        }
        return $listUsers;
    }

    public function getDoctorClosedMessages($params)
    {
        $typeNotification = Constant::MSG_TYPE_NOTIFICATION;
        $typeReplacementOrder = Constant::MSG_TYPE_REPLACEMENT_ORDER;
        $typeMaybe = Constant::MSG_TYPE_MAYBE;
        $typeYes = Constant::MSG_TYPE_YES;
        $doctorIssue = Constant::MSG_TYPE_DOCTOR_ISSUE;
        $doctorReview = Constant::MESSAGE_CONTENT_TYPE_DOCTOR_REVIEW;
        $amendments = Constant::MESSAGE_CONTENT_TYPE_AMENDMENTS;

        $doctorId = $params['id'];

        $em = $this->getEntityManager();
        $selectStr = "
                    SELECT NULL as rrId,
                           IF(p1_.first_name IS NULL, p1_.last_name, CONCAT(p1_.first_name, ' ', p1_.last_name)) AS fullName,
                           p.patient_code AS patientCode,
                           m.sent_date AS createdOn,
                           r.id AS id,
                           r.order_number,
                           p.id AS patientId,
                           mc.type AS type,
                           mc.body AS body,
                           m.id as msgId,
                           m.sender_name as senderName,
                           GROUP_CONCAT(ma.name, '|', ma.url_attachment) AS attachments
                    FROM message_content mc
                    INNER JOIN message m ON mc.id = m.content_id
                    LEFT JOIN message_attachment ma ON m.id = ma.message_id
                    INNER JOIN rx r ON mc.entity_id = r.id
                    INNER JOIN patient p ON r.patient_id = p.id
                    LEFT JOIN personal_information p1_ ON p.personal_information_id = p1_.id
                    WHERE mc.type IN ('$typeNotification','$typeReplacementOrder', '$typeMaybe', '$typeYes','$doctorIssue', '$doctorReview', '$amendments')
                        AND p.doctor_id = $doctorId
                        AND r.deleted_on IS NULL
                        AND m.read_date IS NOT NULL
                    GROUP BY mc.id
        ";

        $stmt = $em->getConnection()->prepare($selectStr);
        $stmt->execute();
        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])){
                $selectStr .= "ORDER BY ".$arrSort[0]." ".strtoupper($arrSort[1]);
            }
        }else{
            $selectStr .= "ORDER BY createdOn DESC";
        }

        $stmt = $em->getConnection()->prepare($selectStr);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return array(
            'data' => $result
        );
    }

}
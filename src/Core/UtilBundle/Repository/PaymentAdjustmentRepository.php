<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use UtilBundle\Entity\PaymentAdjustment;
use UtilBundle\Entity\PaymentStatus;
use UtilBundle\Utility\Constant;

/**
 * PaymentAdjustmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentAdjustmentRepository extends EntityRepository
{
    /**
     * update adjustment
     * @param $params
     * @return null|object
     * @author vinh.nguyen
     */
    public function update(PaymentStatus $paymentStatus, $params)
    {
        $adjustment = $this->findOneBy(array('id'=>$params['id']));
        if($adjustment == null) {
            $adjustment = new PaymentAdjustment();
            $adjustment->setCreatedOn(new \DateTime());
        }
        $adjustment->setOrderId($params['order_id']);
        $adjustment->setUserType($params['user_type']);
        $adjustment->setAmount(str_replace(",","",$params['amount']));
        $adjustment->setRemark($params['remark']);
        $adjustment->setPaymentType($params['payment_type']);
        $adjustment->setUpdatedOn(new \DateTime());
        $adjustment->setPaymentStatus($paymentStatus);

        $em = $this->getEntityManager();
        $em->persist($adjustment);
        $em->flush();

        return $adjustment->getId();
    }

    /**
     * delete adjustment
     * @return $id
     */
    public function delete($id)
    {
        try {
            $adjustment = $this->findOneBy(array('id'=>$id));
            if( null == $adjustment ){
                return null;
            }
            $id = $adjustment->getId();
            $em = $this->getEntityManager();
            $em->remove($adjustment);
            $em->flush();
            return $id;
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * get list adjustment detail
     * @param $params
     * @return array
     * @author vinh.nguyen
     */
    public function getAdjustmentDetail($params = array())
    {
        $q = $this->createQueryBuilder('f');
        $this->buildQuery($q, $params);
        $q->orderBy('f.id', 'asc');
        $results =  $q->getQuery()->getArrayResult();

        return array(
            'totalResult' => count($results),
            'data' => $results
        );
    }

    /**
     * get list payment adjustment
     * @param $params
     * @return array
     * @author vinh.nguyen
     */
    public function getListAdjustments($params)
    {
        $newColumns = array('userFee');
        $qb = $this->getEntityManager()->createQueryBuilder();
        $q = $qb->select("f.id, f.userCode, f.name, f.userType, f.amountDue, f.amountMonthlySale, f.createdOn")
            ->addSelect("
                 CASE
                 WHEN pa.paymentType = 'credit'
                   THEN f.amountDue + SUM(pa.amount)
                 ELSE f.amountDue - SUM(pa.amount)
                 END as userFee")
            ->from('UtilBundle:PaymentStatus', 'f')
            ->join('UtilBundle:PaymentAdjustment', 'pa', 'WITH', 'f.id = pa.paymentStatus')
            ->addGroupBy("f.id");

        $this->buildQuery($q, $params);

        //count total items
        $totalResult = count($q->getQuery()->getArrayResult());

        //get page
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
        $startRecord = $perPage*$page;

        $q->setFirstResult($startRecord)->setMaxResults($perPage);

        //sorting
        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                $prefixTbl = !in_array($arrSort[0], $newColumns)? "f.":"";
                $q->orderBy($prefixTbl . $arrSort[0], strtoupper($arrSort[1]));
            }
        } else {
            $q->orderBy('f.id', 'desc');
        }
        $results =  $q->getQuery()->getArrayResult();
        return array(
            'totalResult' => $totalResult,
            'totalPages' => ceil($totalResult/$perPage),
            'data' => $results
        );
    }

    /**
     * additional fields
     * @param array $data
     * @return array
     */
    public function getAdjustmentAmount($paymentStatusId)
    {
        $totalAmount = 0;
        $em = $this->getEntityManager();
        $paymentStatus = $em->getRepository('UtilBundle:PaymentStatus')->find($paymentStatusId);
        if($paymentStatus == null)
            return $totalAmount;

        $totalAmount = $paymentStatus->getAmountDue();

        $queryBuilder =
            $this->createQueryBuilder('f')
            ->where('f.paymentStatus = :paymentStatus')
            ->setParameter('paymentStatus', $paymentStatus);

        $list =  $queryBuilder->getQuery()->getArrayResult();
        $adjustmentFee = 0;
        if(!empty($list)) {
            foreach($list as $v){
                if($v['paymentType'] == Constant::PAYMENT_CREDIT) {
                    $adjustmentFee += $v['amount'];
                }
                elseif($v['paymentType'] == Constant::PAYMENT_DEBIT) {
                    $adjustmentFee -= $v['amount'];
                }
            }
        }
        return $totalAmount + $adjustmentFee;
    }

    /**
     * additional query
     * @param $queryBuilder
     * @param $params
     * @author vinh.nguyen
     */
    private function buildQuery(QueryBuilder &$q, $params)
    {
        //filter on: code, name
        if(isset($params['term']) && !empty($params['term'])) {
            $term = trim(strtolower($params['term']));
            $q->andWhere('LOWER(f.userCode) LIKE :term')
              ->orWhere('LOWER(f.name) LIKE :name')
              ->setParameter('term', '%' . $term . '%')
              ->setParameter('name', '%' . $term . '%');
        }
        //filter on: date
        if(isset($params['date']) && !empty($params['date'])) {
            $date = new \DateTime($params['date']);
            $q->andWhere('f.updatedOn <= :end AND f.updatedOn >= :start')
              ->setParameter('start', $date->format("Y-m-01"))
              ->setParameter('end', $date->format("Y-m-t"));
        }
        //filter on: userType
        if(isset($params['userType'])) {
            $q->andWhere('f.userType = :userType')
              ->setParameter('userType', $params['userType']);
        }
        //filter on: paymentStatusId
        if(isset($params['paymentStatusId'])) {
            $em = $this->getEntityManager();
            $paymentStatus = $em->getRepository('UtilBundle:PaymentStatus')->find(intval($params['paymentStatusId']));
            $q->andWhere('f.paymentStatus = :paymentStatus')
              ->setParameter('paymentStatus', $paymentStatus);
        }
    }

    /**
     * object to array
     */
    public function getResponseArray(PaymentAdjustment $adjustment){
        return array(
            "id" => $adjustment->getId(),
            "orderId" => $adjustment->getOrderId(),
            "userType" => $adjustment->getUserType(),
            "amount" => $adjustment->getAmount(),
            "remark" => $adjustment->getRemark(),
            "paymentType" => $adjustment->getPaymentType(),
            "createdOn" => $adjustment->getCreatedOn(),
            "updatedOn" => $adjustment->getUpdatedOn()
        );
    }
}

<?php

namespace UtilBundle\Repository;

use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use DoctrineExtensions\Query;
use UtilBundle\Entity\DrugGroup;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;

/**
 * DrugGroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DrugGroupRepository extends EntityRepository
{

    /**
     * create|update drug group
     */
    public function updateBy($id, $params)
    {
        $em = $this->getEntityManager();
        $dgObj = $this->find($id);
        if($dgObj == null)
            $dgObj = new DrugGroup();

        $dgObj->setName($params['name']);
        $dgObj->setDescription($params['description']);
        $dgObj->setLocalPricePercentage($params['localPricePercentage']);
        $dgObj->setOverseasPricePercentage($params['overseasPricePercentage']);

        $em->persist($dgObj);
        $em->flush();

        return $dgObj;
    }

    

    /**
     * get detail by
     * @author  vinh.nguyen
     */
    public function getDetailBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("g.id")
            ->from('UtilBundle:DrugGroup', 'g')
            ->andWhere("pow.id=:id")
            ->setParameter("id", $params['id'])
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * get list by
     * @author  vinh.nguyen
     */
    public function getListBy($params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("g.id, 
                g.name, 
                g.description, 
                g.localPricePercentage, 
                g.overseasPricePercentage
            ")
            ->from('UtilBundle:DrugGroup', 'g');
        
        //filter on: term
        if(isset($params['term']) && !empty($params['term'])) {
            $qb->andWhere('LOWER(g.name) LIKE :term')
                ->setParameter('term', '%'. trim(strtolower($params['term'])) .'%');
        }

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());

        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                $qb->orderBy('g.'.$arrSort[0], strtoupper($arrSort[1]));
            }
        }

        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }   
    
}
<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\Connection;
use UtilBundle\Entity\PlatformSharePercentages;
use UtilBundle\Utility\Constant;

/**
 * PlatformSharePercentages
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlatformSharePercentagesRepository extends EntityRepository
{
    /**
     * update platform share percentage
     * @author vinh.nguyen
     */
    public function update($params)
    {
        $psObj = $this->findOneBy(array('id'=>$params['id']));
        if($psObj == null)
            return null;

        $takeEffectOn = new \DateTime($params['takeEffectOn']);
        $psObj->setNewPlatformPercentage($params['platformPercentage']);
        $psObj->setNewAgentPercentage($params['agentPercentage']);
        $psObj->setNewDoctorPercentage($params['doctorPercentage']);
        $psObj->setTakeEffectOn($takeEffectOn);
        $psObj->setUpdatedOn(new \DateTime());

        if ($takeEffectOn->diff(new \DateTime())->invert == 0) {
            $psObj->setPlatformPercentage($params['platformPercentage']);
            $psObj->setAgentPercentage($params['agentPercentage']);
            $psObj->setDoctorPercentage($params['doctorPercentage']);
        }

        $em = $this->getEntityManager();
        $em->persist($psObj);
        $em->flush();

        return $this->getPSPercentageById($psObj->getId());
    }

    /**
     * update on active / inactive
     * @author vinh.nguyen
     */
    public function updateOnActive($areaType, $isActive = false)
    {
        $qb = $this->createQueryBuilder('psp');
        $qb->update()
            ->set('psp.isActive', ':isActive')
            ->where('psp.areaType=:areaType')
            ->setParameter('isActive', $isActive)
            ->setParameter('areaType', $areaType);

        return $qb->getQuery()->execute();
    }
    /**
     * Thangdo
     * update on active / inactive
     */
    public function updateOnlyMedicineOnActive($areaType, $isActive = false)
    {
        $qb = $this->createQueryBuilder('psp');
        $qb->update()
            ->set('psp.isActive', ':isActive')
            ->where('psp.areaType=:areaType')
            ->andWhere('psp.marginShareType=:marginShareType')
            ->setParameter('isActive', $isActive)
            ->setParameter('areaType', $areaType)
            ->setParameter('marginShareType', Constant::MST_MEDICINE);

        return $qb->getQuery()->execute();
    }

    /**
     * Thangdo
     * update on active / inactive
     */
    public function updateOnlyCAFOnActive($areaType, $isActive = false)
    {
        $qb = $this->createQueryBuilder('psp');
        $qb->update()
            ->set('psp.isActive', ':isActive')
            ->where('psp.areaType=:areaType')
            ->andWhere('psp.marginShareType=:marginShareType')
            ->setParameter('isActive', $isActive)
            ->setParameter('areaType', $areaType)
            ->setParameter('marginShareType', Constant::MST_CUSTOM_CAF);

        return $qb->getQuery()->execute();
    }

    /**
     * get platform share percentage by id
     * @author  vinh.nguyen
     * @return array
     */
    public function getPSPercentageById($id)
    {
        $qb = $this->createQueryBuilder('psp');
        $qb->select('psp.id',
            'psp.platformPercentage',
            'psp.newPlatformPercentage',
            'psp.agentPercentage',
            'psp.newAgentPercentage',
            'psp.doctorPercentage',
            'psp.newDoctorPercentage',
            'psp.takeEffectOn',
            'psp.marginShareType',
            'psp.areaType',
            'psp.isActive'
            )
            ->where('psp.id = :id')
            ->setParameter('id', $id)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * get platform share percentage by type
     * @author  vinh.nguyen
     * @return array
     */
    public function getPSPercentageByType($areaType, $msType)
    {
        $qb = $this->createQueryBuilder('psp');
        $qb->select('psp.id',
            'psp.platformPercentage',
            'psp.newPlatformPercentage',
            'psp.agentPercentage',
            'psp.newAgentPercentage',
            'psp.doctorPercentage',
            'psp.newDoctorPercentage',
            'psp.takeEffectOn',
            'psp.marginShareType',
            'psp.areaType',
            'psp.isActive'
            )
            ->where('psp.marginShareType=:msType AND psp.areaType=:areaType')
            ->setParameter('msType', $msType)
            ->setParameter('areaType', $areaType)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

	/**
     * get medicine platform percentage
     * @author  Toan Le
     * @return array
     */
    public function getMedicinePlatFormPercentage() {
        $queryBuilder = $this->createQueryBuilder('psp');
        $queryBuilder->select('psp.platformPercentage', 'psp.agentPercentage', 'psp.doctorPercentage', 'psp.takeEffectOn')
        			 ->where('psp.marginShareType = 1')
                     ->setMaxResults(1);

         return $queryBuilder->getQuery()->getSingleResult();
    }

    /**
     * get service platform percentage
     * @author  Toan Le
     * @return array
     */
    public function getServicePlatFormPercentage() {
        $queryBuilder = $this->createQueryBuilder('psp');
        $queryBuilder->select('psp.platformPercentage', 'psp.agentPercentage', 'psp.doctorPercentage', 'psp.takeEffectOn')
        			 ->where('psp.marginShareType = 2')
                     ->setMaxResults(1);

         return $queryBuilder->getQuery()->getSingleResult();
    }

    /**
     * Get platform share percentage by type
     * @param type $areaType
     * @param type $msType
     * @return type
     * author luyen nguyen
     */
    public function getPercentageByType($areaType, $msType) {
        $qb = $this->createQueryBuilder('psp');
        $qb->where('psp.marginShareType=:msType AND psp.areaType=:areaType')
                ->setParameter('msType', $msType)
                ->setParameter('areaType', $areaType)
                ->setMaxResults(1);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @author Tien Nguyen
     */
    public function getDataForRX($params)
    {
        $areaType = Constant::AREA_TYPE_LOCAL;;
        if (empty($params['isLocal'])) {
            $areaType = Constant::AREA_TYPE_OVERSEA;
        }

        $types = isset($params['types']) ? $params['types'] : array();

        $qb = $this->createQueryBuilder('psp')
            ->where('psp.isActive = true')
            ->andWhere('psp.areaType=:areaType')
            ->andWhere('psp.marginShareType IN (:types)')
            ->setParameter('areaType', $areaType)
            ->setParameter('types', $types, Connection::PARAM_STR_ARRAY);

        $result = array();
        foreach ($qb->getQuery()->getResult() as $value) {
            $result[$value->getMarginShareType()] = $value;
        }

        return $result;
    }

    public function getUpdateData()
    {
        $query = $this->createQueryBuilder('a')
                ->orWhere('a.takeEffectOn lIKE :date')
                ->setParameter('date', '%' . date("Y-m-d") . '%')
                ;
        return $query->getQuery()->getResult();
    }

    public function calculatePlatformShare($rxLine)
    {
        $em = $this->getEntityManager();

        $reviewFee = $rxLine->getListPrice();
        $rx = $rxLine->getRx();

        $params = ['patient' => $rx->getPatient()];
        $isLocalPatient = $em->getRepository('UtilBundle:Rx')->isLocalPatient($params);

        $areaType = Constant::AREA_TYPE_OVERSEA;
        if ($isLocalPatient) {
            $areaType = Constant::AREA_TYPE_LOCAL;
        }
        $msType = Constant::MST_SERVICE;

        $criteria = [
            'areaType' => $areaType,
            'marginShareType' => $msType,
            'isActive' => true
        ];
        $psp = $this->findOneBy($criteria);

        $platformSF = $agentSF = $doctorSF = 0;
        if ($psp) {
            $platformSF = round($reviewFee * $psp->getPlatformPercentage() / 100, 2);
            $agentSF = round($reviewFee * $psp->getAgentPercentage() / 100, 2);
            $doctorSF = round($reviewFee * $psp->getDoctorPercentage() / 100, 2);
        }

        return [
            'platformSF' => $platformSF,
            'doctorSF' => $doctorSF,
            'agentSF' => $agentSF
        ];
    }

}
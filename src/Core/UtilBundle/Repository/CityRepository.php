<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityRepository extends EntityRepository {

    /**
     * Get city by Id
     * @param type $id
     */
    public function findById($id) {
        return $this->find($id);
    }

    /**
     * Get cities
     * @param type $countryId
     * @return type
     * author luyen nguyen
     */
    public function getCities($countryId) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f')
                ->where('f.country = (:countryId)')
                ->setParameter('countryId', $countryId);
        $result = $queryBuilder->getQuery()->getResult();
        
        return $result;
    }
    /**
     * Get cities
     * @param type $countryId
     * @return type
     * author bien
     */
    public function getCitiesEmptyState($countryId, $state = null) {
        $queryBuilder = $this->createQueryBuilder('f');

        if(empty($state)) {
            $queryBuilder->select('f')
                ->leftJoin('f.state' , 'st')
                ->where('f.country = (:countryId)')
                ->setParameter('countryId', $countryId)
                ->groupBy('f.id')
                ->having('count(st) = 0');
        } else {
            $queryBuilder->select('f')
                ->leftJoin('f.state' , 'st')
                ->where('f.country = (:countryId)')
                ->andWhere('st.id = :state')
                ->setParameter('countryId', $countryId)
                ->setParameter('state', $state)
                ->groupBy('f.id');
        }
        $result = $queryBuilder->getQuery()->getResult();

        return $result;
    }


    /**
     * Get cities
     * @param type $stateId
     * @return type
     * author luyen nguyen
     */
    public function getCitiesByState($stateId) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f')
                ->where('f.state = (:stateId)')
                ->setParameter('stateId', $stateId);
        $result = $queryBuilder->getQuery()->getResult();
        return $result;
    }

    /**
     * Get states
     * @param type $countryId
     */
    public function getStates($countryId) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('s')
                ->innerJoin('UtilBundle:State', 's', 'WITH', 's.id = f.state')
                ->where('f.country = (:countryId)')
                ->orderBy('s.name')
                ->setParameter('countryId', $countryId)
                ->orderBy('s.name', 'ASC');
        $result = $queryBuilder->getQuery()->getResult();
        return $result;
    }

    /**
     * Get country
     * @param type $cityId
     */
    public function getCountry($cityId) {
        $queryBulider = $this->createQueryBuilder('f');
        $queryBulider->select('c.code, c.id')
                ->innerJoin('UtilBundle:Country', 'c', 'WITH', 'c.id = f.country')
                ->where('f.id = (:cityId)')
                ->setParameter('cityId', $cityId);
        $result = $queryBulider->getQuery()->getSingleResult();
        
        return $result;
    }

    /*
     * get state by country
     * author
     */

    public function getStateByCountry($id) {

        $data = $this->createQueryBuilder('c')
                        ->innerJoin('c.state', 's')
                        ->select('s.id,s.name')
                        ->where('c.country = :country')
                        ->setParameter('country', $id)
                        ->groupBy('s.id')
                        ->getQuery()->getResult();



        $result = array();
        if (empty($data)) {
            return $result;
        }

        foreach ($data as $state) {
            if(!empty($state['id'])) {
                $result[$state['id']] = $state['name'];
            }
        }
        
        return $result;
    }
    /*
    * get state by country
    * author Bien
    */

    public function getStateByCountryCC($id) {

        $data = $this->createQueryBuilder('c')
            ->join('c.country', 'c2')
            ->leftJoin('c.state', 's')
            ->select('s.id,s.name')
            ->where('c2.id = :country')
            ->setParameter('country', $id)
            ->groupBy('s.id')
            ->getQuery()->getResult();



        $result = array();
        if (empty($data)) {
            return $result;
        }

        foreach ($data as $state) {
            if(!empty($state['id'])) {
                $result[] = ['id' => $state['id'],'name' => $state['name']];
            }
        }

        return $result;
    }

    /**
     * Get country and state
     * @param type $cityId
     */
    public function getCountryState($cityId) {
        $queryBulider = $this->createQueryBuilder('f');
        $queryBulider->select('c,s,f')
                ->innerJoin('UtilBundle:Country', 'c', 'WITH', 'c.id = f.country')
                ->leftJoin('UtilBundle:State', 's', 'WITH', 's.id = f.state')
                ->where('f.id = (:cityId)')
                ->setParameter('cityId', $cityId);
        $result = $queryBulider->getQuery()->getResult();
        
        return $result;
    }

    /*
     * get all city
     */

    public function getListCity($countryId = []) {
        $result = array();
        if(empty($countryId)){
            return $result;
        }
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f')
            ->where('f.country IN (:ids)')
            ->setParameter('ids', $countryId);
        $data = $queryBuilder->getQuery()->getResult();

        foreach ($data as $c) {
            $result[$c->getId()] = $c->getName();
        }
        
        return $result;
    }

}

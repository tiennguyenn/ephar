<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Constant;

/**
 * PaymentGatewayFee
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentGatewayFeeRepository extends EntityRepository {

    /**
     * Get FeeSetting
     * @param type $paymentMethod
     * @param type $countryCode
     * @return type
     */
    public function getFeeSetting($paymentMethod, $countryCode) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f.code, fs.fee')
                ->innerJoin('UtilBundle:Country', 'c', 'WITH'
                        , 'c.id = f.country AND c.code = :countryCode')
                ->innerJoin('UtilBundle:FeeSetting', 'fs', 'WITH'
                        , 'fs.id = f.feeSetting')
                ->where('f.paymentMethod = :paymentMethod')
                ->setParameter('paymentMethod', $paymentMethod)
                ->setParameter('countryCode', $countryCode);
        $results = $queryBuilder->getQuery()->getResult();
        $arrayResult = array();
        foreach ($results as $result) {
            $arrayResult[$result['code']] = $result['fee'];
        }
        return $arrayResult;
    }
    
    /**
     * Get FeeSetting
     * @param type $paymentMethod
     * @param type $code
     * @return type
     */
    public function getFeeSettingBy($paymentMethod) {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select('f.code, fs.fee')
                ->innerJoin('UtilBundle:FeeSetting', 'fs', 'WITH'
                        , 'fs.id = f.feeSetting')
                ->where('f.paymentMethod = :paymentMethod')
                ->setParameter('paymentMethod', $paymentMethod);
        $results = $queryBuilder->getQuery()->getResult();
        $arrayResult = array();
        foreach ($results as $result) {
            $arrayResult[$result['code']] = $result['fee'];
        }
        return $arrayResult;
    }
    /*
     * bien
     * get all current support gateway
     */
    public function getCurrentGateWay(){
        $paymentMethod = [Constant::PAY_METHOD_VISA_MASTER,Constant::PAY_METHOD_REVPAY_FPX];
        $paymentGate = [Constant::PAYMENT_GATE_IPAY, Constant::PAYMENT_GATE_MOLPAY, Constant::PAYMENT_GATE_REDDOT];
        $queryBuilder = $this->createQueryBuilder('f')
            ->where('f.paymentMethod in( :paymentMethod)')
            ->andWhere('f.paymentGate in( :paymentGate)')
            ->setParameter('paymentMethod', $paymentMethod)
            ->setParameter('paymentGate', $paymentGate);
        $results = $queryBuilder->getQuery()->getResult();

        return $results;
    }
    /*
     * bien
     * get refund charge
     */
    public function getRefundFee($paymentGate ){
        if(empty($paymentGate)){
            $paymentGate = Constant::PAYMENT_GATE_MOLPAY;
        }
        $queryBuilder = $this->createQueryBuilder('f')
            ->innerJoin('f.feeSetting','fs')
            ->where('f.code = :code ')
            ->andWhere('f.paymentGate = :paymentGate')
            ->setParameter('code', Constant::GATEWAY_REFUND_CHARGE)
            ->setParameter('paymentGate', $paymentGate);
        $result = $queryBuilder->getQuery()->getOneOrNullResult();

        if(!empty($result->getFeeSetting()->getEffectDate())&& strtotime($result->getFeeSetting()->getEffectDate()->format("Y-m-d")) < strtotime(date("Y-m-d"))) {
            return  $result->getFeeSetting()->getNewFee();
        }
        return $result->getFeeSetting()->getFee();
    }
}
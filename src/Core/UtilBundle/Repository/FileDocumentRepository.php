<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Entity\FileDocument;
use UtilBundle\Entity\FileDocumentLog;
use UtilBundle\Entity\Site;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;

/**
 * FileDocumentLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileDocumentRepository extends EntityRepository {

    /*
     * Get content agreement for doctor
     * */
    public function getContentForClient($documentName, $siteName = null)
    {
        $qb = $this->createQueryBuilder('fd')
            ->select('fdl.contentAfter, fdl.createdAt, fdl.id')
            ->innerJoin(FileDocumentLog::class, 'fdl', 'WITH', 'fd.id = fdl.fileDocument')
            ->innerJoin(Site::class, 's', 'WITH', 's.id = fd.site')
            ->where('fd.name = :fileDocument')
            ->andWhere('s.name = :site')
            ->andWhere('fdl.effectiveDate <= :now')
            ->setMaxResults(1)
            ->orderBy('fdl.createdAt', 'DESC');

        $qb = $qb->setParameter('fileDocument', $documentName)
            ->setParameter('site', strtolower($siteName))
            ->setParameter('now', (new \DateTime()));

        $resultQuery = $qb->getQuery()->getArrayResult();

        if ($resultQuery) {
            return $resultQuery[0];
        } else {
            return array();
        }
    }

    public function getDocumentLog($documentId, $limit = 10, $page = 1)
    {
        $firstNumber = 0;
        if($limit){
            $firstNumber = ($page - 1) * $limit;
        }

        $qb = $this->createQueryBuilder('fd')
            ->select('fdl')
            ->innerJoin(FileDocumentLog::class, 'fdl', 'WITH', 'fd.id = fdl.fileDocument')
            ->where('fd.id = :fileDocument')
            ->setMaxResults($limit)
            ->setFirstResult($firstNumber)
            ->orderBy('fdl.createdAt', 'DESC')
            ->setParameter('fileDocument', $documentId);

        $data = array();
        $documentLogs = $qb->getQuery()->getResult();
        foreach ($documentLogs as $documentLog) {
            array_push($data, array(
                'logId' => Common::encodeHex($documentLog->getId()),
                'effectiveDate' => $documentLog->getEffectiveDate()->format('Y-m-d'),
                'createdAt' => $documentLog->getCreatedAt()->format('Y-m-d H:i:s')
            ));
        }

        $qbTotal = $this->createQueryBuilder('fd')
            ->select('COUNT(fdl.id)')
            ->innerJoin(FileDocumentLog::class, 'fdl', 'WITH', 'fd.id = fdl.fileDocument')
            ->where('fd.id = :fileDocument')
            ->setParameter('fileDocument', $documentId);

        $total = $qbTotal->getQuery()->getSingleScalarResult();

        return array('data' => $data, 'total' => $total);
    }
}

<?php

namespace UtilBundle\Repository;
use UtilBundle\Utility\Constant;
use Doctrine\ORM\EntityRepository;

/**
 * DoctorMonthlyStatementLineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DoctorMonthlyStatementLineRepository extends EntityRepository 
{
    public function getMatchedLines($line) 
    {

        $qb = $this->createQueryBuilder("l");
        $qb->innerJoin("UtilBundle:DoctorMonthlyStatement", "d", "WITH", "l.doctorMonthlyStatement = d.id");
        $qb->where($qb->expr()->eq("l.customerReference", ":customerReference"))
            ->setParameter("customerReference", $line->getCustomerReference())
            ->addOrderBy('l.createdOn', "DESC");
            
        //$list = $qb->select("l")->getQuery()->getArrayResult();
        $list = $qb->select("l")->getQuery()->setMaxResults(1)->getOneOrNullResult();
        
        return $list;
    }

    /**
     * getPaymentStatus for doctor
     * @param  integer $doctorId
     * @param  integer $month
     * @param  integer $year
     * @return string
     */
    public function getPaymentStatus($doctorId, $month, $year) {
        $data = $this->getStatementLine($doctorId, $month, $year);
        if (!empty($data)) {
            return Constant::PAYMENT_STATUS[$data->getStatus()];
        }

        return 'Pending';
    }

    /**
     * get statement line data by month year
     * @param   $doctorId
     * @param  integer $month
     * @param  integer $year
     * @return object
     */
    public function getStatementLine($doctorId, $month, $year) {
        $qb = $this->createQueryBuilder("dl");
        
        $qb->innerJoin("UtilBundle:DoctorMonthlyStatement", "ds", "WITH", "dl.doctorMonthlyStatement = ds.id")
            ->where("dl.doctor = :doctorId")
            ->andWhere("ds.month = :month")
            ->andWhere("ds.year = :year")
            ->setParameter("doctorId", $doctorId)
            ->setParameter("month", $month)
            ->setParameter("year", $year);

        $data = $qb->getQuery()->getOneOrNullResult();

        return $data;
    }

    /**
     * cal totalAmount for doctor_monthly_statement_line
     * @param   $params is the params passed when cron for generate statement date be called
     * @relatedTicket: #658
     * @return float
     */
    public function getPreMonthsStatementInfo($params, $onlyTotalAmount = false){
        $preTotalAmount = 0; // total amount of last month of $currentMonth
        $date           = new \DateTime( $params['year'] . '-' . $params['month'] . '-10' );
        $date->modify('-1 month');
        $month          = (int)$date->format('m');
        $year           = $date->format('Y');
        $dateTimeStr    = $date->format('Y-m-d');

        // get balance from pre months
        $queryBuilder = $this->createQueryBuilder('dl');
        $queryBuilder->innerJoin("dl.doctorMonthlyStatement", 'ds')
                     ->andWhere("(
                        STR_TO_DATE(CONCAT(ds.year,'-', ds.month, '-01'),  '%Y-%m-%d') < '{$dateTimeStr}' 
                        and (dl.amountPaid IS NOT NULL
                        and dl.amountPaid <> 0) 
                        and dl.doctor = {$params['doctorId']}                         
                    )")
                     ->orWhere("(
                                STR_TO_DATE(CONCAT(ds.year,'-', ds.month, '-01'),  '%Y-%m-%d') = '{$dateTimeStr}' 
                                and dl.doctor = {$params['doctorId']} 
                                and (
                                    (MONTH(dl.postDate) = {$params['month']}
                                    and YEAR(dl.postDate) = {$params['year']})
                                    or dl.postDate is null
                                     )
                            )")
                     ->addOrderBy('ds.year', 'desc')
                     ->addOrderBy('ds.month', 'desc');
         $result = $queryBuilder->getQuery()->getResult();
         // get totalAmount
         if (!empty($result)) {
            foreach ($result as $key => $value) {
                $month = $value->getDoctorMonthlyStatement()->getMonth();
                $year = $value->getDoctorMonthlyStatement()->getYear();
                if ($month == (int)$date->format('m') && $year == (int)$date->format('Y')) {
                    $preTotalAmount = $value->getTotalAmount();
                }
                $preTotalAmount -= $value->getAmountPaid(); // find balance of last month
            }
         }
         if ($onlyTotalAmount) {
            $totalAmount = $params['monthlyFee']; // total amount of the month that recieved payment, called $currentMonth
             return $totalAmount + $preTotalAmount;
         }
         
         return array('data' => $result, 'balance' => $preTotalAmount);
    }

    public function updateDoctorStatementLineForInstruction($params)
    {
        $queryBuilder = $this->createQueryBuilder('ms');

        $result =  $queryBuilder->update()
            ->set('ms.status','3')
            ->where($queryBuilder->expr()->eq('ms.status','0'))
            ->andWhere($queryBuilder->expr()->in('ms.id',$params ))
            ->getQuery()
            ->execute();

        return $result;
    }

    public function listStatementForDoctor($params)
    {
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;
        $startRecord = $perPage*$page;

        $selectStr = 'msl.id,
            ms.month,
            ms.year,                        
            ms.outStandingAmount,            
            msl.orderValue,
            msl.status,
            msl.doctorMonthlyFee,
            msl.filename,
            msl.postDate';        
        
        $queryBuilder = $this->createQueryBuilder('msl')
            ->select($selectStr)
            ->innerJoin('UtilBundle:DoctorMonthlyStatement', 'ms', 'WITH', 'msl.doctorMonthlyStatement = ms.id');

        if (!empty($params['monthYear'])) {
            $date = date_create_from_format('M Y', $params['monthYear']);
            $month = $date->format('m');
            $year = $date->format('Y');

            $queryBuilder->andWhere('ms.year=:year');
            $queryBuilder->andWhere('ms.month=:month');
            $queryBuilder->setParameter('year', $year);
            $queryBuilder->setParameter('month', $month);
        }

        if (isset($params['minAmount']) && $params['minAmount'] != '') {
            $queryBuilder->andWhere('ms.orderValue>=:minAmount');
            $queryBuilder->setParameter('minAmount', $params['minAmount']);
        }

        if (isset($params['maxAmount']) && $params['maxAmount'] != '') {
            $queryBuilder->andWhere('ms.orderValue<=:maxAmount');
            $queryBuilder->setParameter('maxAmount', $params['maxAmount']);
        }

        if (isset($params['statusFilter']) && is_numeric($params['statusFilter'])) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq('ms.status', $params['statusFilter']));
        }

        if(!empty($params['doctor'])){ 
            $queryBuilder->andWhere('msl.doctorMonthlyFee > 0');
            $queryBuilder->andWhere('msl.doctor=:doctor');
            $queryBuilder->setParameter('doctor', $params['doctor']);
        }

        //filter by date
        if(isset($params['fromDate']) && isset($params['toDate']) && !empty($params['fromDate']) && !empty($params['toDate'])){
            $startDate = new \DateTime($params['fromDate']);
            $startDate->modify('first day of this month');

            $endDate = new \DateTime($params['toDate']);
            $endDate->modify('last day of this month');            

        } elseif (isset($params['fromDate']) && !empty($params['fromDate'])){
            $startDate = new \DateTime($params['fromDate']);
            $startDate->modify('first day of this month');            

            $endDate = new \DateTime();
            $endDate->modify('last day of previous month');            

        } elseif (isset($params['toDate']) && !empty($params['toDate'])){

            $startDate = new \DateTime();
            $startDate->modify('first day of Jan');        

            $endDate = new \DateTime($params['toDate']);
            $endDate->modify('last day of this month');                       
        }

        if(isset($startDate) && isset($endDate)){

            $queryBuilder->andWhere("DATE(CONCAT(ms.year, '-', ms.month, '-01')) <= :end AND DATE(CONCAT(ms.year, '-', ms.month, '-01')) >= :start")
                         ->setParameter('start', $startDate->format("Y-m-d H:i:s"))
                         ->setParameter('end', $endDate->format("Y-m-d H:i:s"));             
        }        

        $sort  = 'ms.year';
        $order = 'desc';
        //dump($params); die;
        if (!empty($params['sorting'])) {
            list($sort, $order) = explode('-', $params['sorting']);
            $queryBuilder->orderBy($sort, $order);
            if ('ms.year' == $sort) {
                $queryBuilder->addOrderBy('ms.month', $order);
            }
        } else {
            $queryBuilder->orderBy($sort, $order);
            $queryBuilder->addOrderBy('ms.month', $order);
        }

        $query = $queryBuilder->getQuery();

        $totalResult = count($queryBuilder->getQuery()->getArrayResult());

        $queryBuilder->setFirstResult($startRecord);
        $queryBuilder->setMaxResults($perPage);
        //$paginator = new Paginator($query, false);

        $result = array(
            'sort'  => $sort,
            'order' => $order,
            'data'  => $queryBuilder->getQuery()->getArrayResult(),
            'totalResult' => $totalResult
        );

        return $result;
    }
}

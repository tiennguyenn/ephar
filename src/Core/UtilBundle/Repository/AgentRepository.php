<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Entity\Bank;
use UtilBundle\Entity\BankAccount;
use UtilBundle\Utility\Common;
use UtilBundle\Utility\Constant;
use UtilBundle\Utility\MsgUtils;
use UtilBundle\Entity\Agent;
use UtilBundle\Entity\SequenceNumber;
use UtilBundle\Entity\AgentFeeMedicine;
use UtilBundle\Entity\AgentFeeMedicineLog;

/**
 * AgentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgentRepository extends EntityRepository {
    /**
     * get personal information by agent id
     * @param $params
     * @return array
     * @author toan.le
     */
    public function getAgentPersonalInformation($id) {
        $results = [];
        try {
            $queryBuilder = $this->createQueryBuilder('f')
                    ->select("
                                    pi.firstName,
                                    pi.lastName,
                                    pi.emailAddress,
                                    pi.gender,
                                    pi.dateOfBirth,
                                    pi.passportNo,
                                    f.profilePhotoUrl,
                                    ifelse(pi.firstName is null, pi.lastName, CONCAT(pi.firstName, ' ', pi.lastName)) AS fullName,
                                    f as agent,
                                    f.agentCode,
                                    f.isGst
                                    ")
                    ->innerJoin('f.personalInformation', 'pi')
                    ->where('f.id = :id')
                    ->setParameter('id', $id)
                    ->setFirstResult(0)
                    ->setMaxResults(1);

            $resultQuery = $queryBuilder->getQuery()->getOneOrNullResult();
            $results['success'] = true;
            $results['data'] = $resultQuery;
            if (null == $resultQuery) {
                $results['message'] = MsgUtils::generate('msgNoData');
            } else {
                $results['message'] = null;
            }
        } catch (Exception $ex) {
            $results['message'] = $ex->getMessage();
            $results['success'] = false;
        }

        return $results;
    }

    public function updateProfile($imageUrl, $params, $agentId) {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction(); // suspend auto-commit
        try {
            //... do some work

            $agent = $em->getRepository('UtilBundle:Agent')->find($agentId);
            $agent->setIsGst($params['gstSetting']);
            if ($params['gstSetting'] == 1) {
                $agent->setGstNo($params['gstNo']);
                $agent->setGstEffectDate( new \DateTime(date('Y-m-d', strtotime($params['gstEffectDate']))) );
            }

            if ($imageUrl != '') {
                $agent->setProfilePhotoUrl($imageUrl);
                $em->persist($agent);
            }

            $pi = $agent->getPersonalInformation();
            $pi->setFirstName($params['first_name']);
            $pi->setLastName($params['last_name']);
            $pi->setGender($params['gender']);
            $pi->setPassportNo($params['passport']);
            $em->persist($pi);

            $agentPhone = $em->getRepository('UtilBundle:AgentPhone')->getAgentPhone($agentId);
            $agentPhone = $agentPhone['data']->getPhone();
            $agentPhone->setAreaCode($params['area_code']);
            $agentPhone->setNumber($params['phone']);
            $agentPhone->setCountry($em->getRepository('UtilBundle:Country')->find($params['country']));
            $em->persist($agentPhone);

            $agentAddress = $em->getRepository('UtilBundle:AgentAddress')->findOneBy(['agent' => $agentId]);
            $address = $agentAddress->getAddress();
            $address->setLine1($params['address_line1']);
            if (isset($params['address_line2']) && $params['address_line2'] != '') {
                $address->setLine2($params['address_line2']);
            }
            if (isset($params['address_line3']) && $params['address_line3'] != '') {
                $address->setLine3($params['address_line3']);
            }
            $address->setCity($em->getRepository('UtilBundle:City')->find($params['city']));
            $address->setPostalCode($params['postal_code']);
            $em->persist($address);

            $agentIdentification = $em->getRepository('UtilBundle:AgentIdentification')->findOneBy(['agent'   => $agentId]);
            $identification = $agentIdentification->getIdentification();
            $identification->setIssuingCountryId($params['country_of_issue']);
            $identification->setIdentityNumber($params['passport']);
            $em->persist($identification);

            if($agent->getParent() == null){
                $bankAcc =  $agent->getBankAccount();
                if (!$bankAcc) {
                    $bankAcc = new BankAccount();
                }

                if ($params['bankCountryIssue'] == Constant::ID_SINGAPORE || $params['bankCountryIssue'] == Constant::ID_MALAYSIA) {
                    $bank = $em->getRepository('UtilBundle:Bank')->find($params['bankName']);
                } else {
                    $bank = $bankAcc->getBank();
                    if (!$bank) {
                        $bank = new Bank();
                    }
                    $bank->setName($params['bankName']);
                    $bank->setCountry($em->getRepository('UtilBundle:Country')->find($params['bankCountryIssue']));
                    $bank->setSwiftCode($params['bankSwiftCode']);
                }
//                if($params['bankCityIssue'] != ''){
//                    $bank->setCity($em->getRepository('UtilBundle:City')->find($params['bankCityIssue']));
//                }
                $bankAcc->setAccountName($params['accountName']);
                $bankAcc->setAccountNumber($params['accountNumber']);
                $bankAcc->setBank($bank);
                $agent->setBankAccount($bankAcc);

                $agentCompany = $em->getRepository('UtilBundle:AgentCompany')->findOneBy(array('agent' => $agentId));

                $agentCompany->setCompanyName($params['comName']);
                $agentCompany->setCompanyRegistrationNumber($params['registerNo']);
                $agentCompany->setUpdatedOn(new \DateTime());

                $companyPhone = $agentCompany->getPhone();
                $companyPhone->setAreaCode($params['comPhoneArea']);
                $companyPhone->setNumber($params['comPhone']);

                $comCountry = $em->getRepository('UtilBundle:Country')->find($params['comPhoneLocation']);
                $companyPhone->setCountry($comCountry);

                $agentCompany->setPhone($companyPhone);

                $companyAddress = $agentCompany->getAddress();
                $companyAddress->setLine1($params['comAddressLine1']);
                $companyAddress->setLine2($params['comAddressLine2']);
                $companyAddress->setLine3($params['comAddressLine3']);
                $companyAddress->setPostalCode($params['comZipCode']);
                $companyAddress->setUpdatedOn(new \DateTime());

                $city = $em->getRepository('UtilBundle:City')->find($params['comCity']);
                $companyAddress->setCity($city);
                $agentCompany->setAddress($companyAddress);

                $em->persist($companyAddress);
                $em->persist($companyPhone);
                $em->persist($agentCompany);
            }


            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $e) {
            $em->getConnection()->rollBack();
            throw $e;
        }
    }

    /*
     * get List active doctor for selectbox
     */

    public function getAgentForEditDoctor() {
        $query = $this->createQueryBuilder('a')
                ->where("a.deletedOn is null")
                ->getQuery();
        $agents = $query->getResult();
        $result = array();
        $parent = array();
        $listp = array();
        $finalResult = array();
        foreach ($agents as $agent) {
            if (count($agent->getChild())) {
                array_push($parent, $agent->getId());
                $result[$agent->getId()] = array();
                $listp[$agent->getId()] = $agent;
            }
        }

        foreach ($agents as $agent) {
            if ($agent->getParent()) {
                $result[$agent->getParent()->getId()][$agent->getId()] = $agent->getPersonalInformation()->getFullName() . ' (' . $agent->getParent()->getSite()->getName() . ')';
            } else {
                if (count($agent->getChild()) == 0) {
                    $result[$agent->getId()] = $agent->getPersonalInformation()->getFullName() . ' (' . $agent->getSite()->getName() . ')';
                }
            }
        }


        foreach ($result as $key => $record) {

            if (in_array($key, $parent)) {
                $finalResult[$listp[$key]->getPersonalInformation()->getFullName() . ' (Primary)'] = $record;
            } else {
                $finalResult[$key] = $record;
            }
        }

        return $finalResult;
    }

    /*
     * get List active doctor for selectbox
     */

    public function get3rdAgentForEditDoctor() {
        $query = $this->createQueryBuilder('a');
        $query->where("a.deletedOn is null")
            ->andWhere("a.parent is null")
            ->andWhere($query->expr()->eq("a.is3paAgent", true));
        $agents = $query->getQuery()->getResult();
        $finalResult = array();
        foreach ($agents as $agent) {

            $finalResult[$agent->getId()] = $agent->getPersonalInformation()->getFullName() . ' (' . $agent->getSite()->getName() . ')';

        }
        return $finalResult;
    }
    /*
     * Gennerate agent code
     */

    public function generateCode($code) {
        $result = 'A-' . date('my') . '-' . $code;

        $agentCode = $this->createQueryBuilder('c')
                ->select('c.id')
                ->setMaxResults(1)
                ->orderBy('c.id ', 'DESC')
                ->getQuery()
                ->getResult();
        if (empty($agentCode)) {

            return $result . '-0001';
        }
        $currentCode = $agentCode[0]['id'];

        $currentNum = intval($currentCode);
        $currentNum++;
        $result .= '-' . str_pad($currentNum, 4, '0', STR_PAD_LEFT);

        return $result;
    }

    /**
     * suggestion search
     * @param $params
     * @return array
     * @author vinh.nguyen
     */
    public function suggestionSearch($term) {
        $term = trim(strtolower($term));
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("a.agentCode,
                (CASE
                    WHEN pi.lastName is not null and pi.lastName is not null
                        THEN CONCAT(pi.firstName, ' ' ,  pi.lastName)
                    WHEN pi.firstName is not null and pi.lastName is null
                        THEN pi.firstName
                    WHEN pi.firstName is null and pi.lastName is not null
                        THEN pi.lastName
                    ELSE ' '
                END) as name")
                ->distinct()
                ->from('UtilBundle:Agent', 'a')
                ->innerJoin('a.personalInformation', 'pi')
                ->where('LOWER(a.agentCode) LIKE :term
                        OR LOWER(pi.firstName) LIKE :term
                        OR LOWER(pi.lastName) LIKE :term
                    ')
                ->setParameter('term', '%' . $term . '%')
                ->setFirstResult(0)
                ->setMaxResults(5);
        $lists = $qb->getQuery()->getArrayResult();

        $results = array();
        $column = 'agentCode';
        foreach ($lists as $v) {
            if ($column == 'agentCode' && strpos(strtolower($v['name']), $term) !== false)
                $column = 'name';
            $results[]['name'] = $v[$column];
        }

        return $results;
    }

    /*
     * select agent to display auto commplete
     * author :biển
     */

    public function selectAgentAutoComplete($data)
    {
        $search = strtolower($data['text']);
        $id = $data['id'];
        $query = $this->createQueryBuilder('a')
                    ->join('a.personalInformation', 'p');
        $status = $data['status'];
        switch ($status) {
            case 2: $query->Where('a.deletedOn is  null ');
                break;
            case 1:
                $query->Where('a.deletedOn is  null ')
                        ->AndWhere('a.isActive = 1');
                break;
            case 0:
                $query->Where('a.deletedOn is  null ')
                        ->AndWhere('a.isActive = 0');
                break;
            default :
                $query->Where('a.deletedOn is not  null ');
                break;
        }
        if(empty($id)) {
            $query->andWhere('a.parent is  null ');
        } else {
            $query->join('a.parent', 'pa');
            $query->andWhere('pa.id = :id')
                ->setParameter('id',$id);
        }
        $query->andWhere('LOWER(CONCAT(p.firstName,\' \',p.lastName))  lIKE :name OR LOWER(a.agentCode) like :agentCode')
                ->setParameter('agentCode', '%' . $search . '%')
                ->setParameter('name', '%' . $search . '%')
                ->setMaxResults(5);
        $agents = $query->getQuery()->getResult();
        $result = array();
        foreach ($agents as $obj) {
            $per = $obj->getPersonalInformation();
            $name = $per->getFirstName() . ' ' . $per->getLastName();
            if((strpos(strtolower($obj->getAgentCode()), $search) !== false)) {
                array_push($result, array( 'name' => $obj->getAgentCode()));
            } else {
                array_push($result, array('name' => $name));
            }

        }

        return $result;
    }
    /*
     * get List doctor for admin
     * @param :request
     */

    public function getAgentsAdmin($request) {
        $search = $request->get('search', '');
        $limit = $request->get('length', '');
        $status = $request->get('status', '2');
        $sort = $request->get('sort', array());
        $id = $request->get('id', '');
        $search = strtolower($search);
        if ($limit == -1) {
            $limit = null;
        }
        $ofset = $request->get('page', 1);

        $query = $this->createQueryBuilder('a')
                ->join('a.personalInformation', 'p');
        if(empty($id))
        {
            $query->andWhere('a.parent is  null ');
        }
        else {
            $query->join('a.parent', 'pa');
            $query->andWhere('pa.id = :id')
                ->setParameter('id',$id);
        }
        switch ($status) {
            case 2: $query->andWhere('a.deletedOn is  null ');
                break;
            case 1:
                $query->andWhere('a.deletedOn is  null ')
                        ->andWhere('a.isActive = 1');
                break;
            case 0:
                $query->andWhere('a.deletedOn is  null ')
                        ->andWhere('a.isActive = 0');
                break;
            default :
                $query->andWhere('a.deletedOn is not  null ');
                break;
        }
        $firstNumber = 0;
        if($limit){
            $firstNumber = ($ofset - 1) * $limit;
        }

        $query->andWhere('LOWER(CONCAT(p.firstName,\' \',p.lastName))  lIKE :name OR LOWER(a.agentCode) like :agentCode  ')
                ->setParameter('agentCode', '%' . $search . '%')
                ->setParameter('name', '%' . $search . '%')
                ->setMaxResults($limit)
                ->setFirstResult($firstNumber);

        $this->generateSort($query, $sort);
        $agents = $query->getQuery()->getResult();

        $data = array();
        foreach ($agents as $obj) {
            $per = $obj->getPersonalInformation();
            $name = $per->getFirstName() . ' ' . $per->getLastName();
            $user = $obj->getUser();
            array_push($data, array(
                'id' => $obj->getId(),
                'hashId' => Common::encodeHex($obj->getId()),
                'code' => $obj->getAgentCode(),
                'name' => $name,
                'registerDate' => $obj->getCreatedOn()->format('d M y'),
                'email' => $per->getEmailAddress(),
                'status' => $obj->getIsActive(),
                'lastLogin' => $user != null && $user->getLastLogin() != null ? $user->getLastLogin()->format('d M y h:s:i') : null,
                'confirmed' => $obj->getIsConfirmed() >= Constant::STATUS_CONFIRM ? true : false,
                'child' => count($obj->getActiveChild())
                    )
            );
        }

        $total = $this->createQueryBuilder('a')
                ->select('count(a.id)')
                ->join('a.personalInformation', 'p');
        if(empty($id))
        {
            $total->andWhere('a.parent is  null ');
        }
        else {
            $total->join('a.parent', 'pa');
            $total->andWhere('pa.id = :id')
                ->setParameter('id',$id);
        }
        switch ($status) {
            case 2: $total->andWhere('a.deletedOn is  null ');
                break;
            case 1:
                $total->andWhere('a.deletedOn is  null ')
                        ->andWhere('a.isActive = 1');
                break;
            case 0:
                $total->andWhere('a.deletedOn is  null ')
                        ->andWhere('a.isActive = 0');
                break;
            default :
                $total->andWhere('a.deletedOn is not  null ');
                break;
        }
        $total = $total->andWhere('LOWER(CONCAT(p.firstName,\' \',p.lastName))  lIKE :name OR LOWER(a.agentCode) like :agentCode  ')
                ->setParameter('agentCode', '%' . $search . '%')
                ->setParameter('name', '%' . $search . '%')
                ->getQuery()
                ->getSingleScalarResult();
        return array('data' => $data, 'total' => $total);
    }

    private function generateSort($em, $data) {
        foreach ($data as $key => $value) {
            switch ($key) {
                case 'agentCode':
                    $em->orderBy("a.agentCode", $value);
                    break;
                case 'agentName':
                    $em->orderBy("p.firstName", $value);
                    $em->orderBy("p.lastName", $value);
                    break;
                case 'registerDate':
                    $em->orderBy("a.createdOn", $value);
                    break;
                case 'emailAddress':
                    $em->orderBy("p.emailAddress", $value);
                    break;
            }
        }
    }

    public function getDoctorsForViewModal($id) {
        $agent = $this->find($id);
        $personalInfo = $agent->getPersonalInformation();
        $children = $agent->getChild();
        $finalResult = array();
        $result = array();
        if (count($children) == 0) {
            $finalResult['type'] = 1;
            $doctors = $agent->getDoctors();
            $result['doctors'] = array();
            foreach ($doctors as $doctor) {
                $curDoctor = array();
                $curDoctor['name'] = $doctor->getPersonalInformation()->getFullName();
                $curDoctor['code'] = $doctor->getDoctorCode();
                $curDoctor['registerDate'] = $doctor->getCreatedOn()->format('d M y');
                $result['doctors'][] = $curDoctor;
            }
        } else {
            $finalResult['type'] = 2;
            $result['doctors'] = array();
            foreach ($children as $child) {
                $doctors = $child->getDoctors();
                foreach ($doctors as $doctor) {
                    $curDoctor = array();
                    $curDoctor['name'] = $doctor->getPersonalInformation()->getFullName();
                    $curDoctor['code'] = $doctor->getDoctorCode();
                    $curDoctor['registerDate'] = $doctor->getCreatedOn()->format('d M y');
                    $curDoctor['agentCode'] = $child->getAgentCode();
                    $curDoctor['agentName'] = $child->getPersonalInformation()->getFullName();
                    $result['doctors'][] = $curDoctor;
                }
            }
        }


        $result['agent']['code'] = $agent->getAgentCode();
        $result['agent']['date'] = $agent->getCreatedOn()->format('d M y');
        $result['agent']['name'] = $personalInfo->getFullName();
        $finalResult['data'] = $result;

        return $finalResult;
    }

    public function getAgentForSelectBox($id) {
        $query = $this->createQueryBuilder('a')
                ->where("a.deletedOn is null")
                ->getQuery();

        $agents = $query->getResult();

        $result = array();
        $parent = array();
        $listp = array();
        $finalResult = array();
        foreach ($agents as $agent) {
            if (count($agent->getChild())) {
                array_push($parent, $agent->getId());
                $result[$agent->getId()] = array();
                $listp[$agent->getId()] = $agent;
            }
        }
        foreach ($agents as $agent) {
            if ($agent->getId() != $id) {
                if ($agent->getParent()) {
                    $result[$agent->getParent()->getId()][$agent->getId()] = $agent->getPersonalInformation()->getFullName();
                } else {
                    if (count($agent->getChild()) == 0) {
                        $result[$agent->getId()] = $agent->getPersonalInformation()->getFullName();
                    }
                }
            }
        }

        foreach ($result as $key => $record) {

            if (in_array($key, $parent)) {
                $finalResult[$listp[$key]->getPersonalInformation()->getFullName() . '(Primary)'] = $record;
            } else {
                $finalResult[$key] = $record;
            }
        }

        return $finalResult;
    }

    public function getAgentForSelectBoxDelete($id) {

        $currentAgent = $this->find($id);
        $parentAgent = $currentAgent->getParent();
        if(!empty($parentAgent)) {
            $children = $parentAgent->getActiveChild();
            $lisAgent = array();
            foreach ($children as $c) {
                if($id != $c->getId()) {
                    $lisAgent[$c->getId()] = $c->getPersonalInformation()->getFullName();
                }
            }

            return $lisAgent;
        }


        $query = $this->createQueryBuilder('a')
                ->where("a.deletedOn is null");
        $agents = $query->getQuery()->getResult();

        $result = array();
        $parent = array();
        $listp = array();
        $finalResult = array();
        foreach ($agents as $agent) {
            if (count($agent->getActiveChild())) {
                array_push($parent, $agent->getId());
                $result[$agent->getId()] = array();
                $listp[$agent->getId()] = $agent;
            }
        }
        foreach ($agents as $agent) {
            if ($agent->getId() != $id) {
                if ($agent->getParent()) {
                    $result[$agent->getParent()->getId()][$agent->getId()] = $agent->getPersonalInformation()->getFullName();
                } else {
                    if (count($agent->getActiveChild()) == 0) {
                        $result[$agent->getId()] = $agent->getPersonalInformation()->getFullName();
                    }
                }
            }
        }

        foreach ($result as $key => $record) {

            if (in_array($key, $parent)) {
                $finalResult[$listp[$key]->getPersonalInformation()->getFullName() . '(Primary)'] = $record;
            } else {
                $finalResult[$key] = $record;
            }
        }

        return $finalResult;
    }

    public function getAgentDataForDeletePopup($id) {
        $agent = $this->find($id);
        $result = array();
        $result['agent']['id'] = $agent->getId();
        $result['agent']['code'] = $agent->getAgentCode();
        $result['agent']['name'] = $agent->getPersonalInformation()->getFullName();
        $result['agent']['registerDate'] = $agent->getCreatedOn()->format('d M y');
        $result['doctors'] = array();
        $doctors = $agent->getDoctors();
        foreach ($doctors as $doctor) {
            if ($doctor->getDeletedOn()) {
                continue;
            }
            $curDoctor = array();
            $curDoctor['name'] = $doctor->getPersonalInformation()->getFullName();
            $curDoctor['id'] = $doctor->getId();
            $result['doctors'][] = $curDoctor;
        }
        return $result;

    }

    /**
     * get list agent for send statement
     */
    public function getAgentForStatement($listEmail, $params)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("a.id,
                site.name as siteName,
                a.agentCode,
                ifelse(pi.firstName is null, pi.lastName, CONCAT(pi.firstName, ' ', pi.lastName)) AS name,
                pi.emailAddress")
            ->from('UtilBundle:Agent', 'a')            
            ->innerJoin('a.personalInformation', 'pi')
            ->leftJoin('a.site', 'site')
            ->where('a.isActive =:isActive AND a.deletedOn is null')
            ->andWhere("pi.emailAddress is not null AND pi.emailAddress != ''")
            ->andWhere('a.parent is null')
            ->setParameter('isActive', true);

        if(!empty($listEmail)) {
            $qb->andWhere("pi.emailAddress IN ('".implode("','",$listEmail)."')");
        }
        
        if (!empty($params)) {
            $qb->innerJoin('UtilBundle:AgentMonthlyStatementLine', 'msl', 'WITH', 'msl.agent = a')
            ->innerJoin('msl.agentMonthlyStatement', 'ms')
            ->andWhere('ms.month = :month AND ms.year = :year')
            ->andWhere('msl.totalAmount > 0')
            ->andWhere("msl.filename is not null AND msl.filename != ''")
            ->andWhere('a.isConfirmed IS NOT NULL')
            ->setParameter('month', $params['month'])
            ->setParameter('year', $params['year']);
        }

        return $qb->getQuery()->getArrayResult();
    }

    public function getSubAgentIds($parent)
    {
        $criteria = array(
            'parent' => $parent
        );
        $list = $this->findBy($criteria);

        $result = array();
        foreach ($list as $value) {
            $result[] = $value->getId();
        }

        return $result;
    }

    public function hasGST($id)
    {
        $agent = $this->find($id);
        if (!$agent) {
            return false;
        }

        if (!$agent->getIsGst()) {
            return false;
        }

        $today = new \DateTime();
        $today->setTime(23, 59, 59);
        $gstEffectDate = $agent->getGstEffectDate();
        if ($gstEffectDate > $today) {
            return false;
        }

        return true;
    }

    public function updateAgentSerialNumber($agent, $value)
    {
        if (empty($agent)) {
            return;
        }

        $em = $this->getEntityManager();
        $sequenceNumber = $agent->getSequenceNumbers();
        if ($sequenceNumber) {
            $sequenceNumber->setSerialNumber($value);
            $em->persist($sequenceNumber);
            $em->flush();

            return;
        }

        $sequenceNumber = new SequenceNumber();
        $sequenceNumber->setSerialNumber($value);
        $agent->setSequenceNumbers($sequenceNumber);
        $em->persist($agent);
        $em->flush();

        return;
    }

    public function getAgentFeeMedicine($agent, $rx = null, $isLocalPatient = null)
    {
        $em = $this->getEntityManager();
        // $list = $agent->getAgentFeeMedicine();

        // if ($list->isEmpty()) {
        //     $local = $em->getRepository('UtilBundle:PlatformShareFee')
        //         ->getPSPercentageByType(Constant::AREA_TYPE_LOCAL, Constant::MST_MEDICINE);

        //     $agentFeeMedicine = new AgentFeeMedicine();
        //     $agentFeeMedicine->setIsActive(1);
        //     $agentFeeMedicine->setAreaType(Constant::AREA_TYPE_LOCAL);
        //     $agentFeeMedicine->setAgentFee($local['agentPercentage']);
        //     $agentFeeMedicine->setNewAgentFee($local['agentPercentage']);
        //     $agentFeeMedicine->setTakeEffectOn($local['takeEffectOn']);
        //     $agent->addAgentFeeMedicine($agentFeeMedicine);

        //     $oversea = $em->getRepository('UtilBundle:PlatformShareFee')
        //         ->getPSPercentageByType(Constant::AREA_TYPE_OVERSEA, Constant::MST_MEDICINE);

        //     $agentFeeMedicine = clone $agentFeeMedicine;
        //     $agentFeeMedicine->setAreaType(Constant::AREA_TYPE_OVERSEA);
        //     $agentFeeMedicine->setAgentFee($oversea['agentPercentage']);
        //     $agentFeeMedicine->setNewAgentFee($oversea['agentPercentage']);
        //     $agentFeeMedicine->setTakeEffectOn($oversea['takeEffectOn']);
        //     $agent->addAgentFeeMedicine($agentFeeMedicine);
        // }
        
        // $agentType = array(Constant::AREA_TYPE_LOCAL => Constant::AREA_TYPE_LOCAL, Constant::AREA_TYPE_OVERSEA => Constant::AREA_TYPE_OVERSEA);
        // foreach ($agent->getAgentFeeMedicine() as $value) {
        //     if (isset($agentType[$value->getAreaType()])) {
        //         unset($agentType[$value->getAreaType()]);
        //     }
        // }
        // if (count($agentType) > 0) {
        //     foreach ($agentType as $k => $v) {
        //         $platform = $em->getRepository('UtilBundle:PlatformShareFee')->getPSPercentageByType($k, Constant::MST_MEDICINE);

        //         $agentFeeMedicine = new AgentFeeMedicine();
        //         $agentFeeMedicine->setIsActive(1);
        //         $agentFeeMedicine->setAreaType($k);
        //         $agentFeeMedicine->setAgentFee($platform['agentPercentage']);
        //         $agentFeeMedicine->setNewAgentFee($platform['agentPercentage']);
        //         $agentFeeMedicine->setTakeEffectOn($platform['takeEffectOn']);
        //         $agent->addAgentFeeMedicine($agentFeeMedicine);
        //     }
        // }

        $feeArr = array();
        $local = $em->getRepository('UtilBundle:AgentPrimaryCustomFee')
            ->getAgentPSFByType(
                $agent,
                Constant::AREA_TYPE_LOCAL,
                Constant::MST_MEDICINE
            );
        if(empty($local)) {
            $local = $em->getRepository('UtilBundle:PlatformShareFee')
                ->getPSPercentageByType(
                    Constant::AREA_TYPE_LOCAL,
                    Constant::MST_MEDICINE
                );
            }
        $feeArr['local'] = $local;

        $oversea = $em->getRepository('UtilBundle:AgentPrimaryCustomFee')
            ->getAgentPSFByType(
                $agent,
                Constant::AREA_TYPE_OVERSEA,
                Constant::MST_MEDICINE
            );
        if(empty($oversea)) {
            $oversea = $em->getRepository('UtilBundle:PlatformShareFee')
                ->getPSPercentageByType(
                    Constant::AREA_TYPE_OVERSEA,
                    Constant::MST_MEDICINE
                );
        }
        $feeArr['oversea'] = $oversea;

        $result = [];
        foreach ($feeArr as $fee) {
            $temp = [];
            if ($agent->getId()) {
                $temp['agentId'] = $agent->getId();
            }

            $temp['agentFee'] = $fee['agentPercentage'];
            $temp['newAgentFee'] = $fee['agentPercentage'];
            $temp['takeEffectOn'] = $fee['takeEffectOn'];
            $temp['areaType'] = $fee['areaType'];
            $result[] = $temp;
        }

        if ($rx) {
            $areaType = Constant::AREA_TYPE_OVERSEA;
            if (is_null($isLocalPatient)) {
                $isLocalPatient = $em->getRepository('UtilBundle:Rx')->isLocalPatient(['patient' => $rx->getPatient()]);
            }
            if ($isLocalPatient) {
                $areaType = Constant::AREA_TYPE_LOCAL;
            }

            foreach ($result as $value) {
                if ($areaType == $value['areaType']) {
                    return $value['agentFee'];
                }
            }

            return null;
        }

        return $result;
    }

    public function updateAgentFeeMedicine($agent, $data, $user_id = null)
    {
        $fees = $agent->getAgentFeeMedicine();
        foreach ($data as $value) {
            if ($fees->isEmpty()) {
                $fee = new AgentFeeMedicine();
            } else {
                $fee = $fees->current();
            }

            $this->updateAgentFeeMedicineLog($fee, $value, $user_id);

            $fee->setIsActive(1);
            $fee->setNewAgentFee($value['newAgentFee']);
            $date = date_create_from_format('d M y', $value['takeEffectOn']);
            $fee->setTakeEffectOn($date);
            if ($date->diff(new \DateTime())->invert == 0) {
                $fee->setAgentFee($value['newAgentFee']);
            }
            $fee->setAreaType($value['areaType']);

            if ($fees->isEmpty()) {
                $agent->addAgentFeeMedicine($fee);
            } else {
                $fees->next();
            }
        }
    }

    public function updateAgentFeeMedicineLog($fee, $value, $user_id)
    {
        $log = new AgentFeeMedicineLog();
        $dt = new \DateTime();
        $date_effective = date_create_from_format('d M y', $value['takeEffectOn']);
        $date = $fee->getTakeEffectOn()->format('d M y') === $value['takeEffectOn'] ? 1 : 0;

        $log->setUserId($user_id);
        $log->setAgentFeeMedicineId($fee->getId());
        $log->setAreaType($value['areaType']);
        $log->setCreatedOn($dt);
        $log->setUpdatedOn($dt);


        if ($fee->getNewAgentFee() !== $value['newAgentFee']) {
            $log->setOldAgentFee($fee->getNewAgentFee());
            $log->setNewAgentFee($value['newAgentFee']);
        }

        if ($date === 0) {
            $log->setOldEffectiveDate($fee->getTakeEffectOn());
            $log->setNewEffectiveDate($date_effective);
        }

        if (($fee->getNewAgentFee() !== $value['newAgentFee']) || $date === 0) {
            $log->setUserId($user_id);
            $log->setAgentFeeMedicineId($fee->getAgent()->getId());
            $log->setAreaType($value['areaType']);
            $log->setCreatedOn($dt);
            $log->setUpdatedOn($dt);
            $em = $this->getEntityManager();
            $em->persist($log);
            $em->flush();
        }
    }

    public function listAgentFeeMedicine($params)
    {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder();
        // $qb->select('agent.id, per.firstName, per.lastName, agent.agentCode')
        //     ->from('UtilBundle:agent', 'agent')
        //     ->innerJoin('agent.personalInformation', 'per')
        //     ->andWhere('agent.parent is  null ')
        //     ->andWhere('agent.isActive = 1')
        //     ->andWhere('agent.deletedOn is NULL');
           
        $qb->select('agent.id, per.firstName, per.lastName, agent.agentCode, afm.agentFee, afm.areaType, afm.takeEffectOn')
            ->from('UtilBundle:agent', 'agent')
            ->leftJoin('UtilBundle:AgentFeeMedicine','afm','WITH','afm.agent = agent.id and afm.areaType = 1')
            ->innerJoin('agent.personalInformation','per')
            ->andWhere('agent.parent is NULL')
            ->andWhere('agent.isActive = 1')
            ->andWhere('agent.deletedOn is NULL');


        if(isset($params['sorting']) && !empty($params['sorting'])){
            $arrSort= explode("_", $params['sorting']);
            if(isset($arrSort[0]) && isset($arrSort[1])) {
                if($arrSort[0] == 'name') {
                    $qb->orderBy('per.firstName', strtoupper($arrSort[1]));
                } else {
                    $qb->orderBy($arrSort[0], strtoupper($arrSort[1]));
                }
            }
        }

        //count total items
        $totalResult = count($qb->getQuery()->getArrayResult());
        //pagination
        $perPage = ($params['perPage'] > 0)? $params['perPage']: Constant::PER_PAGE_DEFAULT;
        $page = ($params['page'] > 0)? $params['page']: Constant::PAGE_DEFAULT;

        $qb->setFirstResult($perPage*$page)->setMaxResults($perPage);

        return array(
            'totalResult' => $totalResult,
            'totalPages'  => ceil($totalResult/$perPage),
            'data'        => $qb->getQuery()->getArrayResult()
        );
    }

    public function getAgentFeeMedicineByAreaType($agentFeeMedicine)
    {
        $areaType = $agentFeeMedicine['areaType'];
        if ($areaType == Constant::AREA_TYPE_LOCAL) {
            $areaType = Constant::AREA_TYPE_OVERSEA;
        }

        $criteria = array(
            'agent' => $agentFeeMedicine['id'],
            'areaType' => $areaType
        );

        $em = $this->getEntityManager();
        $result = $em->getRepository('UtilBundle:AgentFeeMedicine')->findOneBy($criteria);

        return $result;
    }

    public function get3paFee($agent, $type, $isLocalPatient)
    {
        $em = $this->getEntityManager();

        $areaType = Constant::AREA_TYPE_OVERSEA;
        if ($isLocalPatient) {
            $areaType = Constant::AREA_TYPE_LOCAL;
        }

        $criteria = array(
            'agent' => $agent,
            'feeType' => $type,
            'area' => $areaType
        );

        $result = $em->getRepository('UtilBundle:Agent3paFee')->findOneBy($criteria);

        if ($result) {
            $feeSetting = $result->getFeeSetting();
            if ($feeSetting) {
                return $feeSetting->getFee();
            }
        }

        return 0;
    }

    public function getMiniumFeeForAgent($is3pa, $isLocalPatient, $country, $postalCode = null)
    {
        $em = $this->getEntityManager();

        $list = Constant::PRIMARY_AGENT_FEE_CODE;
        if ($is3pa) {
            $list = Constant::SECONDARY_AGENT_FEE_CODE;
        }

        $feeCodes = $em->getRepository('UtilBundle:AgentMininumFeeSetting')
            ->findById($list);

        if (empty($feeCodes)) {
            return 0;
        }

        if ($isLocalPatient) {
            return $feeCodes[0]->getFeeValue();
        }

        $countryId = $country->getId();

        // Indo
        if ($countryId == Constant::ID_INDONESIA) {
            return $feeCodes[1]->getFeeValue();
        }

        // Malay
        if ($countryId == Constant::ID_MALAYSIA) {
            if ($em->getRepository('UtilBundle:CourierRate')->isMYE($postalCode)) {
                return $feeCodes[2]->getFeeValue();
            }

            return $feeCodes[3]->getFeeValue();
        }

        return $feeCodes[4]->getFeeValue();
    }

    public function getAgentMiniumFee($agent, $is3pa, $isLocalPatient, $country, $postalCode = null)
    {
        $em = $this->getEntityManager();
        $feeCode = 0;

        if(!$is3pa) {
            if ($isLocalPatient) {
                $feeCode = Constant::AGENT_MINUMUM_FEE_PRIMARY_lOCAL;
            } else {
                $countryId = $country->getId();
                if ($countryId == Constant::ID_INDONESIA) {
                    $feeCode = Constant::AGENT_MINUMUM_FEE_PRIMARY_INDONESIA;
                }elseif ($countryId == Constant::ID_MALAYSIA) {
                    if ($em->getRepository('UtilBundle:CourierRate')
                        ->isMYE($postalCode)) {
                        $feeCode = Constant::AGENT_MINUMUM_FEE_PRIMARY_EAST_MALAY;
                    } else {
                        $feeCode = Constant::AGENT_MINUMUM_FEE_PRIMARY_WEST_MALAY;
                    }
                } else {
                    $feeCode = Constant::AGENT_MINUMUM_FEE_PRIMARY_INTERNATIONAL;
                }
            }
        } else {
            if ($isLocalPatient) {
                $feeCode = Constant::AGENT_MINUMUM_FEE_SECONDARY_lOCAL;
            } else {
                $countryId = $country->getId();
                if ($countryId == Constant::ID_INDONESIA) {
                    $feeCode = Constant::AGENT_MINUMUM_FEE_SECONDARY_INDONESIA;
                }elseif ($countryId == Constant::ID_MALAYSIA) {
                    if ($em->getRepository('UtilBundle:CourierRate')
                        ->isMYE($postalCode)) {
                        $feeCode = Constant::AGENT_MINUMUM_FEE_SECONDARY_EAST_MALAY;
                    } else {
                        $feeCode = Constant::AGENT_MINUMUM_FEE_SECONDARY_WEST_MALAY;
                    }
                } else {
                    $feeCode = Constant::AGENT_MINUMUM_FEE_SECONDARY_INTERNATIONAL;
                }
            }
        }

        $agentMin = $em->getRepository('UtilBundle:AgentCustomMedicineFee')
            ->findOneBy(array(
                'agent' => $agent,
                'feeCode' => $feeCode,
            ));
        if($agentMin) {
            return (float) $agentMin->getFeeValue();
        } else {
            return (float) $this->getMiniumFeeForAgent($is3pa, $isLocalPatient, $country, $postalCode);
        }
    }
}

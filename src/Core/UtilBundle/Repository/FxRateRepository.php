<?php

namespace UtilBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UtilBundle\Utility\Constant;

/**
 * FxRateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FxRateRepository extends EntityRepository {

    /**
     * Get rate of currency
     * @param type $currencyFrom
     * @param type $currencyTo
     * @return type
     * @author luyen nguyen
     */
    public function getRate($currencyFrom, $currencyTo) {
        $queryBulider = $this->createQueryBuilder('f');
        $queryBulider->select('f')
                ->andWhere($queryBulider->expr()->eq("f.currencyFrom", ":currencyFrom"))
                ->setParameter("currencyFrom", $currencyFrom)
                ->andWhere($queryBulider->expr()->eq("f.currencyTo", ":currencyTo"))
                ->setParameter("currencyTo", $currencyTo);
        $result = $queryBulider->getQuery()->getOneOrNullResult();
        return $result;
    }

    /**
     * Get rates
     * @param type $currencyFromTos
     * @return type
     * @author luyen nguyen
     */
    public function getRates($currencyFromTos) {
        $queryBulider = $this->createQueryBuilder('f');
        $queryBulider->select('f.rate, f.currencyTo');
        $count = 0;
        $sql = "";
        foreach ($currencyFromTos as $currencyFromTo) {
            if ($count != count($currencyFromTos) - 1) {
                $sql .= '(f.currencyFrom = :currencyFrom' . $count
                        . ' AND f.currencyTo = :currencyTo' . $count . ') OR ';
            } else {
                $sql .= '(f.currencyFrom = :currencyFrom' . $count
                        . ' AND f.currencyTo = :currencyTo' . $count . ')';
            }
            $queryBulider->setParameter("currencyFrom" . $count, $currencyFromTo['from'])
                    ->setParameter("currencyTo" . $count, $currencyFromTo['to']);
            $count ++;
        }
        $queryBulider->where($sql);
        $result = $queryBulider->getQuery()->getResult();
        return $result;
    }    
}
